{\rtf1\ansi
{\fonttbl
{\f0\fswiss Helvetica;}
{\f1\fmodern Courier;}
{\f2\froman Times;}
{\f3\froman Symbol;}
}
{\info{\comment Translated from SGML to RTF w/ Linuxdoc-SGML}}

\page{\pard\plain\keepn\f0\fs36\b\tx576{1 Seguridad en GNU/Linux}}
{}#{\footnote TOC_0}

${\footnote Seguridad_en_GNU_Linux}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Seguridad en GNU/Linux}

A veces se le ha atribuido al sistema GNU/Linux una escasez de 
seguridad, a pesar de ser un sistema multiusuario real, y s\'{\i} que han 
existido conocidos agujeros de seguridad, no en el sistema en su 
conjunto sino en diversas aplicaciones. El gestor de correo, enorme y 
complejo, {\i sendmail} tiene el triste prestigio de ser un programa 
en el que hab\'{\i}a problemas de seguridad frecuentes. Este gestor no era 
espec\'{\i}fico de Linux, pero s\'{\i} de sistemas UNIX en general.
\par\pard\plain
\li500{}
\sb200\fi0
Por esto, y a pesar de que la respuesta de los desarrolladores de las 
diversas distribuciones de GNU/Linux, y de los creadores de 
aplicaciones ha sido siempre r\'{a}pida, es posible que en un sistema no 
se tapen los agujeros de seguridad porque el administrador no ha tenido 
tiempo de actualizar a la \'{u}ltima versi\'{o}n, no conoce de la existencia 
de aqu\'{e}l, o no ha sabido configurar adecuadamente las aplicaciones o 
servicios ofrecidos.
\par\pard\plain
\li500{}
\sb200\fi0
Las distribuciones basadas en GNU/Linux ofrecen a sus usuarios una 
gran cantidad de informaci\'{o}n en sus servidores de WWW referentes a 
actualizaciones de paquetes que proporcionaban programas a los cuales 
les ha sido detectado un posible peligro de seguridad. RedHat hace 
esto frecuentemente, incluso se vi\'{o} obligada a sacar la versi\'{o}n 5.1 de 
forma acelerada para tapar el gran n\'{u}mero de agujeros existentes en su 
versi\'{o}n estrella, la 5.0. Debian tambi\'{e}n pone avisos de seguridad, 
cuando son recibidos, relacionados con los programas que se ofrecen 
dentro de la distribuci\'{o}n, aunque con su modelo de desarrollo m\'{a}s 
abierto, ve\'{a}se por ejemplo el BTS (Bug Tracking System) consigue 
ofrecer antes nuevas versiones de los programas con los problemas de 
seguridad resueltos. As\'{\i} mismo, Debian, con posterioridad a la salida 
de la versi\'{o}n final de su distribuci\'{o}n, crea una nueva secci\'{o}n llamada 
{\i stable-updates} que contiene actualizaciones a paquetes de la 
versi\'{o}n estable en su mayor parte relacionadas con problemas de 
seguridad.
\par\pard\plain
\li500{}
\sb200\fi0
Sin embargo los problemas que dan lugar a que una determinada m\'{a}quina 
est\'{e} "comprometida" no se limita exclusivamente a que se haya 
instalado la \'{u}ltima versi\'{o}n de un determinado programa, tambi\'{e}n es 
necesario cuidar la configuraci\'{o}n de ciertos programas, vigilar la 
informaci\'{o}n ofrecida a los extra\'F1os y el contenido de los 
diversos ficheros de un sistema.
\par\pard\plain
\li500{}
\sb200\fi0
El sistema GNU/Linux se surte, desde sus principios, de los programas 
surgidos dentro de la comunidad UNIX en muchos \'{a}mbitos, ya que \'{e}ste es 
un sistema UNIX para PCs, como ya saben los lectores de la 
revista. Desde gestores de correo, a servidores de ftp o servidores de 
WWW, algunos de los existentes en GNU/Linux son, o provienen de, 
programas dise\'F1ados en principio para otros sistemas UNIX, aunque con 
el auge actual de GNU/Linux estos programas se dise\'F1an espec\'{\i}ficamente 
para Linux. Es por lo primero que los problemas de seguridad de estos 
programas se pueden trasladar a una distribuci\'{o}n de GNU/Linux, pero 
tambi\'{e}n es por esto que existen gran cantidad de auditores de 
seguridad para Linux.
\par\pard\plain
\li500{}
\sb200\fi0
Se tratar\'{a}n primero en este art\'{\i}culo herramientas que no son 
espec\'{\i}ficas de GNU/Linux, sino del mundo UNIX en general, y tratando 
de comentar las particularidades de aquellos en cuanto a GNU/Linux se 
refiere. En el pr\'{o}ximo art\'{\i}culo de la revista, en esta misma secci\'{o}n, 
se comentar\'{a}n tambi\'{e}n herramientas exclusivas, surgidas 
posteriormente, para GNU/Linux, y se incidir\'{a} en las facilidades (o 
problemas) de portabilidad de estas herramientas a GNU/Linux.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{2 ¿Qu\'{e} son los programas auditores de seguridad?}}
{}#{\footnote TOC_1}

${\footnote _Qu___e__son_los_programas_auditores_de_seguridad_}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote ¿Qu\'{e} son los programas auditores de seguridad?}

\par\pard\plain
\li500{}
\sb200\fi0
Los programas auditores de seguridad son herramientas tremendamente 
\'{u}tiles para la administraci\'{o}n de un sistema, ya que permiten detectar, de 
forma rutinaria, problemas de seguridad para los que pudieran existir 
ataques conocidos. 
\par\pard\plain
\li500{}
\sb200\fi0
Un programa auditor de seguridad deber\'{\i}a ser capaz 
de detectarlos sin vulnerar la integridad del sistema, es decir, no 
deber\'{\i}a, por ejemplo, detectar que un sistema es vulnerable a un 
ataque del tipo DoS (Denial of Service), dejando al sistema 
"colgado". Este tipo de programas no sustituyen al sentido com\'{u}n ni a 
la experiencia de un buen administrador, sino que suponen una ayuda 
para realizar algunas tareas rutinarias que pueden llevar mucho tiempo 
a un administrador normal.
\par\pard\plain
\li500{}
\sb200\fi0
Estos programas  pueden operar a muchos niveles, 
desde la comprobaci\'{o}n de la pertenencia de archivos a usuarios y 
grupos del sistema hasta pruebas sobre aplicaciones instaladas para 
verificar si \'{e}stas tienen agujeros conocidos. Una forma sencilla de 
demonstrarlo ser\'{\i}a, por ejemplo, mirar la versi\'{o}n de \'{e}sta \'{u}ltima, y 
ver si se trata de una versi\'{o}n que tuviera un problema especialmente 
grave.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{3 Los precursores: COPS, Tiger, Tripwire e ISS}}
{}#{\footnote TOC_2}

${\footnote Los_precursores__COPS__Tiger__Tripwire_e_ISS}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Los precursores: COPS, Tiger, Tripwire e ISS}

Llamamos a estos programas precursores porque fueron los primeros que 
empezaron a desarrollarse en la l\'{\i}nea de automatizar las tareas del 
administrador para vigilar la seguridad de la m\'{a}quina. Todos estos 
sugieron en el mundo UNIX al principio de la decada de los 90, aunque 
algunos se mantienen a\'{u}n hoy vigentes o han sido "remozados" para 
adaptarlos a los nuevos tiempos.
\par\pard\plain
\li500{}
\sb200\fi0
COPS (Computer Oracle and Password System) es un paquete de 
herramientas de seguridad disponible de forma p\'{u}blica. Est\'{a}n dise\'F1adas 
para ayudar a la tarea de un administrador identificando problemas de 
seguridad en un sistema UNIX, aunque no pretende arreglar las 
discrepancias que encuentra sino que simplemente produce un informe de 
lo que ha encontrado y lo almacena o lo env\'{\i}a por correo. COPS fue 
realizado por Dan Farmer, uno de los creadores de SATAN y distribuido 
el 31 de enero de 1989.
\par\pard\plain
\li500{}
\sb200\fi0
El paquete se divide en dos partes: un conjunto de programas que 
automatizan comprobaciones rutinarias y la documentaci\'{o}n para 
manejarlo e interpretar su salida. COPS requiere ser ejecutado en cada 
m\'{a}quina a chequear y es multiplataforma. El programa inicialmente fue 
escrito en base a shell scripts (en el intento de asegurar la 
portabilidad de \'{e}ste) y en programas en C (para aquellas acciones que 
necesitan ejecutarse r\'{a}pidamente), la \'{u}ltima versi\'{o}n de este paquete 
(1.0.4, 6 de marzo de 1992) est\'{a} realizada, adem\'{a}s, en Perl.
\par\pard\plain
\li500{}
\sb200\fi0
COPS realiza un buen n\'{u}mero de comprobaciones, con la intenci\'{o}n de 
buscar vulnerabilidades: 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} chequeo de permisos de ficheros, directorios y dispositivos.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} cracker de passwords a dos niveles, que de hecho ha sido 
realizado usando el notorio {\i Crack} (ver m\'{a}s abajo).
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} comprobaci\'{o}n del contenido, formato y seguridad de los ficheros 
de passwords y ge grupo.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} chequeo de programas que se ejecutan en /etc/rc* y en el cron.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} b\'{u}squeda de programas setuid root, con permiso de escritura y 
avisa si son shell scripts.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} comprobaci\'{o}n a trav\'{e}s CRC de binarios y ficheros importantes para evitar 
modificaciones.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} comprobaci\'{o}n de permisos de escritura en los directorios de los 
usuarios y de sus ficheros de configuraci\'{o}n.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} comprobacion autom\'{a}tica de avisos del CERT, descarg\'{a}ndolos 
previamente y comprobando si existe alg\'{u}n aviso nuevo para el tipo de 
m\'{a}quina sobre el que se ejecuta.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} un sistema experto llamado Kuang que en base a una serie de 
reglas indica si el sistema ha sido o no comprometido.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} chequeos varios: directorios en el patg, hosts.equiv, 
exportaciones por NFS...
\par\pard\plain
\li500{}
\sb200\fi0
Dado que no realiza ninguna modificaci\'{o}n, no necesita ser ejecutado 
con privilegios de superusuario (como "root") sino que lo puede 
ejecutar cualquier usuario. Eso s\'{\i}, para descubir parte de la 
informaci\'{o}n, como por ejemplo analizar todos los ficheros con el bit 
setuid, puede que sea necesario ejecutarlo como superusuario ya que 
puede que algunos ficheros (o directorios) no tengan permisos de 
lectura para todo el mundo.
\par\pard\plain
\li500{}
\sb200\fi0
Junto con COPS se distribuye CARP (COPS Analysis and Reporting 
Program), programa que realiza informes gr\'{a}ficos en base a los 
resultados de COPS.
\par\pard\plain
\li500{}
\sb200\fi0
Tiger es similar a COPS, pues se dedica a conseguir informaci\'{o}n que 
pueda descubrir problemas de seguridad en m\'{a}quinas UNIX pero est\'{a} m\'{a}s 
actualizado que COPS y m\'{a}s configurable. La \'{u}ltima versi\'{o}n disponible 
es de marzo de 1994.
\par\pard\plain
\li500{}
\sb200\fi0
Tiger, que toma el nombre de un equipo de futbol americano, es un 
conjunto de Bourne shell scripts, programas en C y ficheros de datos 
que se usan para realizar una auditor\'{\i}a de seguridad de sistemas 
UNIX. Es multiplataforma, entre ellas SunOS 4.x y 5.x.
\par\pard\plain
\li500{}
\sb200\fi0
Se desarroll\'{o} para escanear sistemas que se quer\'{\i}an fueran accesibles 
desde el exterior de un campus, y se ejecuta localmente.
\par\pard\plain
\li500{}
\sb200\fi0
El objetivo primordial de Tiger es analizar el sistema para tratar de 
encontrar maneras de obtener privilegios de superusuario. Su dise\'F1o 
parte de la hip\'{o}tesis de que cualquier otro uid o gid puede ser 
obtenido por personas no autorizadas, es decir, que cualquie persona 
puede hacerse pasar por un usuario cualquiera de la m\'{a}quina, excepto, 
por supuesto, por el superusuario.
\par\pard\plain
\li500{}
\sb200\fi0
Algunos de los chequeos que reliza Tiger son: 
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} aliases de mail.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} exportaci\'{o}n por NFS.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} variables de inetd.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} variables del PATH.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} ficheros .rhosts y .netrc.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} permisos de ficheros y directorios.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} avisa de la existencia de parches de mantenimiento.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} paths que se encuentren en ficheros que den alg\'{u}n warning.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} ofrece ayuda sobre todos los temas.
\par\pard\plain
\li1000{}
\sb200\fi0
\li1000{}\fi-200{\f3\'B7} lanza autom\'{a}ticamente el CRACK.
\par\pard\plain
\li500{}
\sb200\fi0
Tiger est\'{a} disponible para Linux 2.x, gracias al trabajo realizado por 
Robert L. Ziegler, aunque la versi\'{o}n distribuida originalmente ten\'{\i}a 
soporte para Linux 0.99. Tiger tiene soporte para muchas 
arquitecturas, en funci\'{o}n de la arquitectura sobre la que se ejecuta 
se define las comprobaciones que va a realizar.
\par\pard\plain
\li500{}
\sb200\fi0
Por otro lado tenemos a Tripwire, un programa que comprueba la 
integridad de ficheros y directorios. Genera, en su primera pasada 
informaci\'{o}n sobre \'{e}stos en una base de datos, y posteriormente los 
comprueba y avisa de cualquier diferencia (incluso borrados y 
a\'F1adidos). Ejecutado de manera regular permite encontrar cambios en 
ficheros cr\'{\i}ticos que podr\'{\i}an haber tenido lugar por la entrada de un 
"intruso".
\par\pard\plain
\li500{}
\sb200\fi0
Lo que Tripwire hace es marcar en la base de datos tanto los permisos 
y usuarios de los ficheros como un c\'{o}digo de redundancia c\'{\i}clica (CRC) 
con el que luego comprueba si ha sido modificado un determinado 
fichero.  Este paquete est\'{a} disponible para Debian GNU/Linux existe un 
paquete {\i tripwire} en su \'{u}ltima versi\'{o}n (slink) que est\'{a} 
disponible para instalar.
\par\pard\plain
\li500{}
\sb200\fi0
Finalmente dentro de este tipo de programas y en la misma \'{e}poca, se 
encuentra el ISS (Internet Security Scanner), de Christoper Klaus. En 
un principio el programa fue realizado por un inter\'{e}s, por parte del 
autor, de conocer los problemas de seguridad en Internet en 
1993. Posteriormente, el autor cre\'{o} una compa\'F1\'{\i}a alrededor de este 
producto, y distingui\'{o} la versi\'{o}n comercial de la versi\'{o}n de prueba, 
que carece de interfaz gr\'{a}fico y de parte de la funcionalidad que 
tiene la primera.
\par\pard\plain
\li500{}
\sb200\fi0
En cualquier caso ISS se trata de una de las primeras herramientas 
que, a pesar de carecer del interfaz gr\'{a}fico que luego proveer\'{a} SATAN 
y otras herramientas posteriores, pone en marcha el desarrollo de 
herramientas auditoras de seguridad de redes automatizadas. COPS, 
TIGER y Tripwire constituyen el primer paso ya que se tratan de 
herramientas que s\'{o}lo ven el sistema sobre el que se ejecutan y 
comprueban las vulnerabilidades en \'{e}ste. ISS es capaz de comprobar 
vulnerabilidades comunes en una o varias subrededes (en la l\'{\i}nea de 
comandos se le dar\'{a} un rango de una red que indica las m\'{a}quinas que debe 
comprobar)
\par\pard\plain
\li500{}
\sb200\fi0
ISS es un programa monol\'{\i}tico escrito en C, que realiza comprobaciones 
sobre los puertos abiertos en el servidor y de los 
servicios RPC ofrecidos, estudio de las particiones exportadas por 
NFS, observaci\'{o}n del servidor de correo, comprobaciones sobre el NIS 
(antes llamado YP - Yellow Pages) y accesos mediante telnet haciendo 
uso de pares de usuario/password comunes (que en algunos casos ven\'{\i}an 
de f\'{a}brica y no se modificaban).
\par\pard\plain
\li500{}
\sb200\fi0
ISS se convierte as\'{\i} en uno de los primeros programas que implementan 
estas bater\'{\i}as de pruebas, de forma que para un administrador resulta 
m\'{a}s sencillo comprobar todas las m\'{a}quinas a su cargo de un s\'{o}lo 
vistazo. M\'{a}s tarde, aunque muy cercano en el tiempo, llegar\'{\i}a SATAN, 
causando una aut\'{e}ntica revoluci\'{o}n.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{4 SATAN}}
{}#{\footnote TOC_3}

${\footnote SATAN}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote SATAN}

SATAN es el acr\'{o}nimo de Security Administrator Tool for Analyzing 
Networks (ver listado 1  
). Se trata, m\'{a}s que de un 
programa, de un conjunto de programas unidos en un interfaz 
com\'{u}n. Cuando \'{e}ste fue escrito por Dan Farmen (programador de COPS) y 
Wietse Venema de la Universidad de Tecnolog\'{\i}a de Eindhoven, lo que se 
hizo fue poner una interfaz gr\'{a}fica que ya se preve\'{\i}a poderosa, y al 
mismo tiempo "amigable", como es el WWW a un conjunto de programas, 
algunos ya existentes y otros creados de cero por sus autores, que 
probaban vulnerabilidades conocidas.
\par\pard\plain
\li500{}
\sb200\fi0
SATAN no es una herramienta novedosa en el aspecto t\'{e}cnico, pero caus\'{o} 
una aut\'{e}ntica revoluci\'{o}n. Las herramientas de este tipo, pueden 
convertirse, como todas las herramientas, en utensilios \'{u}tiles o en 
armas mort\'{\i}feras. Los autores tuvieron la "osad\'{\i}a", entonces, de poner 
el resultado de su trabajo en Internet y permitiendo la distribuci\'{o}n 
libre de binarios y fuentes. Hab\'{\i}a otros programas disponibles 
libremente como COPS, para probar vulnerabilidades en un s\'{o}lo sistema, 
o el ISS, para probarlas en sistemas remotos, pero este \'{u}ltimo, por 
ejemplo, carec\'{\i}a de suficiente funcionalidad y de un interfaz gr\'{a}fico 
en la versi\'{o}n p\'{u}blica, aunque s\'{\i} en la versi\'{o}n comercial. Los autores 
decidieron distribuirlo de forma libre ya que su experiencia les 
indicaba que los esfuerzos de limitar la distribuci\'{o}n de informaci\'{o}n 
de seguridad y herramientas para este fin no hab\'{\i}a mejorado las cosas, 
dado que los elementos "no deseables" los consegu\'{\i}an de todas formas y 
las personas que deber\'{\i}an haber tenido acceso a ellas no lo hab\'{\i}an 
tenido debido a limitaciones arbitrarias o injustas.
\par\pard\plain
\li500{}
\sb200\fi0
Esto tuvo como consecuencia una grave pol\'{e}mica, por la cual incluso 
uno de los creadores fue despedido de su trabajo. SATAN fue concebida 
como una herramienta para admininistradores, pero tambi\'{e}n pod\'{\i}a ser 
usada como un arma por crackers. Incluso se dise\'F1aron programas para 
detectar "ataques" de SATAN, como por ejemplo Courtney (desarollado 
por CIAC) o Gabriel.
\par\pard\plain
\li500{}
\sb200\fi0
El problema entonces, y tambi\'{e}n ahora, es que la mayor parte de los 
administradores de sistemas no eran capaces de estar al tanto del 
conjunto de agujeros de seguridad que sal\'{\i}an en programas de uso 
frecuente en muchos sistemas UNIX. Un cracker, bien informado, pod\'{\i}a 
hacer uso de estas vulnerabilidades reconocidas (pero a\'{u}n no 
resueltas), para atacar a sistemas que a\'{u}n no se hab\'{\i}an actualizado a 
una versi\'{o}n del programa que resolviera los fallos. 
\par\pard\plain
\li500{}
\sb200\fi0
En un sistema concurren muchos servicios que se "ven" en el exterior, 
como por ejemplo: servidores de WWW, de correo o de FTP, gestores de 
bases de datos, exportaci\'{o}n de discos via NFS, etc... Estar al tanto 
de actualizaciones de todos estos y de la forma en que pueden ser 
usados para obtener informaci\'{o}n de un servidor que puede servir e 
intentar acceder a \'{e}ste puede ocupar gran parte del tiempo de un 
administrador de sistemas.
\par\pard\plain
\li500{}
\sb200\fi0
Estar al tanto de listas de distribuci\'{o}n como bugtrack, los avisos del 
CERT  no es f\'{a}cil y, 
adem\'{a}s, si no se hace de forma cont\'{\i}nua se puede dejar un "agujero" 
que un intruso puede intentar aprovechar.
\par\pard\plain
\li500{}
\sb200\fi0
SATAN abri\'{o} la pol\'{e}mica al poner en manos de todo el mundo un 
programa, de f\'{a}cil uso, que descubriera todas estas vulnerabilidades a 
un tiempo, a la vez que pon\'{\i}a al descubierto informaci\'{o}n sobre 
las relaciones entre m\'{a}quinas, lo que los autores denominaron 
"relaci\'{o}n de Confianza".
\par\pard\plain
\li500{}
\sb200\fi0
SATAN obtiene tanta informaci\'{o}n como le es posible de servicios de red 
como finger, NFS, NIS, ftp y tftp, rexd, y otros. La informaci\'{o}n 
extra\'{\i}da no s\'{o}lo indica las fuentes por las que un intruso podr\'{\i}a 
ganar informaci\'{o}n del sistema, sino tambi\'{e}n fallos potenciales de 
seguridad generalmente debidos a una mala configuraci\'{o}n de estos 
servicios, problemas conocidos en herramientas de red o malas 
pol\'{\i}ticas de seguridad.
\par\pard\plain
\li500{}
\sb200\fi0
Pero el concepto novedoso de SATAN es el extraer, de la informaci\'{o}n 
inicial y con un conjunto de reglas configurables por el usuario, las 
relaciones de dependencia entre m\'{a}quinas o  servicios dados de una a 
otra. Esto hace posible el an\'{a}lisis de todos los servidores de una red 
para analizar las implicaciones de la pol\'{\i}tica de confianza y 
servicios ofrecidos que, en palabras de los autores "les permitar\'{a}n 
hacer decisiones razonables sobre el nivel de seguridad de los 
sistemas involucrados". Los autores de SATAN hablan de confianza 
cuando recursos locales de un servidor (discos duros, acceso de 
usuarios, servidores de X...) son usados por un cliente con o sin la 
autorizaci\'{o}n debida. Si el sistema X conf\'{\i}a en el Y, un intruso que 
pueda poner en peligro Y podr\'{a} tambi\'{e}n poner en peligro X. Los autores 
indican que cualquier tipo de confianza puede ser subvertida, no s\'{o}lo 
porque se pueda acceder a Y, sino porque el sistema que valida el 
acceso de Y pueda estar fuera del control del administrador. Por 
ejemplo, si se identifica a Y por el nombre de la m\'{a}quina y se 
subvierte el servidor de nombres (el DNS), o si se hace uso de la 
t\'{e}cnica de IP spoofing para hacerle creer a X que otra 
m\'{a}quina es Y.
\par\pard\plain
\li500{}
\sb200\fi0
A este respecto los autores de SATAN escribieron un excelente ensayo 
sobre seguridad en sistemas UNIX y en Internet en general que se 
titula "Improving the Security of Your Site by Breaking Into It" 
("Mejorar la seguridad de su servidor entrando a la fuerza en \'{e}l"), 
lectura recomendable para todos aquellos interesados en seguridad 
\par\pard\plain
\li500{}
\sb200\fi0
Hay que decir que SATAN es una herramienta que podr\'{\i}a considerarse ya 
obsoleta, las vulnerabilidades que intenta descubrir, eran comunes (y 
conocidas) cuando fue dise\'F1ada, pero se tratan de "agujeros" que, hoy 
por hoy, deber\'{\i}an estar "tapados", si se detecta algunos de estos es 
debido a una incompetencia por parte del administrador de la 
m\'{a}quina. Sin embargo, donde a\'{u}n s\'{\i} resulta \'{u}til SATAN es en la funci\'{o}n 
de recopilaci\'{o}n de informaci\'{o}n y en la aplicabilidad del concepto de 
confianza.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{5 Ejecuci\'{o}n de SATAN}}
{}#{\footnote TOC_4}

${\footnote Ejecuci___o_n_de_SATAN}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Ejecuci\'{o}n de SATAN}

SATAN debe ser ejecutado como usuario {\i root} (superusuario) ya 
que algunos de los tests que realiza necesita los requisitos de este 
usuario para funcionar (ver listado 2 . Hace uso, por ejemplo, de sockets abri\'{e}ndolos como SOCK_RAW, para 
hacer accesos a bajo nivel de \'{e}stos. Es posible ejecutar SATAN como 
cualquier otro usuario, pero algunos de los tests, no funcionar\'{a}n en 
absoluto.
\par\pard\plain
\li500{}
\sb200\fi0
Han existido algunos problemas a este respecto en la distribuci\'{o}n de 
SATAN, ya que si el programa se ejecuta como superusuario, y el c\'{o}digo 
fuente est\'{a} disponible, es posible que alg\'{u}n desaprensivo distribuya 
una versi\'{o}n de SATAN "modificada" de forma que, al ejecutarla, 
se introducir\'{\i}a un troyano en el sistema, es decir, la copia modificada 
realiza m\'{a}s de lo que deber\'{\i}a, enviando informaci\'{o}n, por ejemplo, de 
nuestro sistema al exterior. Por ello es una buena medida obtener 
SATAN directamente de la fuente original y comprobar que no ha sido 
modificado (mediante la suma MD5 del fichero recibido)
\par\pard\plain
\li500{}
\sb200\fi0
Para ejecutar SATAN hace falta Perl 5 (en este lenguaje est\'{a}n 
programados los scripts que generan las p\'{a}ginas autom\'{a}ticamente y 
algunos de los tests) y un navegador de WWW, bien sea textual (Lynx) o 
gr\'{a}fico (Netscape Navigator o similares, para m\'{a}s navegadores ver el 
art\'{\i}culo "Navegadores de WWW para GNU/Linux", aparecido en Linux 
Actual n\'{u}mero 3). Los programas que realizan las tareas de prueba 
sobre los diversos sistemas se escribieron en C, perl o lenguaje de la 
shell, utilizando c\'{o}digo disponible en los grupos de noticias 
(comp.sources.misc.*), y de hecho es posible a\'F1adir nuevos programas a 
todo el conjunto de la herramienta. Otras herramientas posteriores, 
como SAINT, que se comentar\'{a}n m\'{a}s adelante, o NESSUS, que se comentar\'{a} 
en un art\'{\i}culo en el pr\'{o}ximo n\'{u}mero de la revista, hacen m\'{a}s f\'{a}cil el 
introducir nuevos programas mediante la descripci\'{o}n de reglas.
\par\pard\plain
\li500{}
\sb200\fi0
Cuando se arranca el programa, \'{e}ste obtiene la configuraci\'{o}n de los 
ficheros localizados en el directorio {\i config/}. Estos ficheros 
indican d\'{o}nde se encuentran herramientas habituales en entornos UNIX 
(como {\i finger} o {\i ping}) as\'{\i} como el navegador de WWW 
que se utilizar\'{a} (almacenado en la variable {\i $MOSAIC}). Estas 
herramientas ser\'{a}n utilizados por los diversos programas de los que 
est\'{a} compuesto SATAN, y se pueden configurar a mano o bien utilizando 
el {\i script} proporcionado por los autores (reconfig), que busca la 
localizaci\'{o}n de estas utilidades en el servidor en el que se instale SATAN.
\par\pard\plain
\li500{}
\sb200\fi0
Seguidamente, lanzar\'{a} un servidor de WWW y el navegador de WWW que se 
haya configurado para acceder directamente a la p\'{a}gina principal de 
SATAN. Desde \'{e}sta se seleccionar\'{a} 'Run SATAN', posteriormente 
el servidor al que va a acceder, se podr\'{a} limitar si 
se va a probar sobre el servidor o sobre su subred, el 
nivel del esc\'{a}ner y finalmente  'Start the 
scan'. El acceso al servidor de WWW creado por SATAN (y que se 
encuentra en un puerto dedicado, en el espacio de usuario, esto es, 
por encima del 1024), se realiza mediante una llave de un s\'{o}lo uso que 
SATAN genera para cada ejecuci\'{o}n. Dado que esta llave se guarda en los 
ficheros HTML generados por SATAN, es importante que estos ficheros 
tengan permisos de lectura s\'{o}lo para el superusuario y no para 
otros. Si no fuera as\'{\i}, cualquier usuario podr\'{\i}a acceder al servidor 
de WWW con la clave proporcionada en ellos y acceder a toda la 
informaci\'{o}n disponible sobre los esc\'{a}ners realizados por el 
superusuario mientras SATAN est\'{a} siendo ejecutado.
\par\pard\plain
\li500{}
\sb200\fi0
En la selecci\'{o}n de Objetivos el usuario puede seleccionar el nivel de 
ataque: Ligero, Normal o Duro. Un ataque "Ligero" s\'{o}lo indicar\'{a} los 
servidores que existen y qu\'{e} servicios de RPC (llamada remota a 
procedimiento) ofrecen. Un ataque "Normal" escanear\'{a} los objetivos 
probando conexiones telnnt, FTP, WWW, gopher y SMTP. Se utilizar\'{a} para 
establecer qu\'{e} sistema operativo es (aunque para esto es mejor QueSO, 
ver listado 3 ). Un ataque "Duro" buscar\'{a} otras 
vulnerabilidades, como servidores de FTP que permiten escribir a todos 
los usuarios o servidores de confianza.
\par\pard\plain
\li500{}
\sb200\fi0
SATAN puede ejecutarse con diversas opciones que indiquen qu\'{e} servidor/es 
probar y el nivel de ataque a utilizar, as\'{\i} como limitaciones en el 
n\'{u}mero de servidores a probar. Adem\'{a}s muestra de forma gr\'{a}fica los resultados 
ordenando las vulnerabilidades por tipos, organizadas de muy diversas 
maneras (por nivel de riesgo, por sistema operativo...), aunque los 
autores indican que un trabajo a realizar ser\'{\i}a mostrar de forma m\'{a}s 
gr\'{a}fica (quiz\'{a}s a trav\'{e}s de un grafo) las interrelaciones entre los 
servidores.  Existen adem\'{a}s tutoriales que dan informaci\'{o}n m\'{a}s en 
detalle de los problemas concretos de algunas de las vulnerabilidades, 
que son \'{u}tiles para que el administrador busque m\'{a}s informaci\'{o}n antes 
de tomar una decisi\'{o}n sobre c\'{o}mo arreglar el problema.
\par\pard\plain
\li500{}
\sb200\fi0
Toda la informaci\'{o}n recopilada sobre las distintas m\'{a}quinas se 
almacena en una base de datos (se puede tener m\'{a}s de una base de datos 
sobre m\'{a}quinas), que se mantiene entre ejecuciones del programa, y es 
\'{u}til para inferir relaciones entre m\'{a}quinas que las pueda hacer vulnerables.
\par\pard\plain
\li500{}
\sb200\fi0
Adem\'{a}s SATAN es configurable con reglas (en el directorio {\i facts/}) que 
le permiten inferir nueva informaci\'{o}n y detonar nuevos tests en 
funci\'{o}n de los servicios que se ofrezcan. Estas reglas est\'{a}n escritas 
en Perl y, a trav\'{e}s de ellas se puede extender el programa con nuevos 
tests. De hecho la decisi\'{o}n de qu\'{e} test realizar en funci\'{o}n de la 
informaci\'{o}n recibida se encuentra en estas reglas.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{6 Compilar SATAN para Linux}}
{}#{\footnote TOC_5}

${\footnote Compilar_SATAN_para_Linux}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Compilar SATAN para Linux}

SATAN no fue desarrollado originalmente para GNU/Linux, sino que su 
documentaci\'{o}n indica que funciona en una gran variedad de sistemas 
UNIX: SunOS 4.x y 5.x, AIX, IRIX5, HP-UX 9.x, SYSV-R4 y Ultrix 
4.x. Sus autores destacan que hace falta modificarlo para hacerlo 
funcionar bajo GNU/Linux.
\par\pard\plain
\li500{}
\sb200\fi0
De hecho es as\'{\i}, siendo necesario modificar los ficheros que se incluyen 
al compilar el c\'{o}digo fuente para hacerlo funcionar con la versi\'{o}n de 
la librer\'{\i}a de C de GNU/Linux. Aunque los cambios difieren para libc5 
y para libc6, b\'{a}sicamente debido a la redefinici\'{o}n de la 
implementaci\'{o}n de los formatos de paquete de IP e ICMP en la librer\'{\i}a 
est\'{a}ndar. Esto se puede arreglar modificando el fichero 
{\i lcompat.h} (que funciona para libc5) y comentando toda la 
definici\'{o}n del paquete ip e icmp, para dejar que sea la librer\'{\i}a de C 
(viene definido en el fichero {\i /usr/include/netinet/ip.h}) la 
que los defina. Asimismo se puede eliminar las referencias en el 
c\'{o}digo fuente a la librer\'{\i}a proporcionada en el paquete, si se dispone 
de las cabeceras de la librer\'{\i}a de C (en Debian las proporciona el 
paquete libc6-dev) para compilar el programa. En la versi\'{o}n que se 
distribuye en el CD las cabeceras de las librer\'{\i}as proporcionadas por 
los autores han sido modifcadas por las cabeceras de la libc6, a\'{u}n as\'{\i} 
tambi\'{e}n se entrega un fichero (satan-lib.diff.linux) con las 
diferencias entre ambas.
\par\pard\plain
\li500{}
\sb200\fi0
Finalmente, para adaptarse a los "nuevos tiempos" y usar los m\'{o}dulos 
de Perl instalados en el sistema en lugar de los proporcionados por el 
programa (como es el caso del m\'{o}dulo que proporciona en Perl la 
funci\'{o}n {\i getopts} o {\i ctime}), es necesario cambiar 
ligeramente el programa principal ({\i satan}) y algunos de los 
tests, que est\'{a}n escritos en Perl.
\par\pard\plain
\li500{}
\sb200\fi0
Tambi\'{e}n los autores asumen el comportamiento de la llamada al sistema 
{\i select} (que sirve para quedarse a la espera de recibir datos 
en diversos descriptores) y se ha de modificar el fichero 
{\i tcp_scan.c} que es el responsable de escanear todos los 
puertos TCP disponibles en un servidor.
\par\pard\plain
\li500{}
\sb200\fi0
Todos estos cambios se han realizado en la versi\'{o}n de SATAN 
distribuida en el CD, aunque para beneficio de los lectores se ha 
incluido un fichero que indica todas estas diferencias 
(satan-1.1.1.diff.linux). Haciendo uso de estos ficheros (realizados 
con el programa {\i diff}) se podr\'{\i}an modificar las fuentes 
originales (haciendo uso del programa {\i patch}, ver p\'{a}gina de manual).
\par\pard\plain
\li500{}
\sb200\fi0
En general, un usuario que instale SATAN dentro de una distribuci\'{o}n de 
GNU/Linux no tendr\'{a} que resolver estos problemas, dado que los 
responsables de la distribuci\'{o}n, presumiblemente, los habr\'{a}n resuelto 
para que se integre dentro de \'{e}sta. Sin embargo no est\'{a} de m\'{a}s 
conocerlo, caso de que se desee obtener SATAN de la fuente original y 
recompilarlo antes de usarlo, algo bastante aconsejable dado el hecho 
de que va a ser el usuario con los m\'{a}ximos privilegios el que va a 
hacer uso de \'{e}ste.
\par\pard\plain
\li500{}
\sb200\fi0
Para compilar SATAN para Linux, una vez realizados los cambios arriba 
indicados, es necesario, desde el directorio ra\'{\i}z, ejecutar {\i make 
linux} seguido de {\i perl reconfig}. Posteriormente se puede 
configurar los valores que ha obtenido autom\'{a}ticamente editando 
directamente, como ya se ha dicho antes, los ficheros en el 
subdirectorio {\i config/}.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{7 SAINT}}
{}#{\footnote TOC_6}

${\footnote SAINT}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote SAINT}

SAINT (Security Administrator's Integrated Network Tool) es un 
producto de World Wide Digital Solutions Inc. (WWDSI) derivado de 
SATAN, realizado en 1998, no se distribuye bajo la misma licencia sino 
bajo una realizada por la compa\'F1\'{\i}a. Esta nueva licencia no permite su 
distribuci\'{o}n por parte de aquellos que lo obtienen ni modificaciones 
fuera del uso interno de una compa\'F1\'{\i}a que haga uso de este.
\par\pard\plain
\li500{}
\sb200\fi0
Las diferencias con SATAN en cuanto a interfaz son m\'{\i}nimas, ambos 
hacen uso de un navegador de WWW, y los pasos a dar para poner en 
marcha el programa son los mismos.
\par\pard\plain
\li500{}
\sb200\fi0
SAINT a\'F1ade a SATAN lo que \'{e}ste ahora mismo no tiene y es actualidad. 
El programa no s\'{o}lo prueba las vulnerabilidades que contemplaba SATAN, 
sino que a\'F1ade comprobaciones de las vulnerabilidades conocidas hasta la 
fecha de su creaci\'{o}n. Los tests incluyen comprobaciones sobre 
servidores de WWW, POP o SMB (ver art\'{\i}culo sobre Samba en el n\'{u}mero 1 
de Linux Actual), y nuevas reglas para dirigir el funcionamiento de 
\'{e}ste. Adem\'{a}s, la compa\'F1\'{\i}a que lo dise\'F1\'{o} lo actualiza con cierta 
regularidad.
\par\pard\plain
\li500{}
\sb200\fi0
A todo esto hay que a\'F1adir muchos nuevos tutoriales, hasta un total de 
43, sobre las distintas vulnerabilidades que se puedan encontrar, que 
ayudan al administrador d\'{a}ndole m\'{a}s informaci\'{o}n sobre el peligro de 
\'{e}sta y sobre c\'{o}mo eliminarlo. Las vulnerabilidades est\'{a}n clasificadas 
en tres categor\'{\i}as: Peligrosas (rojo), Proceder con Cautela (amarillo) 
o de Categor\'{\i}a Desconocida (marrones), no en dos como en SATAN.
\par\pard\plain
\li500{}
\sb200\fi0
SAINT demuestra que es posible realizar un producto comercial sobre un 
producto que se distribuye de forma gratuita, y con excelentes resultados.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{8 Resumen}}
{}#{\footnote TOC_7}

${\footnote Resumen}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Resumen}

\par\pard\plain
\li500{}
\sb200\fi0
En este art\'{\i}culo se han visto algunas herramientas de seguridad \'{u}tiles 
para los sistemas GNU/Linux, si bien algunas de ellas primitivas. As\'{\i} 
como algunos de los problemas de utilizar estar herramientas bajo 
GNU/Linux, en el pr\'{o}ximo art\'{\i}culo se estudiar\'{a}n con m\'{a}s detenimiento 
algunas herramientas similares, nacidas para GNU/Linux, como es el 
caso de NESSUS (ver {}) y otras 
herramientas relacionadas con auditor\'{\i}as de seguridad disponibles en 
el mundo UNIX.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{9 Sumarios}}
{}#{\footnote TOC_8}

${\footnote Sumarios}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Sumarios}

\par\pard\plain
\li500{}
\sb200\fi0
Es posible que existan agujeros de seguridad debido a la mala 
administraci\'{o}n.
\par\pard\plain
\li500{}
\sb200\fi0
Las distribuciones basadas en GNU/Linux dan mucha informaci\'{o}n relativa 
a seguridad.
\par\pard\plain
\li500{}
\sb200\fi0
Los programas auditores de seguridad ayudan a detectar 
vulnerabilidades.
\par\pard\plain
\li500{}
\sb200\fi0
COPS y Tiger comprueban la integridad del sistema haciendo chequeos 
sobre \'{e}ste.
\par\pard\plain
\li500{}
\sb200\fi0
SATAN es un conjunto de programas para comprobar la seguridad de 
servidores remotos.
\par\pard\plain
\li500{}
\sb200\fi0
SATAN caus\'{o} una aut\'{e}ntica revoluci\'{o}n por poner a disposici\'{o}n de todos 
una herramienta poderosa.
\par\pard\plain
\li500{}
\sb200\fi0
Existen programas para detectar ataques de SATAN.
\par\pard\plain
\li500{}
\sb200\fi0
Es dif\'{\i}cil mantenerse al tanto de todos los problemas de seguridad de 
los programas.
\par\pard\plain
\li500{}
\sb200\fi0
SATAN debe ser ejecutado como superusuario.
\par\pard\plain
\li500{}
\sb200\fi0
Para ejecutar SATAN en Linux es necesario adaptarlo adecuadamente.
\par\pard\plain
\li500{}
\sb200\fi0
SAINT es un desarrollo comercial realizado sobre SATAN.
\par\pard\plain
\li500{}
\sb200\fi0
En un pr\'{o}ximo art\'{\i}culo se estudiar\'{a}n otros programas de seguridad.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{10 Listados}}
{}#{\footnote TOC_9}

${\footnote Listados}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Listados}

\par\pard\plain
\li500{}
\sb200\fi0
LISTADO 1-
\par\pard\plain
\li500{}
\sb200\fi0
Existen ciertas curiosidades relacionadas con SATAN, que se reflejan 
aqu\'{\i} para informaci\'{o}n de los lectores.
\par\pard\plain
\li500{}
\sb200\fi0
La imagen de SATAN, un personaje humanoide con una cara ca\'{o}tica y 
extra\'F1a, no ha sido fruto de la imaginaci\'{o}n de sus programadores. Se 
trata de una aportaci\'{o}n del dibujante Neil Gaiman, autor del comic 
Sandman, al proyecto. El boceto original, firmado por \'{e}ste, forma 
parte de la distribuci\'{o}n de SATAN.
\par\pard\plain
\li500{}
\sb200\fi0
************* INSERTAR IMAGEN DE SATAN ****************
\par\pard\plain
\li500{}
\sb200\fi0
El nombre SATAN tambi\'{e}n puede resultar ofensivo a algunas personas, 
los programadores, para evitar discrepancias aunque piensan que el 
nombre del programa se ajusta muy bien a su herramienta, facilitaron 
el que se pudiera cambiar el nombre de \'{e}ste. Existe un programa en la 
distribuci\'{o}n de SANTA {\i repent} (arrepentir) que, si se ejecuta, 
cambia todas las menciones del angel ca\'{\i}do a SANTA (Security Analysis 
Network Tool for Administrators).
\par\pard\plain
\li500{}
\sb200\fi0
Otra curiosidad algo m\'{a}s molesta es que debido al modelo de dise\'F1o de 
SATAN, las p\'{a}ginas de WWW vistas en el navegador son en realidad 
scripts en Perl que ejecuta \'{e}ste. Por ello la extensi\'{o}n de todas estas 
p\'{a}ginas es {\i .pl} esto puede causar problemas en navegadores que 
tengan configurado esta extensi\'{o}n como un tipo MIME determinado 
(application/x-perl). El navegador de Netscape, por ejemplo, por no 
saber qu\'{e} hacer con este tipo de documentos pedir\'{a} al usuario un lugar 
donde guardarlos. Desde luego \'{e}ste no es el comportamiento deseado, ya 
que uno quiere ver el resultado directamente sobre el navegador. Para 
conseguir esto, es necesario ir (en el Navigator) al men\'{u} de 
Preferencias/Aplicaciones, eliminar el tipo MIME asociado a la 
extensi\'{o}n {\i pl} y a\'F1adir dentro de los documentos del tipo 
{\i text/html} (que son interpretados por el navegador) la 
extensi\'{o}n {\i pl}. En el Communicator se ha de modificar esto en el 
men\'{u} Preferencias/Avanzadas/Aplicaciones.
\par\pard\plain
\li500{}
\sb200\fi0
Esto se debe a que cuando Dan Farmer y Wietse Venema dise\'F1aron SATAN, 
a\'{u}n no estaba extendido el uso de tipos MIME para todo y tampoco, desde 
luego, estaba asignado esta extensi\'{o}n al lenguaje Perl ya que por 
entonces andaba en sus or\'{\i}genes y no se hab\'{\i}a extendido tanto como 
hasta ahora.
\par\pard\plain
\li500{}
\sb200\fi0
PIE LISTADO 1: Curiosidades de SATAN 
{}#{\footnote satan_curiosidad}
{}K{\footnote satan_curiosidad}

\par\pard\plain
\li500{}
\sb200\fi0
LISTADO 2-
\par\pard\plain
\li500{}
\sb200\fi0
Es un riesgo indudable ejecutar binarios como superusuario, aunque es 
algo de lo m\'{a}s com\'{u}n para muchos usuarios, que encuentran que un 
determinado programa no se ejecuta como usuario normal y s\'{\i}  lo 
ejecutan como superusuario. Es el caso, por ejemplo, de muchos juegos 
que hacen uso de la librer\'{\i}a {\i svgalib}, ya que para el manejo a 
bajo nivel del hardware (indispensable en muchos juegos) hace falta 
ejecutar el juego como root (o poner \'{e}ste {\i setuid}).
\par\pard\plain
\li500{}
\sb200\fi0
En el caso de SATAN se conoce una distribuci\'{o}n de binarios de la 
versi\'{o}n de este para Linux que era en realidad un troyano. Realizaba 
todas las funciones de SATAN perfectamente pero el que la distribuy\'{o} 
a\'F1adi\'{o} c\'{o}digo que pon\'{\i}a en compromiso el sistema en el que fuera 
ejecutado. Curiosamente, aquella persona (que dicho sea de paso perdi\'{o} 
su trabajo por su "haza\'F1a") tambi\'{e}n distribuy\'{o} el c\'{o}digo fuente, que 
se puede poner como ejemplo de un troyano.
\par\pard\plain
\li500{}
\sb200\fi0
Los cambios al c\'{o}digo ten\'{\i}an lugar en el programa {\i fping}, al que 
a\'F1ad\'{\i}a una nueva funci\'{o}n llamada {\i backdoor()} que era ejecutada por 
{\i main()} despu\'{e}s de comprobar que hab\'{\i}a sido ejecutada por el 
superusuario. Esta funci\'{o}n ten\'{\i}a como tarea a\'F1adir un nuevo usuario a 
la base de datos de usuarios (el fichero {\i /etc/passwd}), llamado 
suser despu\'{e}s de comprobar que no exist\'{\i}a. Posteriormente hace 
setuid el binario {\i fping}, y abre una conexi\'{o}n remota a un servidor 
cuyos ficheros de registro eran accesibles por todo el mundo. Se 
conecta a un puerto abierto por el demonio {\i inetd}, que no est\'{a} 
conectado a ninguna aplicaci\'{o}n, pero que sin embargo se registra como 
acceso. Esto posiblemente lo hac\'{\i}a para poder ver quienes ejecutaban 
esta versi\'{o}n "modificada" de SATAN, y poder acceder a ellos como 
usuario 'suser' y con la password conocida. 
\par\pard\plain
\li500{}
\sb200\fi0
La segunda parte del troyano, dentro del c\'{o}digo de {\i fping} en la 
funci\'{o}n main, hac\'{\i}a que, si \'{e}ste era ejecutado por el usuario 'suser' 
y fijaba una determinada variable de entorno, el programa 
inmediatamente arrancaba una shell. Dado que el programa ahora ten\'{\i}a 
setuid del superusuario (si era el propietario del fichero) lo que 
se obten\'{\i}a al ejectuar {\i fping} con esta modificaci\'{o}n que era una shell 
de root.
\par\pard\plain
\li500{}
\sb200\fi0
El c\'{o}digo de este troyano, comentado por ldoolit@cebaf.gov, est\'{a} 
disponible en el CD de la revista, junto a la distribuci\'{o}n de SATAN.
\par\pard\plain
\li500{}
\sb200\fi0
PIE LISTADO 2: El problema de la ejecuci\'{o}n de binarios como root
\par\pard\plain
\li500{}
\sb200\fi0
LISTADO 3-
\par\pard\plain
\li500{}
\sb200\fi0
Los programas auditores de seguridad vistos utilizan m\'{e}todos 
rudimentarios para "adivinar" el sistema operativo que utiliza la 
m\'{a}quina sobre la que se est\'{a}n haciendo los tests. NESSUS (como se ver\'{a} 
en el pr\'{o}ximo art\'{\i}culo), por ejemplo, lo hace en base a dos 
conexiones: una conexi\'{o}n al puerto de FTP (21) y otra al puerto de 
telnet (23- login remoto). Con la primera identifica si es un sistema 
Windows o un UNIX, bas\'{a}ndose en la cadena de bienvenida recibida; si 
contiene a la palabra "Microsoft" se trata de un NT y si contiene la 
palabra "wu-" decide que es un UNIX (el servidor {\i wu-ftp}, es el 
m\'{a}s utilizado en el mundo UNIX). Mirando en el puerto de telnet busca 
determinadas cadenas de caracteres para adivinar si es un Linux, IRIX, 
FreeBSD, etc.. Esto est\'{a} implementado como un "plugin" llamado 
{\i guess_os}.
\par\pard\plain
\li500{}
\sb200\fi0
SATAN implementa algo parecido en su lista de reglas 
{\i rules/hosttype}, en la que simplemente busca expresiones 
regulares en las respuestas de los programas que utiliza para 
monitorizar el servidor remoto y en funci\'{o}n de \'{e}stas decide si es un 
SGI, SUN, APOLLO, VMS, Linux..
\par\pard\plain
\li500{}
\sb200\fi0
Ambos m\'{e}todos pueden ser enga\'F1ados por un administrador que cambie las 
cabeceras de sus servicios para indentificarse de forma distinta, y 
adem\'{a}s fallar\'{a}n si no existe ning\'{u}n servicio que proporcione esta 
informaci\'{o}n textual.
\par\pard\plain
\li500{}
\sb200\fi0
Un m\'{e}todo t\'{e}cnicamente m\'{a}s avanzado, y con m\'{a}s estilo, es el 
implementado por QueSO de Jordi Murgo. Se trata de una idea apuntada por otros 
programas como por ejemplo {\i tft} de Lamont Granquist (enviado a 
rootshell el 7 de julio de 1998), que realiza pruebas sobre la 
respuesta de una m\'{a}quina a las 64 "banderas" del protocolo TCP. 
\par\pard\plain
\li500{}
\sb200\fi0
QueSO (tambi\'{e}n llamado WathOS) identifica el sistema operativo en 
funci\'{o}n de la implementaci\'{o}n TCP/IP; en particular en funci\'{o}n de la 
respuesta a paquetes "extra\'F1os" cuyo comportamiento no est\'{a} definido 
en ning\'{u}n RFC y por tanto cuya respuesta depende de la programaci\'{o}n de 
la pila de protocolos en el sistema operativo concreto. En total 
env\'{\i}a siete paquetes, y compara la respuesta con una base de datos de 
respuestas t\'{\i}picas por sistemas operativos entregada con el programa.
\par\pard\plain
\li500{}
\sb200\fi0
El programa est\'{a} disponible en c\'{o}digo fuente, bajo la licencia GNU en 
{}, ha sido 
programado por un espa\'F1ol y es capaz de reconocer entre m\'{a}s de ochenta 
implementaciones distintas en diversos sistemas operativos.
\par\pard\plain
\li500{}
\sb200\fi0
PIE LISTADO 3: QueSO, un programa que indica el SO 
{}#{\footnote queso}
{}K{\footnote queso}

\par\pard\plain
\li500{}
\sb200\fi0
LISTADO 4
\par\pard\plain
\li500{}
\sb200\fi0
En el CD se han incluido todas las herramientas comentadas en el 
art\'{\i}culo y las que se ver\'{a}n el siguiente, al menos aquellas cuya 
licencia permite su distribuci\'{o}n en dicho CD. Est\'{a}n en el 
subdirectorio {\i la6/security}. Asimismo, y por considerarlo de 
inter\'{e}s para los lectores, se han incluido tambi\'{e}n otras herramientas 
de seguridad de sistemas UNIX en general y GNU/Linux en particular, 
haciendo una r\'{e}plica de los servidores de sunsite (ahora 
metalab.unc.edu) y de CIAC.
\par\pard\plain
\li500{}
\sb200\fi0
Con intenci\'{o}n de hacer m\'{a}s accesible la instalaci\'{o}n de estos paquetes, 
el autor ha creado, un paquete para Debian GNU/Linux que 
permite instalar la \'{u}ltima version de SATAN (1.1.1). Este paquete, 
ofrecido en primicia para los lectores de Linux Actual, formar\'{a}, si 
es posible, parte de la distribuci\'{o}n de Debian en un futuro. Est\'{a} 
localizado en el directorio {\i debian/}.
\par\pard\plain
\li500{}
\sb200\fi0
PIE LISTADO 4: Contenido del CD
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{11 Capturas}}
{}#{\footnote TOC_10}

${\footnote Capturas}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Capturas}

\par\pard\plain
\li500{}
\sb200\fi0
Capturas incluidas con el articulo y sus pies de p\'{a}ginas:
\par\pard\plain
\li500{}
\sb200\fi0
- satan-cara.gif: CARA del personaje del programa SATAN (insertar en el listado 1) 
- satan-main.gif: "Paso 1: P\'{a}gina inicial de SATAN."
\par\pard\plain
\li500{}
\sb200\fi0
- saint-main.gif: P\'{a}gina inicial de SAINT.
\par\pard\plain
\li500{}
\sb200\fi0
- satan-select.gif: "Paso 2: Selecci\'{o}n de servidor sobre el que realizar los 
tests."
\par\pard\plain
\li500{}
\sb200\fi0
- satan-data.gif: "Paso 3: Recolecci\'{o}n de datos realizada por SATAN"
\par\pard\plain
\li500{}
\sb200\fi0
- satan-result.gif: "Paso 4: Resultados de SATAN para un servidor."
\par\pard\plain
\li500{}
\sb200\fi0
- satan-result2.gif: "Paso 5: Resultados de SATAN ordenados por tipo de servicios."
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{12 Notas de maquetaci\'{o}n}}
{}#{\footnote TOC_11}

${\footnote Notas_de_maquetaci___o_n}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Notas de maquetaci\'{o}n}

\par\pard\plain
\li500{}
\sb200\fi0
Las capturas de SATAN conviene que est\'{e}n alineadas en la misma 
posici\'{o}n de la p\'{a}ginas, porque son consecutivas es decir, primero va 
satan-main, luego satan-select, despu\'{e}s satan-data y luego 
satan-result y satan-result2.
\par\pard\plain
\li500{}
\sb200\fi0
La captura de la "cara" de SATAN debe ir dentro del listado en el que 
se indica.
\par\pard\plain
\li500{}
\sb200\fi0
AVISO!: Si las capturas se reducen mucho es posible que no se pueda leer (no 
lo se), si es as\'{\i} contactar con el autor y pedir capturas nuevas 
relacionadas con el art\'{\i}culo. Sustituir\'{e} las capturas del 
funcionamiento del Programa por otras.
\par\pard\plain
\li500{}
\sb200\fi0

\page{\pard\plain\keepn\f0\fs36\b\tx576{13 Notas de coordinaci\'{o}n}}
{}#{\footnote TOC_12}

${\footnote Notas_de_coordinaci___o_n}
+{\footnote browse}
\par\pard\plain\li500\sb200\fi0
{}K{\footnote Notas de coordinaci\'{o}n}

\par\pard\plain
\li500{}
\sb200\fi0
Este art\'{\i}culo ir\'{a} seguido de otro contando nuevas cosas al respecto, 
ya que el art\'{\i}culo original era demasiado largo (11 p\'{a}ginas). As\'{\i} que 
el siguiente que ser\'{a} entregado m\'{a}s tarde tendr\'{a} las cosas a las que 
se alude en \'{e}ste (NESSUS y m\'{a}s cosas), aun as\'{\i} los contenidos en el CD 
son del total de los dos art\'{\i}culos (salvo una sorpresa que me reservo 
para el siguiente)
\par\pard\plain
\li500{}
\sb200\fi0
En resumen, para LA7 reservar 5 p\'{a}ginas para la continuaci\'{o}n.
\par\pard\plain
\li500{}
\sb200\fi0
No hay problema en eliminar listados si la maquetaci\'{o}n lo precisa (se 
incluir\'{\i}an en el siguiente), pero se DEBEN mirar las referencias que 
haya a \'{e}stos en el art\'{\i}culo. En cualquier caso NUNCA quitar el listado 
4, y si es posible, el 1. El orden de preferencia para la inclusi\'{o}n de 
listados es: 4, 1, 2, y 3.
\par\pard\plain
\li500{}
\sb200\fi0
}