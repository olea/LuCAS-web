<!doctype linuxdoc system>

<article>

<title>Artículo para la revista Linux Actual número 7: Auditores de Seguridad en GNU/Linux (y II).
<author>Javier Fernández-Sanguino Peña <url url="jfs@computer.org">
<date>15 dic 1998

<abstract> Seguiremos viendo herramientas disponibles para
comprobar la seguridad de un sistema GNU/Linux, en este caso más
específicas a GNU/Linux, y los problemas de portar herramientas de
otros entornos a GNU/Linux.

<sect>NESSUS
<p>
Se vieron en el artículo anterior herramientas, quizás ya algo
antiguas, para intentar introducir el concepto de auditores de
seguridad. Ahora toca el turno de hablar de una herramienta de última
generación para GNU/Linux, y este es el caso de NESSUS.

NESSUS da un paso más alla en el diseño de herramientas de este
estilo. Con SATAN (y SAINT) se vió que se podía introducir
una gran capacidad para detectar fallos comunes haciendo uso de un
sencillo interfaz. Sin embargo, quizás el lector no se haya dado
cuenta, pero el uso de un interfaz WWW, aunque bueno por su facilidad de
manejo (y porque quizás sea el interfaz genérico más usado) plantea un
problema respecto a la autentificación de los administradores que
hagan uso de SATAN en una máquina.

Por un lado obliga a que SATAN sea ejecutado localmente por parte del
administrador y a que luego éste lanze el navegador en la misma
máquina, de hecho es el primer paso que realiza SATAN. El problema
puede darse cuando se quiera instalar SATAN en una máquina que carece
de interfaz gráfico, es necesario exportar la aplicación (el cliente
de WWW) a través de la red a otra que sí lo tenga. Esto no es problema
si el administrador usa <em>lynx</em> ya que puede seguir utilizando
un interfaz textual para la aplicación.

Si se desea también acceder desde un servidor a otro para ejecutar
SATAN en aquél, es necesario que el navegador de WWW envíe en todas
las peticiones al servidor de WWW que SATAN lanza, el número mágico
que ha generado al arrancar y se encuentra almacenado en los ficheros
HTML. Por ello la primera petición del navegador es a un fichero (su
URL es file://) y posteriormente al servidor (con el URL
http://). Este número es la única prueba para SATAN de que el cliente
es quien dice ser, si cualquier otro intercepta este número y accede
al servidor de SATAN podrá acceder a toda la información almacenada en
este, e incluso ¡hacer sus propias pruebas de seguridad sobre otros
servidores! Esto se podría evitar haciendo uso del protocolo que se
usa en <em>https</em> (que usa el SSL de Netscape).

Esta situación no es del todo insospechada, ya que si el cliente y el
servidor están separados, los paquetes enviados de uno a otro, las
solicitudes HTTP y las respuestas mediante páginas en HTML, no están
cifradas. Cualquier "espía" en el camino de estos datos podría sacar
fácilmente el número utilizado.

NESSUS es una herramienta que consta de dos módulos separados. De un
lado el servidor, que debe ser ejecutado como superusuario, que es el
encargado de realizar los tests y que funciona como un demonio en la
máquina en la que se lanza, y en el otro  el cliente, que puede
estar en otra máquina distinta. La comunicación entre ambos se hace a
través de un protocolo (que los autores han llamado NTP: Nessus
Transfer Protocol) que, con poco esfuerzo pues no está así aún, podría
estar encriptado de forma que el servidor no podría ser usado por
alguien que "espiara" la red y fuera capaz de obtener la palabra clave
utilizada. Esta funcionalidad se prevé para la próxima versión que
estará disponible a principios de Enero.

Actualmente, sin embargo, la autenticación entre el
cliente y el servidor se realiza mediante un nombre de usuario y una
palabra clave cuyo intercambio debe darse antes de solicitarle ninguna
acción al servidor. Las palabras clave están almacenadas en un fichero
en el servidor, y es posible limitar sobre qué máquinas puede realizar
pruebas de seguridad a un usuario dado.

Existen clientes para GNU/Linux, usando la librería gráfica <em/gtk/,
con la que se ha diseñado el famosos <em/Gimp/, pero también los hay
escritos en Java y para Windows NT. El servidor, sin embargo, ha de
ejecutarse en un servidor Linux. La interfaz gráfica con <em/gtk/ es
expléndida, con un buen aspecto y muy sencilla de manejar. Además de
todo esto, NESSUS está siendo desarrollado bajo la licencia GPL.


El diseño de NESSUS, como se puede ver en el código fuente, es muy
modular. Todos los tests (algunos los llamarían "ataques") están
escritos por separado, y es fácil insertar nuevos
programas. Actualmente tiene más de 120 pruebas de seguridad de diversa
índole, que el interfaz agrupa por tipos según sean, por ejemplo:
agujeros de sendmail, problemas con servidores de FTP, problemas con
servidores de WWW... Aunque las vulnerabilidades no están tan
detalladas como en otras herramientas (veáse las anteriores), si se da
una breve descripción del problema y una ayuda de cómo solucionarlas.

<!-- hablar más de NESSUS y de sus tests/configuración -->

Al igual que SATAN o SAINT, NESSUS puede expandir los servidores que
conoce de varias maneras: vía subredes de un dominio, haciendo uso del
DNS o cuando ve nuevos servidores a los que se les da acceso mediante
NFS. Se pueden definir reglas para limitar a los servidores que va a
acceder, de una forma más compleja que hacía SATAN (y por ende SAINT),
en éste es posible definir la "profundidad" de la prueba y servidores
que nunca serán probados, pero en NESSUS es posible limitar de tres
formas: no probar ('n'), sí probar ('y') y no probar <em/nunca/
('N'). Por ejemplo la regla: "n:*; y:*.foo.org; N:ppp*.foo.org"
probaría sólo sobre las máquinas en el dominio foo.org (y:*.foo.org),
excepto todas las máquinas en este dominio cuyo nombre empezara por
ppp (N:ppp*.foo.org), otras máquinas que se puedan encontrar no serán
probadas (n:*).

Los usuarios puede definir sus propias reglas, aunque existen unas
reglas predefinidas por defecto. Las reglas se almacenan en el fichero
<em>/usr/local/share</em> (aunque si se instala un paquete de una
distribución en lugar de las fuentes originales, seguramente lo instale
en <em>/usr/share</em>).


<sect>Instalar NESSUS
<p>
Si la distribución que usa el lector provee el paquete NESSUS, la
instalación de éste se limitará a instalar dicho paquete y
configurarlo apropiadamente. Sin embargo, si éste no es el caso, será
necesario obtener las fuentes originales (ver listado 1 <!--<ref
id="programas">-->).

Una vez obtenidas, se deben seguir los siguientes pasos para instalar
el programa:

<itemize>
<item>ejecutar <em/configure/, que hará uso de la herramienta GNU
<em/autoconf/ para configurar el programa a nuestro sistema. En la
documentación indica que debe ser el superusuario el que ejecute este
programa, ya que para probar el tipo de ordenación de los sockets, es
necesario privilegios especiales.
<item>ejecutar <em/make/ para que compile los programas. Este es un
proceso largo ya que ha de compilar cada uno de los tests de seguridad
que luego se convertirán en librerías que cargará dinámicamente. Para
compilar el programa es necesario tener la versión de desarrollo de
<em/gtk/, que incluye las cabeceras (ficheros .h) para compilar
programas que utilizen esta librería.
<item>ejecutar <em/make install/. Los programas (<em/nessus/ y
<em/nessusd/) así como las librerías y las páginas de manual serán
instaladas en el sistema.
</itemize>

Una vez hecho esto la configuración, según indica la página de manual,
será creada al arrancar el programa <em/nessusd/ en el directorio
<em>/usr/local/share/nessus</em>. La forma de configurar el programa
está perfectamente documentada en el Manual que acompaña el programa.

NESSUS no es el único programa de este estilo diseñado para GNU/Linux,
también existe <em/Gate Security/, de Stan Lanford, con un interfaz
del tipo curses (en consola). El autor indica que es muy modular y que
sería fácil de ampliar con nuevos tests, ya que actualmente cuenta con
tan sólo tres sobre los servicios de: finger, NFS y WWW. Está aún en
fase de desarrollo (la última versión de mayo de 1998 es la 0.1.4),
así que quizás en su versión final sea un programa a valorar.

<sect>Detectar escáneres remotos
<p>
Dado que las herramientas de seguridad mediante tests remotos (SAINT,
SATAN...) pueden convertirse en un arma en manos de una persona que
pretenda utilizarla para fines ilícitos, es necesario disponer de
programas que sean capaces de avisar al administrador cuando se
detecte accesso a la máquina realizados por estos programas con la
intención de obtener información o de probar vulnerabilidades.

Este es el caso de <em/Courtney/ y <em/Gabriel/, se verá algo más de
éste último más adelante. El primero de ellos es un programa
desarrollado en la Universidad de California por Marvin
J. Christensen. Está diseñado para detectar este tipo de
paquetes. Aunque se distribuya indicando que dectará ataques de SATAN
en realidad será capaz de detectar un tipo de ataques concreto,
denominado <em/port scanning/, consistente en probar todos (o un gran
número) de los puertos de una máquina (cada puerto está ligado a un
servicio, ver <em/inetd.conf(5)/). Los programas pueden así encontrar
servicios vulnerables o no usados para hacerse una idea más precisa de
los servicios ofrecidos por una máquina.

Se va a estudiar <em/Courtney/ para observar el funcionamiento de
estos detectores. Este programa está escrito en Perl, con lo que es
más fácil de interpretar. El flujo de control del programa es como
sigue: una vez leídas e interpretadas las opciones, ejecuta el
programa <em/tcpdump/ junto con una reglas de filtro de paquetes. El
programa <em/tcpdump/ devolverá todos los paquetes que se lean en una
interfaz de red dada que cumplan alguna de las reglas, estas reglas
especifican que, por ejemplo, se deben mostrar los paquetes dirigidos
a diversos puertos. <em/Courtney/ leerá de éste todas las conexiones
de interés cuando se produzca alguna, y se apuntará su origen,
posteriormente comprobará si ese mismos origen ha hecho acciones
similares y, si es así, avisa al sistema mediante la llamada a
<em/logger/ y envía un mensaje de correo al administrador.

Así pues, si un ordenador accediera uno detrás de otro a todos los
puertos de una máquina que tuviera <em/Courtney/, éste empezaría a
"hacer saltar las alarmas" del sistema. Posteriormente el
administrador podría tomar la decisión de cerrar el acceso a la
máquina atacante o no, en función de la política de seguridad de éste.

Se puede ajustar el "nivel de alarma" del programa, que indica bajo
qué condiciones se disparará esta. Hay que fijar adecuadamente este
nivel ya que si es muy bajo se disparará ante eventos que son
perfectamente normales (un usuario de una máquina hace una conexión
vía slogin y posteriormente una conexión de FTP), y si es muy alta no
se disparará con los denominados "ataques ligeros", que esperan un
determinado tiempo antes de realizar la siguiente conexión.

Otro programa de las mismas características es <em/Gabriel/, diseñado
originalmente para Solaris 1 y 2. Éste hace algo similar pero
utilizando los filtros de paquetes de estas plataformas
(<em/etherfind/ y <em/snoop/ respectivamente), pero además incorpora
en su configuración otras formas de avisar al administrador (ver más
abajo)

<sect>Adaptar Gabriel a GNU/Linux
<p>

<em/Gabriel/ es un programa de Los Altos Technologies, Inc., como ya
se ha indicado detecta escáneres en la red
como SATAN. Pero tiene el aliciente de que es distribuido, los
clientes (implementados en <em/gabriel_client.c/) avisan de un execeso
de accesos a la red y el servidor (implementado en
<em/gabriel_server.c/) integra la información de estos y avisa de
diversas formas al administador: mediante correo electrónico, vía el
demonio <em/talk/, en la pantalla e incluso a través del teléfono o el
beeper si existen las pasarlelas adecuadas (y un módem).

La idea que da lugar a que exista un cliente y un servidor parte del
hecho de que SATAN es capaz de realizar tests sobre más de un host de
una misma red, e incluso descubrirlos a medida que realiza los
tests. Así, puede ser más fácil localizar el segmento de red en que se
encuentra el ordenador que está ejecutando SATAN si se recibe la
información de todos los ordenadores en varios segmentos.

El cliente esta escrito enteramente en C y muy ligado a su plataforma
original, ya que utiliza filtros de paquetes ya existentes, para poder
comprobar todos los paquetes iniciales de conexión (ICMP, UDP y
TCP). En principio sólo tiene soporte Solaris 1.x o 2.x, y aún no ha
sido portado a Linux. Sin embargo este programa sirve como muestra
botón de la manera en que se portan este tipo de programas al sistema
GNU/Linux. Una de las ventajas fundamentales es que la librería de C
de los sistemas UNIX es bastante compatible entre diversas
plataformas, con lo que el código original no es necesario casi
tocarlo si hace uso de ésta. Otra ventaja es que no hace falta
modificar casi el servidor, ya que éste es un shell script que hace
uso de programas comúnes en la comunidad UNIX (como awk)

Por tanto las modificaciones para poder portar este programa a Linux
serían modificar el cliente para soportar la plataforma Linux haciendo
uso de tcpdump, modificar los scripts de shell caso de que hubiera
diferencias entre éstas, y modificar el fichero <em/Makefile/ para
poder compilar la versión de Linux.

En el CD se ofrecen tanto una versión modificada por el escritor como
la versión original, para hacer posible la  comparación entre ambas.

<!-- hacer lo de tcpdump??-->


<sect>CRACK, comprobar la seguridad de las passwords adivinándolas
<p>
Finalmente, se va a ver una de las herramientas más usadas en
auditorías de seguridad, y no es para menos, ya que una de las formas
habituales de tener acceso a una máquina UNIX es directamente
accediendo a cuentas (vía telnet, rlogin o slogin) con passwords que
se han descubierto fácilmente (o inexistentes). Es por tanto
importante probar los mismos métodos que probaría un cracker para
asegurar que una máquina es segura a estos intentos. Aunque esto no
impide que los usuarios puedan dejarse las password escrita, olvidada
por algún lado, si servirá para asegurar que las passwords del
sistemas no son fácilmente vulnerables.

Aunque atrás quedan los tiempos en que los sistemas UNIX no
registraban los accesos no autorizados y los sistemas VMS eran
considerados más seguros por hacerlo, uno de los métodos empleados por
posibles "intrusos" es obtener el fichero de passwords del sistema a
través de cualquier agujero de seguridad de la máquina, por ejemplo,
un PHP/FI en el servidor de WWW mal configurado. El conjunto de
herramientas <em/shadow/ ha hecho esto más difícil a posibles intrusos
dado que por un lado se almacena la información del usuario en el
fichero <em>/etc/passwd</em> y por otro las passwords de los usuarios
en el fichero <em>/etc/shadow</em>. El primero puede ser leído por
cualquier usuario del sistema, el segundo sólo por root.

Este fichero contiene las passwords de los usuarios encriptadas, es
decir, no están en claro, pero la función que utilizan los sistemas
UNIX (un triple DES), que, aunque es difícil de romper por fuerza bruta, sí
es posible "atacarla" mediante el uso ingenioso de un diccionario y
de reglas. El ataque consiste en encriptar una palabra dada con la
función (que es pública) y compararla con el valor encriptado de la
password (que es el que contiene el fichero), el algoritmo de
encriptación asegura que si ambos son iguales entonces la palabra
usada es la password que se quiere adivinar.

El programa <em/Crack/ realizará esta función. Dado un fichero de
claves, intentará "adivinar" las claves de todos los usuarios que en
ella encuentre usando un diccionario de palabras comunes y un conjunto
de reglas que indican cambios frecuentes que se realizan sobre
ellas. Serían reglas, por ejemplo, el poner la primera y la última
letra en mayúsculas, o el cambiar todas las vocales por su número
correspondiente (la 'a' por '1', la 'e' por '2'...). Con estas reglas
<em/Crack/ realiza manipulaciones con las palabras: las invierte,
mezcla, cambia la capitalización, transpone letras.. según una serie
de reglas. El programa viene con unas 240 reglas de manipulación
aunque se pueden construir otras nuevas. Además, es posible conseguir
abundantes diccionarios por FTP, y no sólo de palabras comunes, sino
de hobbies, películas, argot...

Así mismo es capaz de realizar ataques de fuerza bruta, aunque se
estima que para poder adivinar una password de ocho caracteres (el
máximo) con la actual potencia de un ordenador se tardarían varias
decenas de años (debido al gran número de posibilidades, más de cien
billones, teniendo en cuenta todos los caracteres ASCII imprimibles),
si se limita el ataque a un menor número de caracteres (por ejemplo
4), y de menor rango (por ejemplo sólo números) el número desciende
considerablemente (diez mil en el caso propuesto).

Este tipo de ataque puede dar resultados sorprendentes, en poco
tiempo, ya que si no se ha obligado a los usuarios a hacer uso de
passwords difíciles será capaz de adivinar un buen número de ellas. El
programa incopora una función para poder avisar a un usuario de que su
password es excesivamente fácil, para lograr que la cambie, al tiempo
que almacena sus resultados en una base de datos para consulta
posterior del administrador.

Este auditoría sobre la seguridad de las passwords se puede evitar (o
se pueden evitar "sorpresas") de varias formas:

<itemize>
<item>adiestrando a los usuarios en la búsqueda de palabras claves
fáciles de recordar pero díficiles de adivinar por estos métodos.
<item>entregando al usuario al principio una password del estilo
arriba mencionado.
<item>sustituyendo el programa de cambio de passwords por uno que
impida el uso de passwords inseguras, como por ejemplo, de menos de
tres cifras, o sólo con letras o sólo con números. Muchas de las
distribuciones de GNU/Linux existentes traen un programa de estas
características.
<item>habilitar un mecanismo de "envejicimiento" de passwords, de
forma que el usuario se vea obligado a cambiar su password cada cierto
tiempo.
</itemize>


<sect>Otros auditores para de GNU/Linux
<p>
Aunque parezca complicado portar este tipo de programas a GNU/Linux,
la experiencia demuestra lo contrario. Por ejemplo, Robert L. Ziegler,
como ya se ha comentado, modificó <em/Tiger/ para que pudiera ser usado en
RedHat 5.2 el 14 de septiembre de 1998.

Y también es posible diseñar auditores de forma que sean portables
entre plataformas, como es el caso del  denominado <em/gomagog/ de
C. Parisel, que ha sido probado sobre AIX 4.2, HP-UX 10 y Linux 2.0

Este paquete de seguridad se divide en tres módulos: un cliente
<em/gog/, un servidor <em/magog/, y un interfaz para el servidor vía
HTML llamado <em/gogview/.

El cliente <em/gog/, es un script en shell que recoge información
sobre los directorios indicados en la configuración, que, por ejemplo,
pueden ser el directorio <em>/etc</em> y los directorios donde se
almacen los binarios del sistema. Sobre estos extrae la información de
permisos y pertenencia, al tiempo que extrae una firma del documento a
través de la función <em/md5/. Toda esta información es almacenada en
un directorio determinado. Se supone que esta información se recrea
cada cierto tiempo, la documentación sugiere que mediante una entrada
en el <em/cron/.

El servidor <em/magog/ accede vía FTP a los clientes identificándose
con un nombre de usuario y password y recupera los ficheros que éstos
han dejado con la información sobre cada uno de sus
sistemas. Comprueba esta información con los históricos que ha
almacenado y avisa de algún cambio.

De esta forma es posible saber si se ha modificado un binario (quizás
indique que un intruso ha instalado un troyano), o si se han
modificado los permisos (quizás alguien le ha puesto el bit de
<em/setuid/ a alguno de los ficheros).

La idea general es que los clientes ejecuten rutinariamente <em/gog/ y
que cada cierto tiempo se ejecute <em/magog/ para comprobar los
cambios. Además, la filosofía de descentralización permite que todos
los clientes sean gestioados desde una sóla máquina.

El interfaz añadido en la segunda versión del paquete (que fue
distribuida el 21 de diciembre de 1998) llamado <em/gogview/, permite
configurar el programa servidor añadiendo y eliminando clientes a los
que debe acceder, y ver la integridad de cada uno de los clientes, que
puede estar en uno de cuatro estados: en buen estado, con una
alteración en el perfil, con varias alteraciones en el perfil o
inalcanzable. Los programas que lo forman deben ser instalados en el
directorio <em>/cgi-bin/</em> de un servidor de WWW ya funcional. Los
programas de configuración del programa que acompañan la distribución
realizan automáticamente esta tarea.

<sect>Resumen de la serie de artículos
<p>
Se han visto múltiples herramientas de seguridad, haciendo un largo
recorrido desde las primeras herramientas disponibles para los
sistemas UNIX en general, hasta herramientas ya específicas de
GNU/Linux, como es el caso de NESSUS con su interfaz gtk.

Se recomienda en cualquier caso encarecidamente al lector que acuda a
las fuentes de información indicadas (ver listado 4 <!-- <ref -->
-- id="mas-info">--> y que "meta la
cabeza" (ver listaod 1 <!-- <ref id="programas"> -->en las fuentes de los programas ofrecidos, ya que éstos son la
mejor muestra de cómo funcionan este tipo de programas.


<sect>Contenido del CD
<p>
En el CD se han vuelto a incluir todas las herramientas comentadas en el
artículo, al menos aquellas cuya licencia permite su distribución en
dicho CD. Asimismo, y por considerarlo de interés para los lectores, se
han incluido otras herramientas de seguridad de sistemas UNIX en
general y GNU/Linux en particular, haciendo una réplica de los servidores
de sunsite (ahora metalab.unc.edu) y de CIAC.
<!-- actualizar el mirror -->
<!-- añadir CERT?? -->

Como ya se comentó en el anterior artículo, con intención de hacer más
accesible la instalación de estos paquetes, el autor ha creado esta
vez, el paquete para Debian GNU/Linux que permite instalar la última
version de NESSUS (981016). Este paquete,
<!-- vigilar próxima versión de Nessus -->
ofrecido en primicia para los lectores de Linux Actual, formará, si
es posible, parte de la distribución de Debian en un futuro.

<sect>Sumarios
<!-- hacer-->


<sect>Listados



LISTADO 1-

He aquí el listado de los programas que se comentan en este artículo y
dónde está la fuente original:

<itemize>
<item> COPS, disponible en <url url="ftp://info.cert.org/pub/tools/cops/">.


<item>TIGER, disponible en <url
url="ftp://net.tamu.edu/pub/security/TAMU/">

<item>ISS, disponible en <url
url="ftp://info.cert.org/pub/tools/iss/">, más información en <url
url="ftp://info.cert.org/pub/cert_advisories/CA-93:14.Internet.Security.Scanner">

<item>Tripwire, disponible en <url
url="ftp://info.cert.org/pub/tools/tripwire/">

<item>SATAN, la 
página original (de Wietse Venema) está situada en Los Paises Bajos y
se puede acceder en
<url url="http://wzv.win.tue.nl/satan/">, Dan Farmer mantiene otra
página en Estados Unidos en <url
url="http://www.fish.com/satan/">. El programa puede obtenerse en
<url url="ftp://ftp.win.tue.nl/pub/security/satan-1.1.1.tar.Z">,
los avisos del CERT sobre SATAN están en <url
url="ftp://info.cert.org/pub/cert_advisories/CA-95:06.satan"> y 
<url
url="ftp://info.cert.org/pub/cert_advisories/CA-95:07a.REVISED.satan.vul">.
Está en preparación un paquete Debian para SATAN.

<item>Courtney, programa para detectar escaners tipo SATAN, de
CIAC. Se puede obtener en <url
url="ftp://ciac.llnl.gov/pub/ciac/sectools/unix/courtney">, más
información en <url
url="http://www.alw.nih.gov/Security/CIAC-Notes/CIAC-Notes-08.html">.
Existe un paquete Debian para Courtney.

<item>Merlin, se trata de un programa desarrollado por CIAC que sirve
de interfaz a otros programas de seguridad (COPS, CRACK, TAMU-tiger..)
a través de un navegador de WWW. Se puede obtener en 
<url url="ftp://ciac.llnl.gov/pub/ciac/sectools/unix/merlin/">

<item>SAINT, lamentablemente no puede distribuirse libremente (por
ello no se incluye en el CD) pero puede obtenerse de <url
url="http://www.wwwdsi.com/saint">

<item>NESSUS, puede obtenerse en <url url="http://www.nessus.org">
Está en preparación un paquete Debian, el CD se incluye éste, aunque
no se asegura su buen funcionamiento.

<item>Gate security, puede obtenerse en <url
url="http://tishina.home.ml.org /products/gate">.

<item>Gabriel, se puede obtener en <url url="http://www.lat.com">,
más información en <url url="http://ciac.llnl.gov/ciac/ToolsUnixNetMon.html">

<item>Crack, está disponible en <url url="ftp://info.cert.org/tools/crack">
</itemize>

En general se pueden encontrar muchos programas de seguridad en los
siguientes servidores, aunque el contenido de algunos de éstos se
incluye en el CD, se recomienda su visita para buscar nuevas
herramientas de seguridad:

<itemize>

<item>Los archivos del grupo de noticias <em/comp.source.misc/ en
<url url="ftp://ftp.uu.net">

<item>El almacen de herramientas de seguridad del CERT: <url url="ftp://info.cert.org/pub/tools">
<item>El almacén de herramientas de seguridad de CIAC: <url url="ftp://ciac.llnl.gov/pub/ciac/sectools/unix">

<item>El almacen de herramientas de seguridad de Sunsite: <url
url="ftp://sunsite.unc.edu/pub/linux/system/security">

<item>"Unix security tools":<url url="http://www.aenigma.net/resources/tools/index.htm">

<item>"Security links":<url url="http://www.txdirect.net/~wall/seclinks.htm">
<item>"Networking references - Security": <url url="http://www.dc.net/ilazar/security.htm">

</itemize>


PIE LISTADO 1: Programas relacionados con la seguridad y dónde encontrarlos.<label id="programas">




LISTADO 2-

Los programas que se han visto en los dos artículos tienen limitaciones,
propias o impuestas por el usuario (esto es, configurables) para poner
límite a los ordenadores a los que van a inspeccionar. Esto es así
porque es muy posible, sobre todo debido a una mala configuración, que
se inspeccionen ordenadores fuera de la red que uno está
administrando, es decir fuera de su "jurisdicción".

Evidentemente nadie quiere que sus ordenadores sean inspeccionados de
esta forma sin haber dado su consentimiento, y este tipo de acciones
puede ser considerado un ataque contra sus equipos informáticos, es
posible que incluso sea consideraod ilegal. Los autores de SATAN
advierten de estos peligros en la documentación del programa.

Este tipo de escaneres "despertarán", además, muchas alarmas en los
sistemas (incluyo en aquellos que no tengan programas específicos para
detectarlos) y que estarán a la vista de cualquier administrador.

En resumen, tener cuidado cuando se hace uso de estos programas y
limitar al máximo la "libertad" que se les da para acceder a otros
servidores. En todos ellos (SATAN, SAINT y NESSUS) es posible definir
un "límite de profundidad", así como servidores sobre los que nunca
realizará las pruebas; es conveniente usar estas facilidades.

Como dicen los autores:
"Last but not least, SATAN was written to improve Internet security.
Don't put our work to shame."

PIE LISTADO 2: Por qué no auditar TODOS los ordenadores


LISTADO 4-

Existen invaluables fuentes de información en la Red concernientes a
seguridad de GNU/Linux, en particular, y de cualquier otro sistema
operativo en general. Servidores como "rootshell" (www.rootshell.com)
ponen a disposición del usuario una gran cantidad de información
aplicable a problemas de seguridad. Algunos de estos servidores
han sido instalados por agencias gubernamentales y otros pertenecen al
lado algo más "oscuro" de Internet:

<itemize>

<item>El texto "Improving the Security of Your Site by Breaking Into It"
("Mejorar la seguridad de su servidor entrando a la fuerza en él"), se
puede encontrar en la distribución de SATAN.

<item>El Centro de Coordinación CERT (Computer Emergency Response
Team), que ahora celebra su décimo cumpleaños, estudia vulnerabilidades
de Seguridad en Internet, dan servicios de respuesta de incidentes a
servidores que han sido víctimas de un ataque y publican información
relativa a seguridad como avisos, desarrollos o información general
para mejorar la seguridad de los servidores : <url
url="http://www.cert.org">

<item>El índice común de vulnerabilidades del CERT (la "lista de la compra"):
<url url="ftp://info.cert.org/pub/tech_tips/AUSCERT_checklist1.1">

<item> CIAC (US DOE's computer Incident Advisory Capability);
establecido en 1989, poco después del Gusano de Internet, proporciona
servicios relacionados con seguridad sin coste a empleados y
contratistas del Departamento de Defensa (DOE) Estadounidense: <url
url="http://ciac.llnl.gov/ciac/">

<item>Roothsell es un servidor que comenzó como base de datos de
información sobre cómo podría un usuario convertirse en superusuario
en una máquina. Actualmente cuenta con una base de datos inmensa sobre
seguridad para muchos sistemas operativos y aplicaciones: <url url="http://www.rootshell.com">

<item>Bugtrack, el repositorio general de problemas de seguridad de UNIX más grande del mundo:
<url url="http://www.geek-girl.com/bugtraq/index.html">

<item>La revista "underground" Phrak.

<item>La revista "Computer Underground Digest".

<item>El servidor de los hackers: <url url="http://www.hackers.com">

<item>Ejemplos de agujeros de seguridad:
<url url="http://oliver.efri.hr/~crv/security/">

<item>El paquete de seguridad COPS viene acompañado con una buena
cantidad de información relativa a seguridad, que, si bien un tanto
antigua, en su mayoría sigue aún vigente.

</itemize>

PIE LISTADO 4: Dónde buscar información relativa a la seguridad<label
id="mas-info">

<sect>Capturas
<p>
Incluir capturas de NESSUS de bugtrack y rootshell.

<sect>Notas de maquetación
<p>

<sect>Notas de coordinación
<p>
<!-- Una posible continuación de este artículo sería sobre trinux


</article>