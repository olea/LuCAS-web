<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//ES">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.9">
 <META NAME="LFCATEGORY" CONTENT="UNIX Basics">
 <TITLE>lf131, UNIX Basics: Utilidades GNU</TITLE>
<!-- stylesheet added by lfparser: --> 
<style type="text/css">
<!--
 pre { font-familiy:monospace,Courier }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- 2pdaIgnoreStart -->
<MAP name="top">
  <AREA shape="rect" coords="367,9,418,30" alt="Hogar" href="../">
  <AREA shape="rect" coords="423,9,457,30" alt="Mapa" href="../map.html">
  <AREA shape="rect" coords="463,9,508,30" alt="Indice" href="../indice.html">
  <AREA shape="rect" coords="514,9,558,30" alt="Busqueda" href="../Search/">
</MAP>
<MAP name="bottom">
  <AREA shape="rect" coords="78,0,163,15" alt="Noticias" href="../News/">
  <AREA shape="rect" coords="189,0,284,15" alt="Arca" href="../Archives/">
  <AREA shape="rect" coords="319,0,395,15" alt="Enlaces" href="../Links/">
  <AREA shape="rect" coords="436,0,523,15" alt="Sobre LF" href="../aboutus.html">
</MAP>
<!-- IMAGE HEADER -->
<CENTER>
  <IMG src="../../common/images/Topbar-es.gif" width="600" height="40" border="0" alt="[Top bar]" ismap usemap="#top" ><BR>
  <IMG src="../../common/images/Bottombar-es.gif" width="600" height="21" border="0" alt="[Bottom bar]" ismap usemap="#bottom">
</CENTER>
<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0 hspace=4 vspace=4 WIDTH="30%" >
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<IMG SRC="../../common/images/Manuel-M.gif" ALT="[Foto del Autor]" HEIGHT=147 WIDTH=122>
<BR>por  <A HREF="mailto:muriel@lsi.us.es">Manuel Muriel Cordero</A>
<BR><BR>
<I>Sobre el autor:</I><BR>
<p>
Manuel Muriel Cordero es estudiante de la Facultad de inform&aacute;tica
y estad&iacute;stica de Sevilla.
</p>
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#lfindex0">Introducci&oacute;n. El m&eacute;todo de trabajo de Unix.</A></LI>
  <LI><A HREF="#lfindex1">Origen de Las utilidades GNU</A></LI>
  <LI><A HREF="#lfindex2">grep</A></LI>
  <LI><A HREF="#lfindex3">Expresiones regulares</A></LI>
  <LI><A HREF="#lfindex4">Find</A></LI>
  <LI><A HREF="#lfindex5">cut y paste</A></LI>
  <LI><A HREF="#lfindex6">sort</A></LI>
  <LI><A HREF="#lfindex7">wc</A></LI>
  <LI><A HREF="#lfindex8">Herramientas de diferenciaci&oacute;n: cmp,comm,diff</A></LI>
  <LI><A HREF="#lfindex9">uniq</A></LI>
  <LI><A HREF="#lfindex10">sed</A></LI>
  <LI><A HREF="#lfindex11">awk</A></LI>
  <LI><A HREF="#lfindex12">Los shell scripts</A></LI>
  <LI><A HREF="#lfindex13">Recursos</A></LI>
  <LI><A HREF="#lfindex14">Rese&ntilde;a de Blibiografia:</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=131&lang=es">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<H2>Utilidades GNU</H2>
 <IMG SRC="../../common/images/illustration131.jpg" ALT="[Ilustracion]" HSPACE=10 HEIGHT=100 WIDTH=100>
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
</P>
<HR size="2" noshade align="right"><BR>
<!-- BODY OF THE ARTICLE -->


<P>
En el articulo anterior de esta serie se dio un repaso a los aspectos
m&aacute;s generales de Linux. Con &eacute;l se introdujo al lector en los asuntos
m&iacute;nimos para entablar un uso manejable sobre el sistema
operativo. El usuario puede desear conocer herramientas t&iacute;picas de los
Unix , y por extensi&oacute;n Linux, para poder controlar la administraci&oacute;n de
archivos de forma m&aacute;s eficiente. En este art&iacute;culo se pretende explicar un
conjunto de herramientas un poco m&aacute;s avanzadas pero b&aacute;sicas para
esa funci&oacute;n.
</P>

<A NAME="lfindex0">&nbsp;</A>
<H2>Introducci&oacute;n. El m&eacute;todo de trabajo de Unix.</H2>



<P>
Antes de empezar a detallarlas el lector debe conocer un poco el
porque de sus peculiaridades. Kem Thompsom y Denis Ritchie cuando
crear&oacute;n Unix a principios de los sesenta tuvieron en mente crear un
sistema operativo que facilitase la labor a los programadores. A la
conclusi&oacute;n que llegaron es que la mejor forma es establecer un
conjunto definido de peque&ntilde;as herramientas que hagan una determinada
labor muy bien. A partir de la uni&oacute;n de esas herramientas se pueden
realizar labores m&aacute;s complejas mediante la comunicaci&oacute;n de los
resultados de unas se conviertan en entradas de otra.
</P>

<P>
Esa forma de trasmitirse la informaci&oacute;n se realiza con el uso de la
entrada y salida estandar ( pantalla y teclado ). Pero gracias a la
existencia de las tuberias y redireciones ( que vimos en el cap&iacute;tulo
anterior ) se consiguen esos resultados.
</P>

<P>
Se puede apreciar en un ejemplo. Si un usuario introduce esta linea:
</P>

<PRE>
$ who | grep pepe
</PRE>

<P>
who y grep son programas distintos separados por la tuber&iacute;a "|" . who
nos muestra un listado de todos los usuarios conectados al ordenador
en el momento dado. Su salida habitual ser&iacute;a algo parecido a esto:
</P>

<PRE>
$ who
manolo	tty1	Dec 22	13:15
pepe	ps/2	Dec 22	14:36
root	tty2	Dec 22	10:03
pepe	ps/2	Dec 22	14:37
</PRE>

<P>
Lo que devuelve who se divide en 4 campos separados por
tabuladores. Los cuales son nombre de usuario (login) , terminal en el
que esta conectado , fecha y hora de inicio de la conexi&oacute;n.
</P>

<P>
"grep pepe" por su parte busca las lineas de esa salida que contengan
la secuencia "pepe".
</P>

<P>
De esta forma la salida es:
</P>

<PRE>
$ who | grep pepe
pepe	ps/2	Dec 22	14:36
pepe	ps/2	Dec 22	14:37
</PRE>

<P>
Por ejemplo si ahora el usuario en cambio quiere algo m&aacute;s simple, es
decir saber si est&aacute; o no est&aacute; conectado mediante el n&uacute;mero de conexiones
que tiene en este momento se debe usar la utilidad wc.
</P>

<P>
wc es contador de letras,palabras y lineas. En este caso solo
precisamos saber el n&uacute;mero de lineas as&iacute; que se ha de utilizar la
opci&oacute;n -l
</P>

<PRE>
$ who | grep pepe | wc -l
	2
</PRE>

<P>
pepe esta conectado en 2 terminales
</P>

<P>
Si ahora probamos con antonio
</P>

<PRE>
$ who | grep antonio | wc -l
	0
</PRE>

<P>
antonio no esta conectado
</P>

<A NAME="lfindex1">&nbsp;</A>
<H2>Origen de Las utilidades GNU</H2>



<P>
Richar Stallman , fundador del proyecto GNU, observ&oacute; que es &eacute;ticamente
discutible la tiran&iacute;a de las grandes empresas del software sobre el
mercado que impide un avance racional de la inform&aacute;tica. Tras trabajar
en el MIT desarollando el editor Emacs no le agrad&oacute; que su trabajo
fuese utilizado por las marcas comerciales para crear versiones
propetarias. Ante esa situacion decidio crear un proyecto con vista
que el fuente de los programas fuese accesible por todo el mundo. Ese
es el GNU. Su objetivo era crear todo un sistema operativo de software
abierto . El trabajo comenzo por desarrollar una versi&oacute;n libre de
Emacs , un compilador ( el GCC ) y adem&aacute;s el conjunto habitual de
herramientas t&iacute;picas de los sistemas Unix. Estas son las que este art&iacute;culo
analiza.
</P>

<A NAME="lfindex2">&nbsp;</A>
<H2>grep</H2>


<P>
En el ejemplo anterior hemos visto b&aacute;sicamente cual es el objetivo de
grep . Ahora se especifica con m&aacute;s detalle.
</P>

<P>
grep b&aacute;sicamente funciona de esta manera:
</P>

<PRE>
$ grep [-opciones] patr&oacute;n ficheros
</PRE>

<P>
Las opciones m&aacute;s comunes son:
</P>

<P>
-n antepone a cada linea emparejada con su n&uacute;mero de l&iacute;nea (&uacute;til para
buscar algo en un fichero muy largo y saber donde esta
especificamente)<br>
-c imprime solo el n&uacute;mero de coincidencia encontradas<br>
-v solo se buscan las no coincidencias ( cuando lo que buscamos es lo
que no coincide con el patr&oacute;n )<br>
</P>

<P>
El patr&oacute;n es cualquier conjunto de caracteres que se busca. Hay que
indicar es que si van acompa&ntilde;ados de un espacio grep confundira el
patr&oacute;n con los ficheros a buscar, eso se soluciona con la ayuda de los
caracteres ".Por ejemplo:
</P>

<PRE>
$ grep "Hola mundo" fichero
</PRE>

<P>
Si buscamos alguna cadena que contenga un comod&iacute;n , ap&oacute;strofes ,
comillas , redirreciones o barras del tipo "\", se deber&aacute; anteponer una barra "\" para asi
indicar de que buscamos esa caracter en si y no la substituci&oacute;n del
comod&iacute;n , o que iniciamos una cadena de varias palabras .
</P>

<PRE>
$ grep \*\"\'\?\< fichero
Esto es una cadena chunga -> *"¿<
</PRE>

<A NAME="lfindex3">&nbsp;</A>
<H2>Expresiones regulares</H2>


<P>
grep y otros herramientas GNU son capaces de realizar busquedas m&aacute;s
avanzadas. Eso se consigue con ayuda de las expresiones regulares. Las
expresiones regulares cumplen una funci&oacute;n parecida a los comodines en
el shell, o sea hacen sustituciones de caracteres o conjunto de
caracteres. Unos ejemplos:
</P>

<PRE>
$ grep c.n
</PRE>

<P>
busca todas las ocurrencias que tenga una cadena con una c , cualquier
letra y una t
</P>

<PRE>
$ grep [Bc]el
</PRE>

<P>
busca las ocurrencias Bel y cel.
</P>

<PRE>
$ grep [m-o]ata
</PRE>

<P>
Das las lineas que conteng&aacute;n mata, nata y oata.
</P>

<PRE>
$ grep [^m-o]ata
</PRE>

<P>
Da las lineas que contenga una cadena terminada en ata y que no
contenga como primera letra m,m y o
</P>

<PRE>
$ grep "^Martin come"
</PRE>

<P>
Como salida las lineas que comienzen con Martin come , ojo vease que
no esta entre corchetes , en este caso no es una negaci&oacute;n de conjunto
como en el anterior ejemplo sino como comienzo de l&iacute;nea.
</P>

<PRE>
$ grep "durmiendo$"
</PRE>

<P>
Encontrar&aacute; las lineas terminadas en durmiendo. $ substituye a un fin
de l&iacute;nea.
</P>

<PRE>
$ grep "^Caja San Fernando gana la liga$"
</PRE>

<P>
Busca aquellas lineas que sean exactamente eso.
</P>

<P>
Por supuesto estos caracteres para eliminar su significado de
sustituci&oacute;n hay que anteponerles la obligatoria "\". Por ejemplo:
</P>

<PRE>
$ grep "E\.T\."
</PRE>

<P>
Buscara la secuencia E.T.
</P>

<A NAME="lfindex4">&nbsp;</A>
<H2>Find</H2>


<P>
Este comando se encarga de la busqueda de ficheros. En otro art&iacute;culo
de esta revista se ha explicado con bastante detalle. As&iacute; como la cosa
no es redescrubir la rueda solo hago referencia a &eacute;l.
</P>

<A NAME="lfindex5">&nbsp;</A>
<H2>cut y paste</H2>


<P>
En Unix la informaci&oacute;n sol&iacute;a guardarse en ficheros de texto ASCII
organizados por campos verticales separados con un caracter
diferenciador , este solia ser un tabulador o el car&aacute;cter ":".
Una de las necesidades que se suele producir en estos casos es separar
los campos de un fichero y unirlos en otro. cut y paste realizan ese
trabajo.
</P>

<P>
Vamos a usar como ejemplo el fichero /etc/passwd encargado de
gestionar los usuarios. Su contenido se compone de 7 campos separados
por ":" . Los campos son respectivamente y en este orden login,clave
encriptada , identificaci&oacute;n de usuario , identificaci&oacute;n de grupo ,
geco , directorio de inicio de usuario y shell que usa.
</P>

<P>
He aqu&iacute; un extracto t&iacute;pico de ese archivo.
</P>

<PRE>
root:x:0:0:root:/root:/bin/bash
murie:x:500:500:Manuel Muriel Cordero:/home/murie:/bin/bash
practica:x:501:501:Usuario de practicas para Ksh:/home/practica:/bin/ksh
wizardi:x:502:502:Wizard para nethack:/home/wizard:/bin/bash
</PRE>

<P>
Si por ejemplo ahora queremos ahora emparejar los usuarios con los
login que usa debemos cortar los campos 1 y 7. Manos a la obra:
</P>

<PRE>
$ cut -f1,7 -d: /etc/passwd
root:/bin/bash
murie:/bin/bash
practica:/bin/ksh
wizard:/bin/bash
</PRE>

<P>
-f expecifica los campos a visualizar -d indica el separador a usar (
por defecto el tabulador ) y por &uacute;ltimo se encuentra el fichero a
listar.
</P>

<P>
Tambi&eacute;n es posible especificar intervalos de campos:
</P>

<PRE>
$ cut -f5-7 -d: /etc/passwd
root:/root:/bin/bash
Manuel Muriel Cordero:/home/murie:/bin/bash
Usuario de practicas para Ksh:/home/practica:/bin/ksh
Wizard para nethack:/home/wizard:/bin/bash
</PRE>

<P>
Dejo al lector como ejercicio averiguar el porqu&eacute; de esa salida.
</P>

<P>
Ahora supongamos que hemos redirigido la salida con la ayuda de ">" a
2 ficheros y queremos unir las 2 salidas. Para ello esta paste.
</P>

<PRE>
$ paste salida1 salida2
root:/bin/bash:root:/root:/bin/bash
murie:/bin/bash:Manuel Muriel Cordero:/home/murie:/bin/bash
practica:/bin/ksh:Usuario de practicas para Ksk:/home/practica:/bin/ksh
wizard:/bin/bash:Wizard para nethack:/home/wizard:/bin/bash
</PRE>

<A NAME="lfindex6">&nbsp;</A>
<H2>sort</H2>


<P>
Por ejemplo supongamos ahora que deseamos de un /etc/passwd
ordenada seg&uacute;n el geco. Para ello recurrimos a sort, la herramienta de
ordenaci&oacute;n.
</P>

<PRE>
$ sort -t: +4 /etc/passwd
murie:x:500:500:Manuel Muriel Cordero:/home/murie:/bin/bash
practica:x:501:501:Usuario de practicas para Ksh:/home/practica:/bin/ksh
wizard:x:502:502:Wizard para nethack:/home/wizard:/bin/bash
root:x:0:0:root:/root:/bin/bash
</PRE>

<P>
Se puede apreciar que ha ordenado la salida , pero siguiendo el
criterio de la tabla ASCII , si deseamos que no diferencia entre
may&uacute;sculas y min&uacute;sculas se har&iacute;a con:
</P>

<PRE>
$ sort -t: +4f  /etc/passwd
murie:x:500:500:Manuel Muriel Cordero:/home/murie:/bin/bash
root:x:0:0:root:/root:/bin/bash
practica:x:501:501:Usuario de practicas para Ksh:/home/practica:/bin/ksh
wizard:x:502:502:Wizard para nethack:/home/wizard:/bin/bash
</PRE>

<P>
-t es la opci&oacute;n que indica que separador se usa . +4 se refiere a
cuantos campos hay que saltar antes de iniciar la ordenaci&oacute;n. f indica
que se ignore las diferencias entre may&uacute;sculas y min&uacute;sculas
</P>

<P>
Se puede realizar una ordenaci&oacute;n mucho m&aacute;s refinada. Por ejemplo
ordenado primero de forma inversa seg&uacute;n el shell que use y luego por
el geco:
</P>

<PRE>
$ sort -t: +6r +4f /etc/passwd
practica:x:501:501:Usuario de practicas para Ksh:/home/practica:/bin/ksh
murie:x:500:500:Manuel Muriel Cordero:/home/murie:/bin/bash
root:x:0:0:root:/root:/bin/bash
wizard:x:502:502:Wizard para nethack:/home/wizard:/bin/bash
</PRE>

<P>
Ahora sup&oacute;ngase que disponemos un fichero en el que se archiva las
personas y las deudas en cuesti&oacute;n de pr&eacute;stamos que tiene con usted.
Un ejemplo "manga":
</P>

<PRE>
Son Goku:23450
Son Gohan:4570
Picolo:356700
Ranma 1/2:700
</PRE>

<P>
Si usted desea saber a cual primero le tiene que mandar el mat&oacute;n :-)
desear&aacute; obtener una salida ordenada seg&uacute;n morosos.
</P>

<P>
Si se realiza esta prueba se puede observar que:
</P>

<PRE>
$ sort +1 deudas
Ranma 1/2:700
Son Gohan:4570
Son Goku:23450
Picolo:356700
</PRE>

<P>
Esto no es precisamente lo que se espera debido a que se ha realizado
una busqueda alfab&eacute;tica con un n&uacute;mero diferente de digitos. La
soluci&oacute;n reside en la opcion n:
</P>

<PRE>
$ sort +1n deudas
Picolo:356700
Son Goku:23450
Son Gohan:4570
Ranma 1/2:700
</PRE>

<P>
Las opciones basicas de sort son estas
</P>

<P>
+n.m se salta los n primeros campos y los m siguientes caracteres
antes de empezar la ordenaci&oacute;n.<br>
-n.m para la ordenaci&oacute;n al llegar al n-esimo campo y m caracteres
despues
</P>

<P>
y como modificadores de los parametros son:
</P>

<P>
-b ignora espacios en blanco iniciales<br>
-d orden de diccionario ( solo se tienen en cuenta letras , numeros y
espacios)<br>
-f ignora la distinci&oacute;n entre may&uacute;sculas y min&uacute;sculas.<br>
-n orden aritm&eacute;tico<br>
-r orden inverso
</P>

<A NAME="lfindex7">&nbsp;</A>
<H2>wc</H2>


<P>
wc como se ha visto ya es un contador de letras,lineas y palabras. Por
defecto al introducir como parametro un fichero da como salida el
n&uacute;mero de lineas, palabras y caracteres que lo componen
</P>

<P>
Con las opciones podemos variar esa salida
</P>

<P>
-l solo da las lineas<br>
-w solo da las palabras<br>
-c solo da los caracteres
</P>

<A NAME="lfindex8">&nbsp;</A>
<H2>Herramientas de diferenciaci&oacute;n: cmp,comm,diff</H2>


<P>
A veces es necesario saber en que se diferenci&aacute;n 2 versiones de un
fichero. Este se usa especialmente en programaci&oacute;n cuando hay varias
personas trabajando en un mismo proyecto modificando los fuentes de los
programas. Si se precisa saber las variaciones de una versi&oacute;n de otra
se recurre a estas herramientas.
</P>

<P>
cmp es la m&aacute;s b&aacute;sica de todas. Compara dos ficheros e indica , si la
hay , el lugar donde se produce la primera diferencia (n&uacute;mero de
caracter y l&iacute;nea de la diferencia)
</P>

<PRE>
$ cmp antigua nueva
antigua nueva differ: char 11234, line 333
</PRE>

<P>
comm es algo m&aacute;s avanzado. Su salida se produce en 3 columnas. La
primera contiene las lineas &uacute;nicas del primer fichero, la segunda las
&uacute;nicas del segunda y la tercera las comunes. Dispone de parametros
n&uacute;mericos que establecen si deseas eliminar alguna de esas
columnas. Son la -1 , -2 y -3 que indican a comm que no visualizen la
primera, segunda y tercera columna. Con este ejemplo se observa las
lineas que s&oacute;lo est&aacute;n en el primer fichero y las comunes.
</P>

<PRE>
$ comm -2 antigua nueva
</PRE>

<P>
Por &uacute;ltimo est&aacute; diff. Es una herramienta fundamental en programaci&oacute;n
de proyectos avanzados. Si alguna vez ha bajado un kernel para
compilarlo sabra que puede bajarse los fuentes de la nueva o bajarse
el patch con respecto a la anterior, que suele ser un fichero mas
peque&ntilde;o . Ese patch suele terminar en .diff
lo que indica que es el resultado de una salida diff. Esta
herramienta contiene una serie de comandos de editor ( vi , rcs ) de
tal manera que se hagan id&eacute;nticos los 2 ficheros. Tambi&eacute;n es aplicable
a directorios y todos los archivos que lo contienen. La utilidad es
muy clara, al tener que bajar menor cantidad de fuente ( solo los
cambios ) se aplica el parche ( con patch ) y se vuelve a compilar.
Sin parametros la salida espec&iacute;fica en estos formatos como se deben
hacer los cambios de tal manera que el primero sea igual al segundo
con comandos vi.
</P>

<PRE>
$ diff antigua nueva
3c3
< El Hobbit
---
> El Se&ntilde;or de los Anillos
78a79,87
> Tres anillos para los Reyes Elfos bajo el cielo.
> Siete pera los Se&ntilde;ores Enanos en casas de piedra.
> Nueve para los Hombres Mortales condenados a morir.
> Uno para el Se&ntilde;or Oscuro, sobre el trono oscuro
> en la tierra de Mordor donde se extienden las Sombras.
> Un Anillo para gobernarlos a todos. Un Anillo para encontrarlos,
> un anillo para atraerlos a todos y atarlos a las tinieblas
> en la tierra de Mordor donde se extienden las Sombras.
</PRE>

<P>
3c3 expresa que se debe cambiar la l&iacute;nea 3 , quitando "El Hobbit" y
substituyendolo por "El Se&ntilde;or de los Anillos".
78a79,87 indica que se debe insertar unas nuevas lineas 79 a la 87.
</P>

<A NAME="lfindex9">&nbsp;</A>
<H2>uniq</H2>


<P>
uniq es el encargado de eliminar las redundancias. Por ejemplo si
deseamos obtener un listado de la gente conectada al ordenador en un
momento dado deberemos hacer uso de who y de cut.
</P>

<PRE>
$ who | cut -f1 -d' '
root
murie
murie
practica
</PRE>

<P>
El resultado no es del todo perfecto. Falta eliminar la doble
aparici&oacute;n de murie. Dicho y hecho.
</P>

<PRE>
$ who | cut -f1 -d' ' | uniq
root
murie
practica
</PRE>

<P>
Como nota indicar que el -d' ' indica que el separador es el espacio
en blanco ya que who no separa usando tabuladores.
</P>

<A NAME="lfindex10">&nbsp;</A>
<H2>sed</H2>


<P>
sed es una de las herramientas m&aacute;s peculiares de Unix. sed significa
Stream Editor (  o sea editor de flujo ) . Los editores suelen aceptar
de forma interactiva las modificaciones que se desean insertar. Sed
nos permite crear peque&ntilde;os programas "shell scripts" parecidos a los
batch de MS-DOS . Sed nos dan la capacidad de modificar de forma autom&aacute;tica
el contenido de un fichero , permitiendonos crear shell scripts que lo
modifiquen "on the fly". Las capacidades de este editor son muy
completas y por la extensi&oacute;n que tomar&iacute;a el art&iacute;culo no se ver&aacute;n aqu&iacute;,
por lo cual se adoptara una breve introducci&oacute;n dejando al usuario
interesado recurrir a la documentaci&oacute;n en formato de man e info que
contiene linux sobre todos sus comandos.
</P>

<P>
Sed suele llamarse de esta forma:
</P>

<PRE>
$ sed 'comando-sed' fichero
</PRE>

<P>
Por ejemplo tengamos un fichero en el que deseamos reemplazar todos las
apariciones de "Manolo" por "Fernando" . Manos a la obra:
</P>

<PRE>
$ sed 's/Manolo/Fernando/g' archivo
</PRE>

<P>
Y devuelve por salida estandar las modificaciones. Si se desea
conservar el resultado se redigir&aacute; con ">"
</P>

<P>
Los usuarios de vi reconecer&aacute;n inmediatamente que se trata de un
comando t&iacute;pico de vi de busqueda y sustituci&oacute;n. En realidad
los comandos de tipo ":" ( los que invocan a ex ) se pueden usar con sed.
</P>

<p>
La estructura de los ordenes  sed consiste en indicar primero una cadena ( o
secuencia de cadenas ) sobre las que actuar y luego el comando. Para
indicar una cadena se puede indicar un numero, un intervalo de numeros o
buscar un patron.
</p>

<PRE>
Los comandos usuales de sed
Comando	Acci&oacute;n
-------  ------
a\	a&ntilde;ade las lineas siguientes a las lineas afectadas
c\	cambia las lineas afectadas por las lineas siguientes
d	borra las lineas afectadas
g	hace sustituciones generales, de todos los patrones
	localizados inserta en lugar de limitarse al primero
i\	inserta las lineas siguientes a las afectadas
p	imprime la l&iacute;nea, incluso con la opci&oacute;n -n
q	abandonada (quit) cuando se alcanza la l&iacute;nea especificada
r fichero 	lee un fichero , a&ntilde;adiendo el contenido a la salida
s/uno/dos	sustituye la cadena "uno" por "dos"
w fichero	copia esa linea a otro fichero
=	imprime el n&uacute;mero de l&iacute;nea
! comando	aplica un comando a dicha l&iacute;nea
</PRE>

<P>
Con sed se puede especificar sobre que lineas o conjunto de lineas se
aplica el comando:
</P>


<PRE>
$ sed '3d' archivo
</PRE>

<P>
Borrar&aacute; la tercera l&iacute;nea del archivo
</P>

<PRE>
$ sed '2,4s/e/#/' fichero
</PRE>

<P>
Substituye el caracter e por # en las lineas del 2 a la 4 inclusive.
</P>

<P>
Tambi&eacute;n es posible realizar comandos sobre lineas que contengan una
determinada cadena haciendo uso , si se desea , de expresiones
regulares explicadas con anterioridad.
</P>

<PRE>
$ sed '/[Qq]ueen/d' canciones
</PRE>

<P>
Borra todas las lineas que contengan la cadena "Queen" o "queen".
</P>

<P>
Con la ayuda de expresiones regulares podemos por ejemplo eliminar las
lineas vacias de un fichero.
</P>

<PRE>
$ sed '/^$/d' archivo
</PRE>

<P>
Aunque esto no borrar&aacute; las cadenas que contengan espacios. Con esta
versi&oacute;n adem&aacute;s se consigue ese prop&oacute;sito.
</P>

<PRE>
$ sed '/^ *$/d' archivo
</PRE>

<P>
La secuencia ' *' indica que se debe buscar cualquier combinaci&oacute;n de
cero o mas apariciones del patr&oacute;n ' '.
</P>

<PRE>
$ sed '/InitMenu/a\
> gvim	gvim.xpm	exec gvim &'  .xvwmrc

Este ejemplo buscaria una linea que contenga la cadena InitMenu y despues
de esa le a&ntilde;adiria esa cadena.
</PRE>
<A NAME="lfindex11">&nbsp;</A>
<H2>awk</H2>


<P>
Por &uacute;ltimo y no menos importante esta el comando awk. Para los que se
extra&ntilde;en por ese peculiar nombre , este proviene de sus creadores
originales Alfred Aho, Brian Kernighan y Peter Weinberger.
</P>

<P>
La utilidad awk es una de las m&aacute;s interesantes de los sistemas
Unix. Es un herramienta bastante compleja y avanzada que permite desde
la linea de comandos realizar un variado conjunto de operaciones.
</P>

<P>
Cabe indicar de que awk y sed forman pieza clave de los shell scripts
m&aacute;s complejos. Puede resultar realmente impresionante lo que se puede
llegar a hacer sin hacer uso para nada de C o cualquier otro lenguaje
compilado. Cabe destacar que por ejemplo el setup de la distribucion de
slakware as&iacute; como muchos CGI del web son en realidad shell scripts.
</P>

<P>
&Uacute;ltimamente el uso de las herramientas de la l&iacute;nea de comandos ha sido
algo denostado, achacandole demasiada antiguedad para los entornos de
ventanas que se usan actualmente as&iacute; como la llegada de lenguaje Perl
que pretende ser un substituto de shell scripting dan a indicar que
estas herramientas est&aacute;n condenadas al olvido. En mi experiencia he
podido comprobar que muchas aplicaciones ( incluso un peque&ntilde;o gestor
de base de datos ) es cuesti&oacute;n de pocas l&iacute;neas de c&oacute;digo en shell
script.
</P>

<P>
Es aqu&iacute; donde awk junto con sed pueden realizar una gran labor sobre
informaci&oacute;n almacenada en formato ASCII. Con ellos podemos realizar
labores iguales a la suma de un peque&ntilde;o gestor de base de datos m&aacute;s
una hoja de c&aacute;lculo.
</P>

<P>
Supongamos una factura en la que se indica en un fichero los art&iacute;culos
comprados y su precio de venta al p&uacute;blico. Por ejemplo este archivo "compras":
</P>

<PRE>
naranjas	5	250
peras	3	120
manzanas	2	360
</PRE>

<P>
Se trata de un fichero con 3 campos separados por tabuladores. Ahora
se desea crear un cuarto campo con el precio total por cada producto.
</P>

<PRE>
$ awk '{total=$2*$3; print $0 , total }' compras
naranjas	6	250	1250
peras	3	120	360
manzanas	2	360	720
</PRE>

<P>
total es una variable al que se le asignan los valores multiplicados  de los campos
segundo y tercero, luego a cada linea se imprime la linea completa
($0) y el total por linea.
</P>

<P>
awk es casi un entorno de programaci&oacute;n por si solo , ideal para el
tratamiento automatizado de informaci&oacute;n en ficheros de texto. Si el
usuario ha descubierto con interes esta herramienta le animo a seguir
descubriendo sus peculiaridades en las paginas man e info de su
sistema.
</P>

<A NAME="lfindex12">&nbsp;</A>
<H2>Los shell scripts</H2>


<P>
Ya se ha referido a ellos anteriormente. Los shell scripts son
secuencias de instrucciones ( comandos del sistema ) que se deben
realizar.
</P>

<P>
Los shell scripts tienen como hermanos a los archivos batch de
DOS. Con ellos el usuario esta habilitado para crear sus propios
comandos a partir de combinaciones de otros.
</P>

<P>
Los shell scripts son capaces , por supuesto , de aceptar parametros,
estos se almacenan en las variables $0 ( nombre del comandos ) $1 , $2
, ... , $9. Para referirse a los $1 al $9 se puede hacer uso de $*
</P>

<P>
Los shell scripts se pueden crear con cualquier editor. Para
ejecutarlos se puede hacer con:
</P>

<PRE>
$ sh shell-script
</PRE>

<P>
o mejor darle permisos de ejecuci&oacute;n al archivo con
</P>

<PRE>
$ chmod 700 shell-script
</PRE>

<P>
Y luego se puede ejecutar con s&oacute;lo
</P>

<PRE>
$ shell-script
</PRE>

<P>
Por ahora se deja a los shell scripts y as&iacute; terminamos este art&iacute;culo.
Ya en proximos n&uacute;meros se retomar&aacute; el tema. En el proximo art&iacute;culo se
hablar&aacute; acerca de los editores m&aacute;s comunes en los Unix. El vi y el
emacs. EL conocimiento de su uso es fundamental para cualquier usuario
de Linux.
</P>

<A NAME="lfindex13">&nbsp;</A>
<H2>Recursos</H2>


<p>
Este art&iacute;culo es introductorio y si el autor lo cree conveniente puede estudiar
con m&aacute;s detalles en otros articulos de LinuxFocus como:
<a href="../September1998/article64.html">Find</a>
<a href="../July1998/article30.html">Expresiones regulares</a>
<a href="../September1999/article103.html">Awk</a>
</p>

<A NAME="lfindex14">&nbsp;</A>
<H2>Rese&ntilde;a de Blibiografia:</H2>


<P>
El se&ntilde;or de los anillos . Autor J.R.R Tolkien . Edicciones Minotauro (c) 1997
</P>




<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=131&lang=es"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="95%">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Manuel Muriel Cordero, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
<BR><a href="http://cgi.linuxfocus.org/cgi-bin/lfcomment?lang=es&article=article131.html" target="_TOP">Pinchar aqu&iacute; para informar de alg&uacute;n problema o enviar comentarios a LinuxFocus</A><BR></TD>
<!-- OLD FORMAT, NO TRANSLATION INFO -->
</TR></TABLE></CENTER>
<p><font size=1>2001-07-02, generated by lfparser version 2.9</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
