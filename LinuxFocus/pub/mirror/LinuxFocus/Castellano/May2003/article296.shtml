<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.34">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf296, SoftwareDevelopment: Programaci&oacute;n concurrente - Colas de mensajes (2)</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 .mark  { background-color:#e6e6ff }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Leonardo Giordani
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: Programaci&oacute;n concurrente - Colas de mensajes (2)
 =LF=NUMBER: 296
 =LF=ANAME_: article296.html
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top"><A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="2">Hogar</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Mapa</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Indice</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="2">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="190" summary="about the author">
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4 summary="pda download"> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<img
src="../../common/images/LeonardoGiordani.jpg"
width="85"
    height="109" alt="[Leonardo]">
<BR>por  Leonardo Giordani <br> <small>&lt;leo.giordani(at)libero.it&gt;</small>
<BR><BR>
<I>Sobre el autor:</I><BR>
<!-- aboutauthor_start -->
<p>Acaba de recibir el diploma de la Facultad de
Ingenier&iacute;a de
    Telecomunicaciones en el Polit&eacute;cnico de
Mil&aacute;n. Interesado en
    programaci&oacute;n (principalmente en Ensamblador
y C/C++). Desde 1999
    trabaja casi exclusivamente con Linux/Unix.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED TO es -->
<BR><BR><I>Taducido al espa&ntilde;ol por:</I><BR>
Rafa Pereira <small>&lt;rptv2003(at)yahoo.com&gt;</small>
<br>
<!--
 =LF=TRANSTO=es: Rafa Pereira
-->
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#296lfindex0">Introducci&oacute;n</A></LI>
  <LI><A HREF="#296lfindex1">Tratamiento de errores</A></LI>
  <LI><A HREF="#296lfindex2">Implementaci&oacute;n del protocolo - Capa
1</A></LI>
  <LI><A HREF="#296lfindex3">Lecturas recomendadas</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=296">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>Programaci&oacute;n concurrente - Colas de mensajes (2)</H2>
 <img src="../../common/images/illustration272.jpg"
width="300" height="180" alt=
"[run in paralell]">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<!-- articleabstract_start -->

    Esta serie de art&iacute;culos tiene el
prop&oacute;sito de introducir al
    lector al concepto de multitarea y a su
implementaci&oacute;n en el
    sistema operativo Linux. Comenzando por los
conceptos te&oacute;ricos
    base de la multitarea, acabaremos escribiendo una
aplicaci&oacute;n
    completa mostrando la comunicaci&oacute;n entre
procesos, mediante un
    protocolo de comunicaciones sencillo pero
eficiente. Los
    requisitos previos para entender este
art&iacute;culo son:




    <ul><li>Conocimiento m&iacute;nimo del shell.</li><li>Conocimiento b&aacute;sico del lenguaje C
(sintaxis, bucles,
      librer&iacute;as).</li></ul>

    Todas las referencias a p&aacute;ginas de manual
figuran entre
    par&eacute;ntesis a continuaci&oacute;n del nombre
del comando. Todas las
    funciones de glibc est&aacute;n documentadas en
las p&aacute;ginas info gnu
    (info Libc, o, en konqueror, info:/libc/Top).

    <p>

Tambi&eacute;n podr&iacute;a ser buena idea leer antes
alguno de los art&iacute;culos
previos de esta serie:

 <ul><li><a
href="../November2002/article272.shtml">Programaci&oacute;n
concurrente - Principios e introducci&oacute;n a
procesos.</a><li><a
href="../January2003/article281.shtml">Programaci&oacute;n
concurrente - Comunicaci&oacute;n entre procesos.</a><li><a
href="../March2003/article287.shtml">Programaci&oacute;n
concurrente - Colas de mensajes (1).</a>
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- BODY OF THE ARTICLE -->


    <A NAME="296lfindex0">&nbsp;</A>
<H3>Introducci&oacute;n</H3>

    En el anterior art&iacute;culo de esta
peque&ntilde;a serie aprendimos c&oacute;mo
    hacer que dos (o m&aacute;s) procesos se
sincronicen y colaboren a
    trav&eacute;s del uso de colas de mensajes. En
este art&iacute;culo iremos
    m&aacute;s all&aacute; y empezaremos a crear un
protocolo sencillo para
    nuestro intercambio de mensajes.

    <p>Ya dijimos que un protocolo es un conjunto de
reglas que
    permite a las personas o a las m&aacute;quinas
hablar, incluso siendo
    diferentes. Por ejemplo, el uso de la lengua
inglesa es un
    protocolo, porque me permite hablarles a mis
lectores hind&uacute;es
    (que siempre est&aacute;n muy interesados en lo
que escribo). Hablando
    en t&eacute;rminos m&aacute;s relacionados con
Linux, si recompilas el kernel
    (no temas, no es tan dif&iacute;cil), seguramente
observar&aacute;s la
    secci&oacute;n Networking, en la cual puedes hacer
que tu kernel
    entienda varios protocolos de red, como
TCP/IP.</p>

    <p>A la hora de crear un protocolo tenemos que
decidir qu&eacute; clase
    de aplicaci&oacute;n vamos a desarrollar. En esta
ocasi&oacute;n vamos a
    escribir un simulador de conmutador
telef&oacute;nico sencillo. El
    proceso principal ser&aacute; el conmutador
telef&oacute;nico, y los procesos
    hijos actuar&aacute;n como usuarios: permitiremos
a los usuarios enviarse
    mensajes entre ellos a trav&eacute;s del
conmutador.</p>

    <p>El protocolo va a cubrir tres situaciones
distintas: el
    nacimiento de un usuario (esto es, el usuario
existe y est&aacute;
    conectado), el trabajo normal del usuario, y la
muerte de un
    usuario (ya no est&aacute; conectado). Hablemos de
estas tres situaciones.</p>

    <p>Cuando un usuario se conecta al sistema crea su
propia cola de
    mensajes (no olvides que estamos hablando de
procesos), sus
    identificadores tienen que ser enviados al
conmutador para que &eacute;ste
    sepa c&oacute;mo llegar a cada usuario. En este
punto, el usuario puede
    inicializar las estructuras o los datos que
necesite. Por &uacute;ltimo,
    recibe del conmutador el identificador de una cola
en la que puede
    escribir los mensajes que quiere enviar a otros
usuarios a trav&eacute;s
    del conmutador.</p>

    <p>El usuario puede enviar y recibir mensajes.
Cuando env&iacute;a un
    mensaje a otro usuario se pueden dar dos
situaciones: que el receptor
    est&eacute; conectado o que no lo est&eacute;. En
ambos casos se enviar&aacute; un mensaje
    de confirmaci&oacute;n al emisor, para informarle
de lo que ha ocurrido con
    su mensaje. Esto no supone ninguna acci&oacute;n
por parte del receptor, es
    el conmutador quien hace el trabajo.</p>

    <p>Cuando un usuario se desconecta del sistema
deber&iacute;a notific&aacute;rselo
    al conmutador, pero no es necesaria ninguna otra
acci&oacute;n. El metac&oacute;digo
    que describe este modo de trabajo es el
siguiente:</p>

    <pre class="code">
/* Nacimiento */
create_queue
init
send_alive
send_queue_id
get_switch_queue_id

/* Trabajo */
while(!leaving){
 receive_all
 if(&lt;send condition&gt;){
  send_message
 }
 if(&lt;leave condition&gt;){
  leaving = 1
 }
}

/* Muerte */
send_dead
</pre>

    <p>Ahora tenemos que definir el comportamiento de
nuestro
    conmutador telef&oacute;nico: cuando un usuario se
conecta nos env&iacute;a
    un mensaje que contiene el identificador de su
cola de mensajes.
    A continuaci&oacute;n, debemos almacenar el
identificador, para poder
    enviar los mensajes dirigidos a este usuario, y
responder
    envi&aacute;ndole el identificador de una cola en
la que pueda escribir
    los mensajes que tengamos que enviar a otros
usuarios. Adem&aacute;s,
    tenemos que analizar todos los mensajes recibidos
y comprobar
    si los receptores est&aacute;n conectados: si el
receptor est&aacute; conectado
    le enviaremos el mensaje, si el receptor no
est&aacute; conectado
    desecharemos el mensaje; en ambos casos enviaremos
una
    confirmaci&oacute;n al emisor. Cuando un usuario
se desconecta,
    simplemente eliminaremos el identificador de su
cola, de forma que
    no pueda recibir m&aacute;s mensajes.</p>

    <p>La implementaci&oacute;n en metac&oacute;digo
es:</p>
<pre class="code">
while(1){
 /* Usuario nuevo */
 if (&lt;nacimiento de un usuario&gt;){
  get_queue_id
  send switch_queue_id
 }

 /* El usuario muere */
 if (&lt;muerte de un usuario&gt;){
  remove_user
 }

 /* Env&iacute;o de mensajes */
 check_message
 if (&lt;usuario vivo&gt;){
  send_message
  ack_sender_ok
 }
 else{
  ack_sender_error
 }
}
</pre>

    <A NAME="296lfindex1">&nbsp;</A>
<H3>Tratamiento de errores</H3>

    El tratamiento de las situaciones de error es una
de las cosas
    m&aacute;s dif&iacute;ciles e importantes de hacer
en un proyecto. M&aacute;s a&uacute;n,
    un buen y completo subsistema de
comprobaci&oacute;n de errores ocupa
    hasta el 50% del c&oacute;digo. No voy a explicar
en este art&iacute;culo
    c&oacute;mo desarrollar buenas rutinas de
comprobaci&oacute;n de errores,
    porque la materia es demasiado compleja, pero a
partir de ahora
    siempre comprobar&eacute; y tratar&eacute; las
situaciones de error. La
    lectura del manual de glibc (www.gnu.org)
proporciona una buena
    introducci&oacute;n a la comprobaci&oacute;n de
errores pero, si est&aacute;s
    interesado, escribir&eacute; un art&iacute;culo
sobre el tema.

    <A NAME="296lfindex2">&nbsp;</A>
<H3>Implementaci&oacute;n del protocolo - Capa
1</H3>

    Nuestro peque&ntilde;o protocolo tiene dos capas:
la primera (la
    inferior) consiste en funciones para gestionar
colas y para preparar
    y enviar mensajes, mientras que la capa superior
implementa el
    protocolo como funciones similares al
metac&oacute;digo utilizado para
    describir el comportamiento del conmutador y de
los usuarios.

    <p>Lo primero es definir una estructura para
nuestro mensaje
    utilizando el prototipo de msgbuf del kernel.</p>
<pre class="code">
typedef struct
{
  int service;
  int sender;
  int receiver;
  int data;
} messg_t;

typedef struct
{
  long mtype; /* Tipo de mensaje */
  messg_t messaggio;
} mymsgbuf_t;
</pre>

    <p>Esto es algo general que podemos extender
despu&eacute;s: los campos
    sender y receiver contienen un identificador de
usuario y el
    campo data contiene datos en general, mientras que
el campo
    service se utiliza para solicitar un determinado
servicio al
    conmutador. Por ejemplo, imaginemos que tenemos
dos servicios:
    uno para entrega inmediata y otro para entrega con
retraso,
    en cuyo caso el campo data podr&iacute;a
transportar el n&uacute;mero de segundos
    de retraso. Este es tan s&oacute;lo un ejemplo, lo
importante es que
    entendamos que el campo service nos ofrece muchas
posibilidades.</p>

    <p>Ahora podemos implementar algunas funciones
para gestionar
    nuestras estructuras de datos, en particular para
asignar y
    consultar el valor de los campos de los mensajes.
Estas funciones
    son m&aacute;s o menos todas iguales, as&iacute;
que s&oacute;lo mostrar&eacute; dos de ellas,
    puedes encontrar el resto en los <a href=
    "../../common/src/article296/">ficheros .h</a></p>
<pre class="code">
void set_sender(mymsgbuf_t * buf, int sender)
{
  buf-&gt;message.sender = sender;
}

int get_sender(mymsgbuf_t * buf)
{
  return(buf-&gt;message.sender);
}
</pre>

    <p>El objetivo de estas funciones no es el de
reducir el c&oacute;digo
    (consisten solamente en una l&iacute;nea de
c&oacute;digo): est&aacute;n ah&iacute; simplemente
    para recordar su significado y hacer que la
codificaci&oacute;n del
    protocolo se acerque m&aacute;s al lenguaje humano
y, por lo tanto, sea
    m&aacute;s f&aacute;cil de usar.</p>

    <p>Ahora tenemos que escribir funciones para
generar claves IPC,
    crear y eliminar colas de mensajes y enviar y
recibir mensajes.
    Construir una clave IPC es sencillo:</p>
<pre class="code">
key_t build_key(char c)
{
  key_t key;
  key = ftok(".", c);
  return(key);
}
</pre>

    <p>Entonces, la funci&oacute;n para crear una cola
es:</p>
<pre class="code">
int create_queue(key_t key)
{
  int qid;

  if((qid = msgget(key, IPC_CREAT | 0660)) == -1){
    perror("msgget");
    exit(1);
  }

  return(qid);
}
</pre>

    <p>como puedes ver, el tratamiento de errores es
muy sencillo
    en este caso. La siguiente funci&oacute;n destruye
una cola:</p>
<pre class="code">
int remove_queue(int qid)
{
  if(msgctl(qid, IPC_RMID, 0) == -1)
  {
    perror("msgctl");
    exit(1);
  }
  return(0);
}
</pre>

    <p>Y, por &uacute;ltimo, las funciones para
recibir y enviar mensajes:
    para nosotros enviar un mensaje significa
escribirlo en una
    determinada cola, en la especificada por el
conmutador.</p>
<pre class="code">
int send_message(int qid, mymsgbuf_t *qbuf)
{
  int result, lenght;
  lenght = sizeof(mymsgbuf_t) - sizeof(long);
  if ((result = msgsnd(qid, qbuf, lenght, 0)) == -1){
    perror("msgsnd");
    exit(1);
  }

  return(result);
}

int receive_message(int qid, long type, mymsgbuf_t
*qbuf)
{
  int result, length;
  length = sizeof(mymsgbuf_t) - sizeof(long);

  if((result = msgrcv(qid, (struct msgbuf *)qbuf,
length, type, IPC_NOWAIT)) == -1){
    if(errno == ENOMSG){
      return(0);
    }
    else{
      perror("msgrcv");
      exit(1);
    }
  }

  return(result);
}
</pre>

    <p>Y esto es todo. Encontrar&aacute;s las
funciones en el fichero
    <a
href="../../common/src/article296/">layer1.h</a>:
intenta
    escribir alg&uacute;n programa (por ejemplo el del
art&iacute;culo anterior)
    utiliz&aacute;ndolas. En el pr&oacute;ximo
art&iacute;culo hablaremos sobre la
    capa 2 del protocolo y la implementaremos.</p>

    <A NAME="296lfindex3">&nbsp;</A>
<H3>Lecturas recomendadas</H3>


    <ul>
      <li>Silberschatz, Galvin, Gagne, <b>Operating
System Concepts
      - Sixth Edition</b>, Wiley&amp;Sons, 2001</li>

      <li>Tanenbaum, WoodHull, <b>Operating Systems:
Design and
      Implementation - Second Edition</b>, Prentice
Hall, 2000</li>

      <li>Stallings, <b>Operating Systems - Fourth
Edition</b>,
      Prentice Hall, 2002</li>

      <li>Bovet, Cesati, <b>Understanding the Linux
Kernel</b>,
      O'Reilly, 2000</li>

      <li>The Linux Programmer's Guide:

<b>http://www.tldp.org/LDP/lpg/index.html</b></li>

      <li>Linux Kernel 2.4 Internals

<b>http://www.tldp.org/LDP/lki/lki-5.html</b></li>

      <li>P&aacute;gina web del canal IRC
#kernelnewbies
      <b>http://www.kernelnewbies.org/</b></li>

      <li>
        La lista de correo (FAQ) de linux-kernel
        <b>http://www.tux.org/lkml/</b>

        <p>Como siempre, puedes enviarme comentarios,
correcciones
	y preguntas a mi direcci&oacute;n de e-mail
	(leo.giordani(at)libero.it) or a trav&eacute;s de la
p&aacute;gina
	"Talkback". Por favor, escr&iacute;beme en
ingl&eacute;s, alem&aacute;n o italiano.</p>
      </li>
    </ul>
  



__________________________________
Do you Yahoo!?
The New Yahoo! Search - Faster. Easier. Bingo.
http://search.yahoo.com

<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1" summary="tb-button-outerpart">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1" summary="tb-button">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=296"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Leonardo Giordani, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#9999AA">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE summary="translators">
  <tr><td><font size="2">en --&gt; -- : Leonardo Giordani <small>&lt;leo.giordani(at)libero.it&gt;</small></font></td></tr>
  <tr><td><font size="2">en --&gt; es: Rafa Pereira &lt;rptv2003(at)yahoo.com&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2003-05-06, generated by lfparser version 2.34</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
