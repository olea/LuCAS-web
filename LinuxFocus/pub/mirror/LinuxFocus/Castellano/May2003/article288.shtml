<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.40">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf0, SoftwareDevelopment: Implementando un desplazador de texto en gráficos SDL</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 .mark  { background-color:#e6e6ff }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Leonardo Giordani
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: Implementando un desplazador de texto en gráficos SDL
 =LF=NUMBER: 0
 =LF=ANAME_: scroller-gdl-es.txt
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 <A class="nodec" href="./"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="2">Hogar</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Mapa</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Indice</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="2">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="190" summary="about the author">
<TR>
<TD>

<img src="../../common/images/LeonardoGiordani.jpg"
width="85"
    height="109" alt="[Leonardo]">
<BR>por  Leonardo Giordani <br> <small>&lt;leo.giordani(at)libero.it&gt;</small>
<BR><BR>
<I>Sobre el autor:</I><BR>
<!-- aboutauthor_start -->
<p>He obtenido mi diploma por parte de la Facultad de Ingeniería en Telecomunicaciones del Politécnico de Milán. Estoy interesado en la programación, principalmente en ensamblador y C/C++. Trabajo desde 1999 con Linux y Unix solamente.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED TO es -->
<BR><BR><I>Traducido al espa&ntilde;ol por:</I><BR>
Edgar Hernández Zúñiga <small>&lt;edgar(at)linuxfocus.org&gt;</small>
<br>
<!--
 =LF=TRANSTO=es: Edgar Hernández Zúñiga
-->
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#0lfindex0">El desplazador o voluta</A></LI>
  <LI><A HREF="#0lfindex1">Una pequeña demostración</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>Implementando un desplazador de texto en gráficos SDL</H2>
 <img src="../../common/images/illustration288.jpg"
width="250" height="125"
     alt="[sdl]">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<!-- articleabstract_start -->

Esta serie de artículos tiene el propósito de introducir al lector en el mundo de las producciones multimedia, también conocidas como "demos". Toda la Internet está llena de información en la materia, pero algunas personas han conseguido grandes cosas en Linux: my meta es describir la teoría de algunos efectos gráficos y de audio y su implementación utilizando la biblioteca SDL. Podrán encontrar más información en:

    <ul><li><a href="http://www.libsdl.org">Simple DirectMedia Layer</a>:

leer el código de las muestras y los juegos es la mejor manera de aprender nuevas soluciones.</li><li><a href="http://www.lnxscene.org">lnxscene</a>:

un sitio nuevo, pero un gran lugar para el intercambio de conocimiento; podrás encontrarme algunas veces como "muaddib"</li></ul><p>Los requisitos para el entendimiento del artículo son:</p><ul><li>Conocimiento básico del lenguaje C, sintáxis, ciclos, bibliotecas.</li><li>Conocimiento básico de la biblioteca SDL, funciones básucas e inicialización., te servirá consultar www.libsdl.org</li></ul>
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- BODY OF THE ARTICLE -->


    <A NAME="0lfindex0">&nbsp;</A>
<H3>El desplazador o voluta</H3>

Agradezco ampliamente a Sam Lantinga por la biblioteca SDL.

    <p>Un desplazador o voluta, es parte de un "demo" que permite escribir una sentencia o texto en movimiento en la panatalla o monitor: este es uno de los efectos básicos que puedes encontrar en cualquier producción multimedia al cual es posible añadirle un poco de dinámica al mostrársele al usuario. En éste artículo veremos como construir un desplazador básico que permitirá mover texto de derecha a izquierda.</p>

    <p>La idea básica de un desplazador, es copiar una parte de la pantalla uno o más pixeles hacia la izquierda o en alguna otra dirección. Ejecutando esta operación con una buena velocidad obtendrás la ilusión de un movimiento continuo, eso es todo.</p>

    <p>La teoría básica no es nada complicada; vamos a traducir todo esto en código: nos referiremos en adelante al concepto de superficie, dado que tenemos ya los conocimientos básicos de programación con SDL. Mientras trabajemos con la biblioteca SDL, debemos recordar siempre que podemos usar el poderío de la función</p>

<tt>
SDL_BlitSurface()
</tt>
    la cual nos permite hacer una copia de una parte de una
<tt>
SDL_Surface
</tt>
    identificada por una
<tt>
SDL_Rect
</tt>
    en otra
<tt>
SDL_Surface
</tt>
    identificada por otra
<tt>
SDL_Rect
</tt>
    .

    <p>Por ejemplo, imaginemos que hemos definido e inicializado dos superficies y dos rectángulos</p>
<pre class="code">
#define WIDTH 800
#define HEIGHT 600

SDL_Surface *Src;
SDL_Surface *Dst;

Src = SDL_CreateRGBSurface(SDL_HWSURFACE, WIDTH, HEIGHT, 8,
       r_mask, g_mask, b_mask, a_mask);
Dst = SDL_CreateRGBSurface(SDL_HWSURFACE, WIDTH, HEIGHT, 8,
       r_mask, g_mask, b_mask, a_mask);

SDL_Rect BigArea = {0, 0, (WIDTH / 2), HEIGHT};
SDL_Rect SmallArea = {(WIDTH / 2) + 1, 0, (WIDTH / 2), (HEIGHT / 2)};
</pre>

    Suponiendo que el color de la máscara se encuentra correctamente inicializado. Copiar las dos superficies completas implica solo un pequeño esfuerzo.
<pre class="code">
SDL_BlitSurface(Src, 0, Dst, 0);
</pre>
Nota que en el destino de la superficie solo las coordenadas del rectángulo están consideradas y no su dimensión, esto significa que la operación<pre class="code">
SDL_BlitSurface(Src, &BigArea, Dst, &SmallArea);
</pre>
    es perfectamente legal y copia la mitad izquierda de
<tt>
Src
</tt>
    la superficie en la mitad derecha de la
<tt>
Dst
</tt>
    superficie.

    <p>Ahora ejecutar el desplazado de una superficie no es más un misterio: es suficiente copiar una parte de la superficie en un rectángulo cambiado en la misma superficie; es obvio que esto tendremos que crearlo como un ciclo, con esto, el programa resultante será un poco más complejo, pero el concepto básico se mantiene simple. A cada instante del ciclo usaremos dos rectángulos, el segundo cambio se refiere al primero en la dirección en la que se ha determinado el desplazamiento, y copiaremos la superficie a sí misma del primero al segundo rectángulo.</p>
<pre class="code">
SDL_Surface *temp;

SDL_Rect From = {1, 0, WIDTH, HEIGHT};
SDL_Rect First = {0, 0, 1, HEIGHT};
SDL_Rect Last = {WIDTH-1, 0, 1, HEIGHT};

temp = SDL_CreateRGBSurface(SDL_HWSURFACE, 1, HEIGHT, 8,
       r_mask, g_mask, b_mask, a_mask);

while(1){
  SDL_BlitSurface(Src, &First, temp, 0);
  SDL_BlitSurface(Src, &From, Src, 0);
  SDL_BlitSurface(temp, &First, Src, &Last);
  SDL_BlitSurface(Src, 0, Screen, 0);
}
</pre>
Como puedes ver, esto no es suficiente para desplazar la superficie hacia la izquierda: tenemos que reinsertar desde la derecha los pixeles que han salido de la pantalla, o la superficie de desplazamiento estará detrás de las copias generando un pequeño efecto de "deslizamiento". Con esto suponemos que está lista una superficie vinculada en la pantalla. Ahora veamos un programa completo que abre una ventana de 480x200 pixeles y muestra el desplazamiento continuo de una imagen en ella.
<pre class="code">
#include "SDL/SDL.h"
#include "SDL/SDL_image.h"

#define SCREEN_WIDTH 480
#define SCREEN_HEIGHT 200

#if SDL_BYTEORDER == SDL_BIG_ENDIAN
static const Uint32 r_mask = 0xFF000000;
static const Uint32 g_mask = 0x00FF0000;
static const Uint32 b_mask = 0x0000FF00;
static const Uint32 a_mask = 0x000000FF;
#else
static const Uint32 r_mask = 0x000000FF;
static const Uint32 g_mask = 0x0000FF00;
static const Uint32 b_mask = 0x00FF0000;
static const Uint32 a_mask = 0xFF000000;
#endif
</pre>
Este grupo de definiciones es estándar en la mayoría de las producciones multimedia.

<pre class="code">
static SDL_Surface* img_surface;
static SDL_Surface* scroll_surface;
static SDL_Surface* temp_surface;
</pre>
    Aquí están las tres superficies que usaremos:
<tt>
img_surface
</tt>
    contendrá la imagen obtenida de un archivo,
<tt>
scroll_surface
</tt>
    la imagen cambiada y,
<tt>
temp_surface
</tt>
    los pixeles que hemos obtenido nuevamente de la derecha.
<pre class="code">
static const SDL_VideoInfo* info = 0;
SDL_Surface* screen;
</pre>
    Una
<tt>
SDL_VideoInfo
</tt>
    estructura, contiene información acerca de la tarjeta de video, con la cual

<tt>
screen
</tt>
    la superficie permite apuntar hacia la pantalla o monitor.
<pre class="code">
int init_video()
{
  if( SDL_Init( SDL_INIT_VIDEO) < 0 )
    {
      fprintf( stderr, "Video initialization failed: %s\n",
               SDL_GetError( ) );
      return 0;
    }

  info = SDL_GetVideoInfo( );

  if( !info ) {
    fprintf( stderr, "Video query failed: %s\n",
             SDL_GetError( ) );
    return 0;
  }

  return 1;
}

int set_video( Uint16 width, Uint16 height, int bpp, int flags)
{
  if (init_video())
    {
      if((screen = SDL_SetVideoMode(width,height,bpp,flags))==0)
        {
          fprintf( stderr, "Video mode set failed: %s\n",
                   SDL_GetError( ) );
          return 0;
        }
    }
  return 1;
}
</pre>
    La función
<tt>
init_video()
</tt>
    inicializa el subsistema de video SDL y llena completamente la
<tt>
info
</tt>
    estructura. La funci
<tt>
set_video()
</tt>
    intenta establecer la proporción o modo de video que fue establecido, tamaño y profundidad de color.
<pre class="code">
void quit( int code )
{
  SDL_FreeSurface(scroll_surface);
  SDL_FreeSurface(img_surface);

  SDL_Quit( );

  exit( code );
}
</pre>
Esta es la función esencial de terminación, la cual libera todos los recursos que utilizamos así como las llamadas
<tt>
SDL_Quit
</tt>
    .
<pre class="code">
void handle_key_down( SDL_keysym* keysym )
{
    switch( keysym->sym )
      {
      case SDLK_ESCAPE:
        quit( 0 );
        break;
      default:
        break;
      }
}
</pre>
Un evento "Presionar tecla": en este caso la tecla ESC.
<pre class="code">
void process_events( void )
{
    SDL_Event event;

    while( SDL_PollEvent( &event ) ) {

        switch( event.type ) {
        case SDL_KEYDOWN:
            handle_key_down( &event.key.keysym );
            break;
        case SDL_QUIT:
            quit( 0 );
            break;
        }
    }
}
</pre>
La función para el control de un evento no menor.
<pre class="code">
void init()
{
  SDL_Surface* tmp;
  Uint16 i;

  tmp = SDL_CreateRGBSurface(SDL_HWSURFACE, SCREEN_WIDTH,
       SCREEN_HEIGHT, 8, r_mask, g_mask, b_mask, a_mask);

  scroll_surface = SDL_DisplayFormat(tmp);


  SDL_FreeSurface(tmp);
</pre>
Vamos a trabajar con
<tt>
tmp
</tt>
    una superficie para inicializar
<tt>
scroll_surface
</tt>
    y
<tt>
temp_surface
</tt>
    Ambas son convertidas en formato de video framebuffer por la funci
<tt>
SDL_DisplayFormat
</tt>

<pre class="code">
  img_surface = IMG_Load("img.pcx");
</pre>
    Aquí cargaremos dentro de img_surface la imagen guardada en el archivo.
<pre class="code">
  for (i = 0; i < SDL_NUMEVENTS; ++i)
    {
      if (i != SDL_KEYDOWN && i != SDL_QUIT)
        {
          SDL_EventState(i, SDL_IGNORE);
        }
    }

  SDL_ShowCursor(SDL_DISABLE);
}
</pre>
Todos los eventos son ignorados, a excepción de la tecla ESC que teminará el programa; además de eso, desactivaremos el puntero.
    All events are ignored except for the pressure of a key and the
    exit from the program; moreover we disable the cursor.
<pre class="code">
int main( int argc, char* argv[] )
{
  SDL_Rect ScrollFrom = {1, 0, SCREEN_WIDTH, SCREEN_HEIGHT};
  SDL_Rect First = {0, 0, 1, SCREEN_HEIGHT};
  SDL_Rect Last = {SCREEN_WIDTH - 1, 0, 1, SCREEN_HEIGHT};
</pre>
Estos son los tres rectángulos descritos en el artículo.cle.
<pre class="code">
  if (!set_video(SCREEN_WIDTH, SCREEN_HEIGHT, 8,
      SDL_HWSURFACE | SDL_HWACCEL | SDL_HWPALETTE /*|
SDL_FULLSCREEN*/))
   quit(1);

  SDL_WM_SetCaption("Demo", "");

  init();

  SDL_BlitSurface(img_surface, 0, scroll_surface, 0);
</pre>
Este código inicializa todo lo necesario: establece el modo de video escribe el título de la ventana, llama a
<tt>
init()
</tt>
    y prepara
<tt>
scroll_surface
</tt>
    .
<pre class="code">
  while( 1 )
    {
      process_events();

      SDL_BlitSurface(scroll_surface, &First, temp_surface, 0);

      SDL_BlitSurface(scroll_surface, &ScrollFrom,
scroll_surface, 0);

      SDL_BlitSurface(temp_surface, &First, scroll_surface,
&Last);

      SDL_BlitSurface(scroll_surface, 0, screen, 0);

      SDL_Flip(screen);
    }

  return 0;
}
</pre>
Este es el ciclo descrito en el artículo: solo el evento para controlar las funciones y el regreso de la superficie en la pantalla han sido añadidos.

    <p>Como puedes ver, el trabajo de inicialización de la biblioteca no es pequeño, pero la ventaja es que es común para todo el "demo", así, cuando el código incrementa, la inicialización continua siendo una pequeña parte de todo el programa, esto lo hace portable y reutilizable.</p>

<A NAME="0lfindex1">&nbsp;</A>
<H3>Una pequeña demostración</H3>

Aquí está una captura de pantalla en diferentes momentos:
<br>
    <img
src="../../common/images/article288/sdlscroller1.jpg"
alt="state1" width="300"
height="225">
    <img
src="../../common/images/article288/sdlscroller2.jpg"
alt="state2" width="300"
height="225"><br>
<br>

    <p>PD: Puedes hacerme llegar cualquier comentario, corrección o pregunta a mi dirección de correo o a través de la página de Retroalimentación, Talback. Escríbeme en inglés, alemán o italiano.</p>
  


<!-- 2pdaIgnoreStart -->
<HR size="2" noshade>
<a style="background-color:#bdc6d5" href="./">&lt;--, regresar al &iacute;ndice de este n&uacute;mero </a><br><HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Leonardo Giordani, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE summary="translators">
  <tr><td><font size="2">it --&gt; -- : Leonardo Giordani <small>&lt;leo.giordani(at)libero.it&gt;</small></font></td></tr>
  <tr><td><font size="2">it --&gt; en: Leonardo Giordani &lt;leo.giordani(at)libero.it&gt;</font></td></tr>
  <tr><td><font size="2">en --&gt; es: Edgar Hernández Zúñiga &lt;edgar(at)linuxfocus.org&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2003-07-02, generated by lfparser version 2.40</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
