<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.34">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf287, SoftwareDevelopment: Programaci&oacute;n Concurrente - Colas de mensajes (1)</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 .mark  { background-color:#e6e6ff }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Leonardo Giordani
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: Programaci&oacute;n Concurrente - Colas de mensajes (1)
 =LF=NUMBER: 287
 =LF=ANAME_: article287.html
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top"><A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="2">Hogar</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Mapa</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Indice</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="2">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="190" summary="about the author">
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4 summary="pda download"> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<img src="../../common/images/LeonardoGiordani.jpg" width="85" height="109" alt="[Leonardo]">
<BR>por  Leonardo Giordani <br> <small>&lt;leo.giordani(at)at.libero.it&gt;</small>
<BR><BR>
<I>Sobre el autor:</I><BR>
<!-- aboutauthor_start -->
<p>Estudiante de Ingenier&iacute;a en Telecomunicaciones en la Escuela
Polit&eacute;cnica de Mil&aacute;n, trabaja como administrador de redes
y est&aacute; interesado en la programaci&oacute;n (sobretodo en
Ensamblador y C/C++). Desde 1999 trabaja casi exclusivamente bajo
Linux/Unix.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED TO es -->
<BR><BR><I>Taducido al espa&ntilde;ol por:</I><BR>
Carlos Gonz&aacute;lez P&eacute;rez <small>&lt;charly(at)galpon.org&gt;</small>
<br>
<!--
 =LF=TRANSTO=es: Carlos Gonz&aacute;lez P&eacute;rez
-->
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#287lfindex0">Introducci&oacute;n</A></LI>
  <LI><A HREF="#287lfindex1">Teor&iacute;a de Colas de Mensajes</A></LI>
  <LI><A HREF="#287lfindex2">Creando un protocolo</A></LI>
  <LI><A HREF="#287lfindex3">Colas de Mensajes System V</A></LI>
  <LI><A HREF="#287lfindex4">Lecturas Recomendadas</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=287">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>Programaci&oacute;n Concurrente - Colas de mensajes (1)</H2>
 <img src="../../common/images/illustration272.jpg" width="300"
 height="180" alt="[run in paralell]">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<!-- articleabstract_start -->

Esta serie de art&iacute;culos tiene como prop&oacute;sito el
introducir al lector el concepto de multitarea y su
implementaci&oacute;n en el sistema operativo Linux. Comenzando desde
los conceptos te&oacute;ricos sobre las bases de la multitarea,
terminaremos escribiendo una aplicaci&oacute;n completa
demostrando la comunicaci&oacute;n entre procesos, con un simple
pero eficiente protocolo de comunicaciones.<br><br><p>Prerrequisitos para entender este art&iacute;culo:</p><ul><li>Un conocimiento m&iacute;nimo de la shell.</li><li>Conocimiento b&aacute;sico del lenguaje C (sintaxis, bucles,
librerias)</li></ul>
Tambi&eacute;n ser&iacute;a buena idea leer otros art&iacute;culos de
esta serie, que aparecieron en las 2 n&uacute;meros anteriores de
LinuxFocus (Noviembre 2002 y Enero 2003).

<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- BODY OF THE ARTICLE -->

<A NAME="287lfindex0">&nbsp;</A>
<H3>Introducci&oacute;n</H3>

En los art&iacute;culos anteriores introducimos el concepto de
programaci&oacute;n concurrente y estudiamos una soluci&oacute;n inicial
al problema de la comunicaci&oacute;n entre procesos: los
sem&aacute;foros. Como hemos visto, el uso de sem&aacute;foros nos
permite administrar el acceso a recursos compartidos, &nbsp;as&iacute;
como sincronizar "rudamente" dos o m&aacute;s procesos.<br>
<p>Sincronizar procesos significa temporizar sus trabajo, no como un
modo de referecia absoluta (dando un tiempo exacto en el cual el proceso
debe empezar sus operaciones) pero s&iacute; de forma relativa, donde
podamos decidir que proceso debe actuar primero y cual lo har&aacute;
&nbsp;despu&eacute;s.<br>
</p>
<p>Utilizar sem&aacute;foros para esto es complejo y limitado: complejo
porque cada proceso debe manejar un sem&aacute;foro por cada otro
proceso con el que tenga que sincronizarse. Limitado porque no nos
permite intercambiar par&aacute;metros entre los procesos. Consideremos,
por ejemplo, crear un nuevo proceso: este evento debe ser notificado a
cada proceso en ejecuci&oacute;n, pero los sem&aacute;foros no permiten
&nbsp;a los procesos enviar esa informaci&oacute;n.<br>
</p>
<p>El control de concurrencia de accesos a recursos compartidos a
trav&eacute;s de sem&aacute;foros nos puede llevar hacia un bloqueo
continuo &nbsp;de un proceso, cuando uno de los otros procesos libera el
recurso y lo bloquea antes de que otros puedan hacer uso de &eacute;l:
como hemos visto, en el mundo de la programaci&oacute;n concurrente no
es posible saber a priori que procesos ser&aacute;n ejecutados y cuando.<br>
</p>
<p>Estas brebes notas nos permiten entender r&aacute;pidamente que los
sem&aacute;foros no son herramientas adecuadas para manejar
sincronizaciones complejas. Una soluci&oacute;n elegante para esto son
las colas de mensajes: en este art&iacute;culo estudiaremos la
teor&iacute;a de la comunicaci&oacute;n entre procesos y escribiremos un
peque&ntilde;o programa usando las primitivas de SysV.<br>
</p>
<A NAME="287lfindex1">&nbsp;</A>
<H3>Teor&iacute;a de Colas de Mensajes</H3>

Cada proceso puede crear una o m&aacute;s estructuras llamadas colas;
Cada estructura puede esperar uno o m&aacute;s mensajes de diferentes
tipos, que pueden venir de diferetes fuentes y pueden contener
informaci&oacute;n de toda naturaleza; todos pueden enviar un mensaje a
las colas de las cuales conozcan su identificador. Los procesos pueden
acceder secuencialmente a la cola, leyendo los mensajes en orden
cronol&oacute;gico (desde el m&aacute;s antig&uuml;o, el primero, al
m&aacute;s reciente, el &uacute;ltimo en llegar), pero selectivamente,
esto es, considerando s&oacute;lo los mensajes de un cierto tipo: esta
&uacute;ltima caracter&iacute;stica nos da un tipo de control de la
prioridad sobre los mensajes que leemos.<br>
<br>
<p>El uso de las colas es similar a una implementaci&oacute;n simple de
un sistema de correo: cada proceso tiene una direcci&oacute;n con la
cual puede operar con otros procesos. El proceso puede entonces leer los
mensajes mandados a su direcci&oacute;n en un orden preferencial y
actuando de acuerdo con lo que le ha sido notificado.</p>
<p>La sincronizaci&oacute;n entre dos procesos puede ser as&iacute;
llevada a cabo simplemente usando mensajes entre los dos: los recursos
seguir&aacute;n a&uacute;n teniendo semaforos para permitir a los
procesos conocer sus estados, pero la temporizaci&oacute;n entre
procesos sera realizada directamente. Entenderemos de forma inmediata
que el uso de las colas de mensajes simplifica much&iacute;simo lo que
en un principio era &nbsp;un pronblema extremadamente &nbsp;complejo.</p>
<p>Antes de que podamos implementar el lenguaje C las colas d emensajes
es necesario hablar sobre otro problema relativo a la
sincronizaci&oacute;n: la necesidad de un protocolo de
comunicaci&oacute;n.</p>
<A NAME="287lfindex2">&nbsp;</A>
<H3>Creando un protocolo</H3>

Un protocolo es un conjunto de reglas que controlan la
interacci&oacute;n de los elementos en un conjunto; en el
art&iacute;culo anterior implementamos uno de los m&aacute;s simples
protocolos creando un sem&aacute;foro y ordenando a dos procesos actuar <br>
de acuerdo a sus estados. El uso de las colas de mensajes nos permite
implementar protocolos m&aacute;s complejos: es suficiente pensar que
cada protocolo de red (TCP/IP, DNS,     SMTP, ...) est&aacute;
construido con una arquitectura de intercambio de mensajes, incluso si
la comunicaci&oacute;n es entre ordenadoresy no interna en uno de ellos.
La comparaci&oacute;n es compulsiva: no hay ninguana diferencia real
entre comunicaci&oacute;n entre procesos en la misma m&aacute;quina y
comunicaci&oacute;n entre procesos entre distintas m&aacute;quinas. Como
veremos en un pr&oacute;ximo art&iacute;culo extendiendo los conceptos
sobre los que estamos hablando a un contesto distribuido (varios
ordenadores conectados) es un tema muy sencillo.<br>
<br>
<p>Este es un ejemplo sencillo de protocolo basado en intercambio de
mensajes: dos procesos A y B se ejecutan concurrentemente y procesan
diferentes datos; una vez terminados sus procesos tienen que mezclar sus
resultados. Un protocolo simple para dirigir esta interacci&oacute;n
puede ser el siguiente:</p>
<p><b>PROCESO B:</b><br>
</p>
<ul>
  <li>Trabaja con tus datos</li>
  <li>Cuando termines m&aacute;ndale un mensaje a A</li>
  <li>Cuando A responda empieza a enviarle tus resultados.</li>
</ul>
<br>
<b>PROCESO A:</b><br>
<ul>
  <li>Trabaja con tus datos</li>
  <li>Espera un mensaje de B</li>
  <li>Responde al mensaje</li>
  <li>Recibe los datos y mezclalos con los tuyos</li>
</ul>
<br>
Elegir que proceso tiene que mezclar los datos es en este caso
totalmente arbitrario; lo m&aacute;s com&uacute;n es que esto se haga en
funci&oacute;n de la naturaleza de los procesos envueltos
(cliente/servidor) pero esta discusi&oacute;n requiere que se le dedique
un art&iacute;culo.<br>
<br>
&nbsp;
<p>Este protocolo es sencillamente extensible al caso de n procesos :
&nbsp;cada proceso menos A trabaja con sus propios datos y luego
env&iacute;a un mensaje a A. Caundo A responde cada proceso le manda sus
resultados: la estructura del proceso individual (excepto A) no es
modificada.</p>
<A NAME="287lfindex3">&nbsp;</A>
<H3>Colas de Mensajes System V</H3>

Ahora es el momento de hablar sobre la implementaci&oacute;n de estos
conceptos en el sistema operativo Linux. Como ya he dicho tenemos una
serie de primitivas que nos permiten manejar las estructuras relativas a
las colas de mensajes y que trabajan como estas para manejar
sem&aacute;foros: As&iacute; que voy a asumir que el lector conoce los
conceptos b&aacute;sicos relativos a la creaci&oacute;n de procesos, uso
de las llamadas del sistema y las llaves IPC.<br>
<br>
<p>La estructura base del sistema que describe un mensaje se llama <tt>
msgbuf </tt> ; y est&aacute; declarada en <tt> linux/msg.h </tt> </p>
<pre class="code">/* message buffer for msgsnd and msgrcv calls */<br>struct msgbuf {<br>        long mtype;         /* type of message */<br>        char mtext[1];      /* message text */<br>};<br></pre>
<br>
El campo mtype representa el tipo demensaje &nbsp;y es un n&uacute;mero
estrictamente positivo: la correspondencia entre n&uacute;meros y tipos
de mensajes &nbsp;ha de ser establecida a priori y forma parte de la
definici&oacute;n del protocolo. &nbsp;El segundo campo representa el
contenido del mensaje, pero no ha de ser considerado en la
declaraci&oacute;n. La estructura <tt> msgbuf </tt>puede ser redefinida
&nbsp;as&iacute;que puede contener datos complejos; por ejemplo, es
posible escribir: <br>
<pre class="code">struct message {<br>        long mtype;         /* message type */<br>        long sender;        /* sender id */<br>        long receiver;      /* receiver id */<br>        struct info data;   /* message content */<br>        ...<br>};<br></pre>
<br>
Antes de enfrentarnos a los argumentos estrictamente relacionados con
la teor&iacute;a de la concurrencia debemos considerar crear el
prototipo de un mensaje con el tama&ntilde;o m&aacute;ximo, fijado a
&nbsp;4056 bytes. Obviamente siempre es posible recompilar el kernel
incrementando esta dimensi&oacute;n, &nbsp;pero hace que la
aplicaci&oacute;n no sea portable (es m&aacute;s, &eacute;ste ha sido
fijado para garantizar un buen rendimiento e incrementarlo no va a ser
buena idea)<br>
<br>
<p>Para crear una nueva cola un proceso debe llamar a la funci&oacute;n <tt>
msgget()</tt> </p>
<pre class="code">int msgget(key_t key, int msgflg)<br></pre>
que recibe como argumente una llave&nbsp; IPC y algunos flags
(banderas), &nbsp;que por ahora pueden ser puestos a:
<pre class="code">IPC_CREAT | 0660<br></pre>
(crea la cola, si no existe, y da acceso al propietario y grupo de
usuarios), y este devuelve el identificador de la cola.
<p>Como en art&iacute;culos anteriores asumiremos que no han aparecido
errores, &nbsp;as&iacute; que podemos simplificar el c&oacute;digo,
incluso en un futuro art&iacute;culo hablaremos sobre c&oacute;digo IPC
seguro.</p>
<p>Para enviar un mensaje a una cola de la cual conozcamos us
identificador, tenemos que utilizar la funci&oacute;n <tt> msgsnd()</tt> </p>
<pre class="code">int msgsnd(int msqid, struct msgbuf *msgp, int msgsz, int msgflg)<br></pre>
<br>
donde <tt> msqid </tt>es el identificador de la cola, <tt> msgp </tt>es
un puntero al mensaje que tenemos que enviar (cuyo tipo es aqu&iacute;
definido como <tt> struct msgbuf</tt> pero que es el tipo que
redefinimos), <tt> msgsz </tt>la dimensi&oacute;n del mensaje
(excluyendo la longitud del tipo <tt> mtype </tt>que tiene la longitud
de un long, &nbsp;que es normalmente de 4 bytes) y <tt> msgflg </tt>un
flag&nbsp; relativo a la pol&iacute;tica de espera. La longitud del
mensaje puede ser facilmente encontrada como <br>
<pre class="code">length = sizeof(struct message) - sizeof(long);<br></pre>
<br>
mientras la pol&iacute;tica de espera se refiere al caso de la cola
completa: si <tt> msgflg </tt>es puesta a IPC_NOWAIT el proceso emisor
no esperar&aacute; mientras no haya alg&uacute;n espacio disponible y
saldr&aacute; con alg&uacute;n c&oacute;digo de error ; hablaremos sobre
cada caso cuando hablemos del tratamiento de errores.<br>
<br>
<p>Para leer los mensjaes contenidos en una cola utilizamos la llamada
del sistema <tt> msgrcv()</tt></p>
<p class="code"> int msgrcv(int msqid, struct msgbuf *msgp, int msgsz,
long mtype, int msgflg) </p>
<br>
donde el puntero <tt> msgp </tt>identifica el b&uacute;ffer donde
copiaremos el mensaje leido de la cola y&nbsp; <tt> mtype </tt> identica
el subconjunto de mensajes&nbsp; que queremos considerar.
<p>Se puede eliminar una cola a trav&eacute;s del uso de la primitiva <tt>
msgctl() </tt> con el flag IPC_RMID <br>
</p>
<pre class="code">msgctl(qid, IPC_RMID, 0)<br></pre>
<br>
Probemos lo que he dicho con un programa simple que crea una cola de
mensajes, env&iacute;a un mensaje y lo lee; controlaremos de esta manera
el correcto funcionamiento del sistema.<br>
<pre class="code">#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;linux/ipc.h&gt;<br>#include &lt;linux/msg.h&gt;<br><br>/* Redefines the struct msgbuf */<br>typedef struct mymsgbuf<br>{<br>  long mtype;<br>  int int_num;<br>  float float_num;<br>  char ch;<br>} mess_t;<br><br>int main()<br>{<br>  int qid;<br>  key_t msgkey;<br><br>  mess_t sent;<br>  mess_t received;<br><br>  int length;<br><br>  /* Initializes the seed of the pseudo-random number generator */<br>  srand (time (0));<br><br>  /* Length of the message */<br>  length = sizeof(mess_t) - sizeof(long);<br><br>  msgkey = ftok(".",'m');<br><br>  /* Creates the queue*/<br>  qid = msgget(msgkey, IPC_CREAT | 0660);<br><br>  printf("QID = %d\n", qid);<br><br>  /* Builds a message */<br>  sent.mtype = 1;<br>  sent.int_num = rand();<br>  sent.float_num = (float)(rand())/3;<br>  sent.ch = 'f';<br><br>  /* Sends the message */<br>  msgsnd(qid, &amp;sent, length, 0);<br>  printf("MESSAGE SENT...\n");<br><br>  /* Receives the message */<br>  msgrcv(qid, &amp;received, length, sent.mtype, 0);<br>  printf("MESSAGE RECEIVED...\n");<br><br>  /* Controls that received and sent messages are equal */<br>  printf("Integer number = %d (sent %d) -- ", received.int_num, <br>         sent.int_num);<br>  if(received.int_num == sent.int_num) printf(" OK\n");<br>  else printf("ERROR\n");<br><br>  printf("Float numero = %f (sent %f) -- ", received.float_num, <br>         sent.float_num);<br>  if(received.float_num == sent.float_num) printf(" OK\n");<br>  else printf("ERROR\n");<br><br>  printf("Char = %c (sent %c) -- ", received.ch, sent.ch);<br>  if(received.ch == sent.ch) printf(" OK\n");<br>  else printf("ERROR\n");<br><br>  /* Destroys the queue */<br>  msgctl(qid, IPC_RMID, 0);<br>}<br></pre>
<br>
Ahora podemos crear dos procesos y permitirles comunicarse a
trav&eacute;s de una cola de mensajes; un poco sobre los conceptos de
bifurcaci&oacute;n de procesos: el valor de todas las variables
asignadas por el proceso padre es tomado por esos &nbsp;de los procesos
hijos (copia de memoria). Esto significa que debemos crear la cola antes
de bifurcar (fork) el proceso padre y el hijo conocer&aacute; el
identificador de cola para poder as&iacute; acceder a &eacute;l.<br>
<br>
<p>El c&oacute;digo que he escrito crea una cola usada por el proceso
hijo y env&iacute;a sus datos al proceso padre: el hijo generas
n&uacute;meros aleatorios,     los env&iacute;a al padre y ambos
imprimen en la salida est&aacute;ndar.</p>
<pre class="code">#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;linux/ipc.h&gt;<br>#include &lt;linux/msg.h&gt;<br>#include &lt;sys/types.h&gt;<br><br>/* Redefines the message structure */<br>typedef struct mymsgbuf<br>{<br>  long mtype;<br>  int num;<br>} mess_t;<br><br>int main()<br>{<br>  int qid;<br>  key_t msgkey;<br>  pid_t pid;<br><br>  mess_t buf;<br><br>  int length;<br>  int cont;<br><br>  length = sizeof(mess_t) - sizeof(long);<br><br>  msgkey = ftok(".",'m');<br><br>  qid = msgget(msgkey, IPC_CREAT | 0660);<br><br>  if(!(pid = fork())){<br>    printf("SON - QID = %d\n", qid);<br><br>    srand (time (0));<br><br>    for(cont = 0; cont &lt; 10; cont++){<br>      sleep (rand()%4);<br>      buf.mtype = 1;<br>      buf.num = rand()%100;<br>      msgsnd(qid, &amp;buf, length, 0);<br>      printf("SON - MESSAGE NUMBER %d: %d\n", cont+1, buf.num);<br>    }<br><br>    return 0;<br>  }<br><br>  printf("FATHER - QID = %d\n", qid);<br><br>  for(cont = 0; cont &lt; 10; cont++){<br>    sleep (rand()%4);<br>    msgrcv(qid, &amp;buf, length, 1, 0);<br>    printf("FATHER - MESSAGE NUMBER %d: %d\n", cont+1, buf.num);<br>  }<br><br>  msgctl(qid, IPC_RMID, 0);<br><br>  return 0;<br>}<br></pre>
<br>
Hemos creado as&iacute; dos procesos, que pueden colaborar de forma
elemental a trav&eacute;s de un sistema de intercambio de mensajes. No
necesitamos un protocolo (formal) porque las operaciones realizadas son
muy sencillas; en el pr&oacute;ximo art&iacute;culo hablaremos denuevo
sobre colas de mensajes y sobre manejar diferentes tipos de mensajes.
Trabajaremos m&aacute;s a&uacute;n sobre el protocolo de
comunicaci&oacute;n para poder comenzar a contruir nuestro gran proyecto
IPC (un simulador de selector telef&oacute;nico).<br>
<br>
<A NAME="287lfindex4">&nbsp;</A>
<H3>Lecturas Recomendadas</H3>

<ul>
  <li>Silberschatz, Galvin, Gagne, <b>Operating System Concepts -
Sixth Edition</b>, Wiley&amp;Sons, 2001</li>
  <li>Tanenbaum, WoodHull, <b>Operating Systems: Design and
Implementation - Second Edition</b>, Prentice Hall, 2000</li>
  <li>Stallings, <b>Operating Systems - Fourth Edition</b>, Prentice
Hall, 2002</li>
  <li>Bovet, Cesati, <b>Understanding the Linux Kernel</b>, O'Reilly,
2000</li>
  <li>The Linux Programmer's Guide: <a
 href="http://www.tldp.org/LDP/lpg/index.html">http://www.tldp.org/LDP/lpg/index.html</a></li>
  <li>Linux Kernel 2.4 Internals <a
 href="http://www.tldp.org/LDP/lki/lki-5.html">http://www.tldp.org/LDP/lki/lki-5.html</a></li>
  <li>Web page of the #kernelnewbies IRC channel <a
 href="http://www.kernelnewbies.org/">http://www.kernelnewbies.org/</a></li>
  <li>The linux-kernel mailing list FAQ <a
 href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a></li>
</ul>



<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1" summary="tb-button-outerpart">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1" summary="tb-button">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=287"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Leonardo Giordani, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#9999AA">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE summary="translators">
  <tr><td><font size="2">it --&gt; -- : Leonardo Giordani <small>&lt;leo.giordani(at)at.libero.it&gt;</small></font></td></tr>
  <tr><td><font size="2">it --&gt; en: Leonardo Giordani &lt;leo.giordani(at)at.libero.it&gt;</font></td></tr>
  <tr><td><font size="2">en --&gt; es: Carlos Gonz&aacute;lez P&eacute;rez &lt;charly(at)galpon.org&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2003-07-21, generated by lfparser version 2.34</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
