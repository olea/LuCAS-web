<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.34">
 <META NAME="LFCATEGORY" CONTENT="SystemAdministration">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf285, SystemAdministration: Accessing PostgreSQL through JDBC via a Java SSL tunnel</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 .mark  { background-color:#e6e6ff }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Chianglin Ng
 =LF=CAT___: SystemAdministration
 =LF=TITLE_: Accessing PostgreSQL through JDBC via a Java SSL tunnel
 =LF=NUMBER: 285
 =LF=ANAME_: article285.html
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top"><A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="2">Hogar</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Mapa</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Indice</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="2">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="190" summary="about the author">
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4 summary="pda download"> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<img src="../../common/images/ChianglinNg.jpg" alt=
"[Photo of the Author]" width="180" height="124">
<BR>por  Chianglin Ng <br> <small>&lt;chglin(at)singnet.com.sg&gt;</small>
<BR><BR>
<I>Sobre el autor:</I><BR>
<!-- aboutauthor_start -->
<p>Vivo en Singapur, un pa&iacute;s moderno multiracial localizado en
el Sudeste de Asia. He estado usando linux por los &uacute;ltimos dos
a&ntilde;os aproximadamente. La primera distribuci&oacute;n con la
que empez&eacute; fue redhat 6.2. Hoy uso redhat 8.0 en casa.
Tambi&eacute; uso debian woody ocasionalmente.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED TO es -->
<BR><BR><I>Taducido al espa&ntilde;ol por:</I><BR>
Juan Carlos Piedra <small>&lt;jcpiedra(at)troglo.org&gt;</small>
<br>
<!--
 =LF=TRANSTO=es: Juan Carlos Piedra
-->
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#285lfindex0">Introducci&oacute;n
</A></LI>
  <LI><A HREF="#285lfindex1">Configurando PostgreSQL para JDBC en redhat 8.0</A></LI>
  <LI><A HREF="#285lfindex2">Dise&ntilde;ando el t&uacute;nel SSL de Java</A></LI>
  <LI><A HREF="#285lfindex3">Creando almacenes de llaves, llaves y certificados</A></LI>
  <LI><A HREF="#285lfindex4">Implementando las clases</A></LI>
  <LI><A HREF="#285lfindex5">Ejecuci&oacute;n de los proxies y pruebas</A></LI>
  <LI><A HREF="#285lfindex6">Una nota sobre seguridad</A></LI>
  <LI><A HREF="#285lfindex7">Conclusi&oacute;n</A></LI>
  <LI><A HREF="#285lfindex8">Enlaces &Uacute;tiles</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=285">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>Accessing PostgreSQL through JDBC via a Java SSL tunnel</H2>
 <img src="../../common/images/article285/HeaderImage.jpg" alt=
"[Illustration]" hspace="10" width="450" height="256">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<!-- articleabstract_start -->


Este art&iacute;culo muestra c&oacute;mo configurar accesso JDBC
para PostgreSQL en redhat 8.0 y c&oacute;mo crear un t&uacute;nel SSL
usando las Extensiones de Sockets Seguros Java de Sun, para
habilitar el acceso seguro a una base de datos postgres remota.


<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- BODY OF THE ARTICLE -->


<A NAME="285lfindex0">&nbsp;</A>
<H2>Introducci&oacute;n<br>
</H2>

Mientras aprend&iacute;a sobre postgres y JDBC, encontr&eacute;
el problema de accesar una base de datos remota de forma segura
via JDBC.&nbsp; &nbsp;<br>

Las conexiones JDBC no son cifradas y un "network sniffer" (un
programa para interceptar datos de conexiones en la red) puede recoger
informaci&oacute;n sensitiva f&aacute;cilmente. Hay muchas
maneras para prevenir esto. El manual de postgres revela que uno
puede compilar postgres con soporte para SSL o usar t&uacute;neles
SSH.<br><br>

En lugar de utilizar alguno de esos m&eacute;todos, me gustar&iacute;a
usar java propiamente. El JDK 1.4.1 Java de Sun incluye las extensiones
java para sockets seguros, los cuales pueden ser usados para crear
conexiones SSL. El JDK tambi&eacute;n provee una herramienta de llaves
para la creaci&oacute;n de llaves p&uacute;blicas y privadas,
certificados digitales y almacenes de llaves. Por lo tanto, es
relativamente
f&aacute;cil construir un par de servidores proxy basados en java que
puedan reenviar la informaci&oacute;n de la red de forma segura.

<A NAME="285lfindex1">&nbsp;</A>
<H2>Configurando PostgreSQL para JDBC en redhat 8.0</H2>


<p>Las instrucciones dadas aqu&iacute; son para redhat 8.0 pero
los principios generales son aplicables a otras distribuciones.
Usted necesita instalar PostgreSQL y los manejadores correspondientes
de JDBC si no lo ha hecho todav&iacute;a. En redhat 8, ud. puede
usar el comando rpm e instalar el JDK 1.4.1 de Sun.  El JDK de Sun
viene con algunas restricciones criptogr&aacute;ficas debido a las
regulaciones de exportaci&oacute;n de los Estados Unidos. Para
conseguir criptograf&iacute;a avanzada puede descargar los ficheros
de pol&iacute;ticas del JCE (en ingl&eacute;s: Java Cryptographic
Extensions, Extensiones de Criptograf&iacute;a Java). Visite <a href=
"http://www.javasoft.com">el sitio web Java de Sun</a> para
m&aacute;s informaci&oacute;n.</p>

<p>He instalado el JDK 1.4.1 en /opt y configurado la variable de
ambiente JAVA_HOME para apuntar a mi directorio JDK.
Tambi&eacute;n he actualizado mi trayectoria (PATH) para
incluir el directorio que contiene los ejecutables de JDK. Las
l&iacute;neas siguientes fueron a&ntilde;adidas a mi fichero
.bash_profile.&nbsp;</p>

<p class="code">JAVA_HOME = /opt/j2sdk1.4.1_01<br>
PATH = /opt/j2sdk1.4.1_01/bin:$PATH<br>
export JAVA_HOME PATH</p>

<p>Los limitados ficheros de pol&iacute;ticas de cifrado que vienen
con el JDK de Sun han sido reemplazados con los ficheros ilimitados
en el JCE.  Para habilitar java para que encuentre los manejadores
para postgres, copi&eacute; los manejadores postgres-jdbc en mi
directorio de extensiones de Java (/opt/j2sdk1.4.1_01/jre/lib/ext).
En redhat 8.0, los manejadores postgres-jdbc est&aacute;n localizados
en /usr/share/pgsql.</p>

<p>Si esta es su primera instalaci&oacute;n postgresql, usted
tendr&aacute;
que crear una nueva base de datos y una nueva cuenta de usuario.
Primero, utilice el comando "su" para obtener acceso al super usuario
(root)
y d&eacute; inicio al servicio postgres. Luego c&aacute;mbiese a la cuenta
de administraci&oacute;n por defecto de postgres.</p>

<p class="code">su root<br>
password:******<br>
[root#localhost]#/etc/init.d/postgresql start<br>
[root#localhost]# Starting postgresql service: [ OK ]<br>
[root#localhost]# su postgres<br>
[bash]$</p>

<p>Hay que crear una nueva cuenta de usuario y una
nueva base de datos de postgres.</p>

<p class="code">[bash]$:createuser<br>
Enter name of user to add: chianglin<br>
Shall the new user be allowed to create databases? (y/n) y<br>
Shall the new user be allowed to create more new users? (y/n)
y<br>
CREATE USER<br>
[bash]$createdb chianglin<br>
CREATE DATABASE</p>

<p>He creado una nueva cuenta de administrador de postgres que
corresponde a mi cuenta de usuario de linux y una base de datos
con el mismo nombre. Cuando ud. ejecuta la herramienta psql,
tratar&aacute; de conectarse a una base de datos que corresponde
al nombre la cuenta de usuario actual. &nbsp; Refi&eacute;rase al
manual postgres para m&aacute;s detalles sobre la administraci&oacute;n
de cuentas y bases de datos.  Para configurar una clave de acceso para
la cuenta reci&eacute;n creada, puede ejecutar psql e invocar el
comando ALTER USER.  Ingrese al sistema usando su cuenta de usuario
normal e inicie psql.  Escriba el siguiente comando&nbsp;</p>

<p class="code">ALTER USER chianglin WITH PASSWORD 'test1234'
;</p>

<p>Para permitir conexiones tcp/ip, ud. necesita editar el fichero
postgresql.conf y habilitar la opci&oacute;n tcpip_socket. En
redhat 8, este fichero est&aacute; localizado en /var/lib/pgsql/data.
Como super usuario (root) configure lo siguiente:</p>

<p class="code">tcpip_socket=true</p>

<p>El &uacute;ltimo paso es editar el fichero pg_hba.conf. Este fichero
especifica los ordenadores que pueden conectarse a la base de
datos postgres. He a&ntilde;adido una &uacute;nica entrada para
un ordenador especificando la direcci&oacute;n de lazo cerrado
(loopback) de mi pc, usando autenticaci&oacute;n con
contrase&ntilde;a.  Usted necesita cambiarse al super usuario para
editar este fichero&nbsp;.</p>

<p class="code">host sameuser 127.0.0.1 255.255.255.255
password</p>

<p>Reinicie postgres y todos los cambios de configuraci&oacute;n
se har&aacute;n efectivos.<br><br></p>

<A NAME="285lfindex2">&nbsp;</A>
<H2>Dise&ntilde;ando el t&uacute;nel SSL de Java</H2>


<p>Luego del paso anterior, postgres est&aacute; listo para aceptar
conexiones JDBC locales no seguras.  Para accesar postgres de
forma segura remotamente, alguna forma de repetici&oacute;n es
requerida.</p>

<p>El siguiente diagrama muestra c&oacute;mo esta repetici&oacute;n
deber&iacute;a funcionar.</p>

<img src=
"../../common/images/article285/RelayServerClientFig1.jpg" alt=
"La figura Uno muestra como los servidores proxy deber&iacute;an
funcionar" width=
"600" height="416">

<p>La aplicaci&oacute;n JDBC se conectar&aacute; al proxy cliente,
el cual enviar&aacute; todos los datos a trav&eacute;s de la
conexi&oacute;n SSL a nuestro proxy servidor remoto. El
proxy servidor sencillamente remitir&aacute; todos los paquetes
hacia postgres y enviar&aacute; respuestas a trav&eacute;s de
la conexi&oacute;n SSL de vuelta al proxy cliente, el cual a su vez
reenviar&aacute; los datos a la aplicaci&oacute;n JDBC.  Este proceso
ser&aacute; enteramente transparente para la aplicaci&oacute;n JDBC.</p>

<p>En el diagrama se observa que desde el lado del servidor,
existir&aacute; la necesidad de obtener los datos del flujo
entrante seguro y enviarlos al flujo de salida local que se
encuentra conectado al servidor.  Lo contrario tambi&eacute;n
es cierto, es necesario obtener los datos del flujo entrante local
conectado al servidor y enviarlos a flujo de salida seguro. El
mismo concepto tambi&eacute;n aplica para el cliente. Para
implementar esto se pueden utilizar subprocesos. El siguiente
diagrama lo muestra<br></p>


<img src=
"../../common/images/article285/RelayServerClientFig2.jpg" alt=
"El diagrama muestra c&oacute;mo los 4 subprocesos repetidores trabajan"
width="600"
height="416">

<A NAME="285lfindex3">&nbsp;</A>
<H2>Creando almacenes de llaves, llaves y certificados</H2>


<p>Una conexi&oacute;n SSL usualmente require autenticaci&oacute;n
del servidor. La autenticaci&oacute;n del cliente es opcional.  En este
caso, prefiero tener ambas autenticaciones, servidor y cliente. Esto
significa que tengo que crear certificados y llaves para el cliente y para
el servidor. Hago esto usando la herramienta para llaves (keytool)
incluida en el JDK de Java.  Tendr&eacute; un par de almacenes de
llaves (keystores), uno en el cliente y otro en el servidor.
El primer almac&eacute;n de llaves es necesario para guardar la llave
privada
de el servidor y el segundo para almacenar los certificados en los
que conf&iacute;a el servidor.<br><br>
Lo siguiente muestra la creaci&oacute;n de un almac&eacute;n de llaves,
una llave privada y un certificado p&uacute;blico firmado para el
servidor.</p>

<p class="code">keytool -genkey -alias serverprivate -keystore
servestore -keyalg rsa -keysize 2048<br>
<br>
Enter keystore password: storepass1<br>
What is your first and last name?<br>
[Unknown]: ServerMachine<br>

What is the name of your organizational unit?<br>
[Unknown]: ServerOrg<br>
What is the name of your organization?<br>
[Unknown]: ServerOrg<br>
What is the name of your City or Locality?<br>
[Unknown]: Singapore<br>

What is the name of your State or Province?<br>
[Unknown]: Singapore<br>
What is the two-letter country code for this unit?<br>
[Unknown]: SG<br>
Is CN=ServerMachine, OU=ServerOrg, O=ServerOrg, L=Singapore,
ST=Singapore, C= [no]: yes<br>
Enter key password for &lt;serverprivate&gt;<br>

(RETURN if same as keystore password): prikeypass0
&lt;/serverprivate&gt;</p>

<p>Observe que las contrase&ntilde;as son requeridas dos veces.
La primera es para el almac&eacute;n de llaves y la segunda
para la llave privada.  Una vez hecho esto, se exporta en un
fichero el certificado p&uacute;blico del servidor que ser&aacute;
utilizado por el cliente para autenticar al servidor.</p>

<p class="code">keytool -export -alias serverprivate -keystore
-rfc servestore -file server.cer</p>

<p>Lo anterior exportar&aacute; el certificado p&uacute;blico
firmado del servidor hacia el fichero server.cer.  Desde
el cliente importe este fichero en el almac&eacute;n de
llaves que guarda todos los certificados p&uacute;blicos en
los que el cliente conf&iacute;a.</p>

<p class="code">keytool -import -alias trustservercert -file
server.cer -keystore clienttruststore</p>

<p>El comando anterior importar&aacute; el certificado p&uacute;blico
del servidor en un almac&eacute;n de llaves llamado clienttruststore.
Si este almac&eacute;n no existe aun, ser&aacute; creado y ud.
requerir&aacute; ingresar una contrase&ntilde;a para el
almac&eacute;n.</p>

<p>En este punto, su sistema ser&aacute; capaz de facilitar una
conexi&oacute;n SSL que provee la autenticaci&oacute;n del
servidor.<br>
Debido a que tambi&eacute;n quiero autenticar al cliente,
necesitar&eacute;
crear una llave privada y otra p&uacute;blica para el cliente en un
nuevo almac&eacute;n, exportar el certificado p&uacute;blico del
cliente, e importarlo en un nuevo almac&eacute;n de llaves en
el servidor.</p>

<p>Al final de este proceso, deben existir dos almacenes de llaves
en el servidor, uno contiene su llave privada y el otro contiene
los certificados fiables.  Lo mismo ocurre en
el cliente.<br></p>

<p>Para poder ejecutar el c&oacute;digo de ejemplo que doy m&aacute;s
adelante, es esencial que ud. utilice la misma contrase&ntilde;a para
cada almac&eacute;n de llaves que crea en cada m&aacute;quina.
Esto significa que los dos almacenes de llaves en el servidor deben tener
la misma contrase&ntilde;a. Lo mismo aplica para los dos almacenes
de llaves en el cliente.&nbsp;</p>


Puede referirse a la <a href=
"http://java.sun.com/j2se/1.4/docs/tooldocs/solaris/keytool.html">
documentaci&oacute;n de Sun</a> para aprender m&aacute;s sobre el uso
de la herramienta para llaves (keytool).



<A NAME="285lfindex4">&nbsp;</A>
<H2>Implementando las clases</H2>


<p>Mis clases utilizar&aacute;n las extensiones de Sockets Seguros
Java de Sun (Java Secured Socket extensions, en ingl&eacute;s).
La gu&iacute;a de referencia para JSSE de Sun est&aacute; disponible en
 <a href=

"http://java.sun.com/j2se/1.4.1/docs/guide/security/jsse/JSSERefGuide.html">

http://java.sun.com/j2se/1.4.1/docs/guide/security/jsse/JSSERefGuide.html</a>.
Para una conexi&oacute;n SSL, ud. necesita una instancia del objeto
SSLContext
suministrado por JSSE. Inicialice SSLContext con las opciones que desee y
obtendr&aacute; una clase SocketFactory segura. La clase SocketFactory
puede
ser usada para crear los sockets SSL.</p>

<p>En mi implementaci&oacute;n, existir&aacute; una clase proxy
para el servidor y una para el cliente, con el fin de construir el
t&uacute;nel SSL. Ya que ambos utilizar&aacute;n una conexi&oacute;n
SSL, deben heredar de una clase SSLConnection base.  Esta clase
ser&aacute; responsable de configurar el SSLContext inicial que
ser&aacute; usado para el proxy del cliente y el del servidor.
Finalmente, necesitamos implementar otra clase para los subprocesos
repetidores. En total son 4 clases.<br>
Lo siguiente muestra la secci&oacute;n de c&oacute;digo perteneciente
a la clase SSLConnection<br></p>

<p><b>Secci&oacute;n de C&oacute;digo de la clase SSLConnection</b><br>
</p>

<p class="code">/* initKeyStore m&eacute;todo para cargar los almacenes
de llaves que contienen la llave privada y los certificados fiables
*/<br>
<br>
public void initKeyStores(String key , String trust , char[]
storepass)<br>
{<br>
&nbsp; &nbsp; &nbsp; // mykey contiene mi propio certificado y llave
privada,
mytrust contiene todos los certificados de confianza<br>
&nbsp; try {<br>
&nbsp; &nbsp; &nbsp; //obtener instancias del almac&eacute;n de llaves JKS
de Sun<br>
&nbsp; &nbsp; &nbsp;mykey = KeyStore.getInstance("JKS" ,
"SUN");<br>
&nbsp; &nbsp; &nbsp;mytrust = KeyStore.getInstance("JKS",
"SUN");<br>
<br>
&nbsp; &nbsp; //cargar los almacenes de llaves<br>
&nbsp; &nbsp;mykey.load(new
FileInputStream(key)&nbsp;&nbsp;,storepass);<br>
&nbsp; &nbsp;mytrust.load(new FileInputStream(trust) ,storepass
);<br>
&nbsp; &nbsp; }<br>
&nbsp;catch(Exception e) {<br>
&nbsp; &nbsp; System.err.println(e.getMessage());<br>
&nbsp; &nbsp; System.exit(1);<br>
&nbsp; &nbsp; }<br>
}<br>
<br>
/* initSSLContext  m&eacute;todo para obtener un SSLContext e
inicializarlo con el protocolo SSL y los datos de los almacenes de llaves
*/<br>
public void initSSLContext(char[] storepass , char[] keypass)
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;try{<br>
&nbsp; &nbsp; //obtener un SSLContext del JSSE de Sun<br>
&nbsp; &nbsp; ctx = SSLContext.getInstance("TLSv1" , "SunJSSE")
;<br>
&nbsp; &nbsp; //inicializar los almacenes de llaves<br>
&nbsp;&nbsp;&nbsp; initKeyStores(key , trust , storepass) ;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;//Crear la llave y las trust manager
factories para manejar los certificados<br>
 &nbsp;&nbsp;&nbsp;&nbsp;//en la llave y los almacenes de confianza<br>
&nbsp;&nbsp;&nbsp;&nbsp;TrustManagerFactory tmf =
TrustManagerFactory.getInstance("SunX509" ,<br>
&nbsp;&nbsp;&nbsp;&nbsp;"SunJSSE");<br>
&nbsp;&nbsp;&nbsp;&nbsp;tmf.init(mytrust);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;KeyManagerFactory kmf =
KeyManagerFactory.getInstance("SunX509" ,<br>
&nbsp;&nbsp;&nbsp;&nbsp;"SunJSSE");<br>
&nbsp;&nbsp;&nbsp;&nbsp;kmf.init(mykey , keypass);<br>
<br>
&nbsp; &nbsp; //Inicializar el SSLContext con los datos de los almacenes
de llaves<br>
&nbsp;&nbsp;&nbsp;&nbsp;ctx.init(kmf.getKeyManagers() ,
tmf.getTrustManagers() ,null) ;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;catch(Exception e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(e.getMessage());<br>
&nbsp;&nbsp;&nbsp;&nbsp;System.exit(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
<br>
}<br>
<br>
</p>

<p>El m&eacute;todo initSSLContext crea un SSLContext
del JSSE de Sun. Durante la creaci&oacute;n, ud. puede especificar el
protocolo SSL a utilizar. En este caso, he escogido usar TLS
(Transport Layer Security) versi&oacute;n 1. Una vez que
una instancia del SSLContext se obtiene, se inicializa con los
datos de los almacenes de llaves.<br></p>

<p><br>
La siguiente secci&oacute;n de c&oacute;digo pertenece a la
clase SSLRelayServer que funcionar&aacute; en la misma
m&aacute;quina que la base de datos postgres. Esta clase
retransmitir&aacute; toda la informaci&oacute;n del cliente
desde la conexi&oacute;n SSL hacia postgres y viceversa.<br>
<br>
<b>Clase SSLRelayServer</b><br></p>


<p class="code">/* initSSLServerSocket m&eacute;todo que obtendr&aacute;
el SSLContext de su super clase SSLConnection. Luego crear&aacute; un
objeto
SSLServerSocketFactory que ser&aacute; utilizado para crear un
SSLServerSocket. */<br>
<br>
public void initSSLServerSocket(int localport) {<br>
&nbsp; &nbsp; &nbsp; try{<br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//obtener
la f&aacute;brica de sockets ssl<br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SSLServerSocketFactory
ssf = (getMySSLContext()).getServerSocketFactory();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//crear el socket ssl<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;ss
= ssf.createServerSocket(localport);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;
((SSLServerSocket)ss).setNeedClientAuth(true);<br>
&nbsp; &nbsp; &nbsp; }<br>
&nbsp; &nbsp;catch(Exception e) {<br>
&nbsp;&nbsp;&nbsp; &nbsp;
System.err.println(e.getMessage());<br>
&nbsp;&nbsp; &nbsp;&nbsp; System.exit(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;}<br>
<br>
 // comenzar a escuchar en el SSLServerSocket y esperar por conexiones
entrantes de clientes<br>
public void startListen(int localport , int destport) {<br>
<br>
&nbsp;&nbsp;&nbsp; System.out.println("SSLRelay server started
at " + (new Date()) + "&nbsp;&nbsp;" +<br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"listening
on port " + localport + "&nbsp;&nbsp;" +&nbsp; "relaying to
port " + destport );<br>
<br>
&nbsp;while(true) {<br>
&nbsp;&nbsp;&nbsp; &nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; SSLSocket incoming
= (SSLSocket) ss.accept();<br>
&nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;incoming.setSoTimeout(10*60*1000); // tiempo de expiraci&oacute;n en
10 minutos<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
System.out.println((new Date() ) + " connection from " +
incoming );<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; createHandlers(incoming,
destport); // crear 2 nuevos subprocesos para manejar las conexiones
entrantes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;catch(IOException e ) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(e);<br>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp; &nbsp; }<br>
}<br>
</p>

<p><br>La clase RelayApp, el proxy cliente, es similar a SSLRelayServer.
Hereda de SSLConnection y usa 2 subprocesos para hacer el
reenv&iacute;o. La diferencia consiste en que crea un SSLSocket
para conectarse al servidor remoto en lugar de un SSLServerSocket
para recibir conexiones entrantes.  La &uacute;ltima clase que
necesitamos es el subproceso que hace el reenv&iacute;o efectivo.
Sencillamente lee los datos de un flujo de entrada y los escribe a un
flujo de salida.</p>

El c&oacute;digo completo para las cuatro clases est&aacute; disponible
<a
href="../../common/src/article285/example285-0.1.tar.gz">aqu&iacute;
(example285-0.1.tar.gz).</a> &nbsp;

<A NAME="285lfindex5">&nbsp;</A>
<H2>Ejecuci&oacute;n de los proxies y pruebas</H2>


<p>En el cliente, ud. necesitar&aacute; estos ficheros
SSLConnection.java, RelayIntoOut.java y RelayApp.java.
En el servidor, ud. necesita SSLRelayServer.java, RelayIntoOut.java y
SSLConnection.java. P&oacute;ngalos juntos en un directorio. Para
compilar el proxy cliente, ejecute el siguiente comando.</p>

<p class="code">javac RelayApp.java</p>

<p>Para compilar el proxy servidor, ejecute lo siguiente</p>

<p class="code">javac SSLRelayServer.java</p>

<p>En nuestra m&aacute;quina servidor ejecutando postgres, se
puede iniciar SSLRelayServer con 6 par&aacute;metros en la l&iacute;nea
de comandos. Estos son</p>

<ol>
<li>Trayectoria completa hacia el almac&eacute;n de llaves que
contiene la llave privada del servidor creada anteriormente
con la herramienta de llaves (keytool)</li>

<li>Trayectoria completa a su almac&eacute;n de llaves en el
servidor que contiene los certificados de clientes fiables</li>

<li>Contrase&ntilde;a para sus almacenes de llaves</li>

<li>Contrase&ntilde;a para la llave privada de su servidor</li>

<li>Puerto en que este servidor de repetici&oacute;n escucha</li>

<li>Puerto en el cual reenviar datos ( puerto del servidor,
en este caso postgresql tiene por defecto el 5432)</li>

</ol>

<p class="code">java SSLRelayServer servestore trustclientcert
storepass1 prikeypass0 2001 5432</p>

<p>Una vez que el proxy servidor est&aacute; en ejecuci&oacute;n,
ud. puede dar inicio al proxy cliente. El proxy cliente recibe 7
par&aacute;metros, los adicionales son el nombre del servidor o
direcci&oacute;n IP del servidor al que se est&aacute; conectando.
Los argumentos son</p>

<ol>
<li>Trayectoria completa al almac&eacute;n de llaves que contiene
la llave privada del cliente</li>

<li>Trayectoria completa al almac&eacute;n de llaves del cliente
que contiene los certificados fiables del servidor.</li>

<li>Contrase&ntilde;a de su almac&eacute;n de llaves</li>

<li>Contrase&ntilde;a de su llave privada del cliente</li>

<li>Nombre del servidor o direcci&oacute;n IP</li>

<li>N&uacute;mero de puerto del servidor de repetici&oacute;n
destinatario (en el ejemplo arriba, es 2001)</li>

<li>N&uacute;mero de puerto de la aplicaci&oacute;n a la cual
se le hace la repetici&oacute;n, en este caso postgresql, debe
usar el 5432</li>

</ol>

<p class="code">java RelayApp clientstore trustservercert
clistorepass1 cliprikeypass0 localhost 2001 5432</p>

<p>Una vez que el t&uacute;nel SSL es establecido, ud. puede
dar inicio a su aplicaci&oacute;n JDBC y conectarse a postgres
de la manera usual.  El proceso de reenv&iacute;o ser&aacute;
transparente para su aplicaci&oacute;n JDBC.  Este art&iacute;culo
ya es muy largo y no dar&eacute; ejemplos para una aplicaci&oacute;n
JDBC aqu&iacute;. El manual de postgres y la gu&iacute;a de aprendizaje
de Sun contienen muchos ejemplos sobre JDBC.</p>

<p>Si ud. quiere ejecutar todo en una &uacute;nica m&aacute;quina
durante el per&iacute;odo de pruebas, lo puede hacer.  Hay dos
maneras para hacerlo, una es configurar su base de datos postgres
para que escuche en un puerto diferente, o puede cambiar el puerto
que RelayApp usa para enviar datos a otro puerto diferente.  Puedo usar lo
&uacute;ltimo para ilustrar una prueba simple. Primero, cierre
RelayApp, necesitar&aacute; enviarle una se&ntilde;al de
terminaci&oacute;n
presionando [ctrl] c.  Utilize el mismo m&eacute;todo para detener el
proxy SSLRelayServer.</p>

<p>De inicio a RelayApp de nuevo con el siguiente comando. El
&uacute;nico cambio es el n&uacute;mero de puerto, ahora
es 2002.</p>

<p class="code">java RelayApp clientstore trustservercert
clistorepass1 cliprikeypass0 localhost 2001 2002</p>

<p>La mejor aplicaci&oacute;n que se puede usar para pruebas
es el mismo psql. Enviaremos todo el tr&aacute;fico de psql
hacia postgres a trav&eacute;s de nuestro t&uacute;nel.
Ejecute el siguiente comando para dar inicio a psql para las
pruebas.</p>

<p class="code">psql -h localhost -p 2002</p>

 <p>Este comando ordena a psql a conectarse a localhost en el
puerto 2002 en el cual nuestro RelayApp est&aacute; escuchando.
Luego de entrar su contrase&ntilde;a de postgres, puede comenzar
a ejecutar comandos SQL de forma usual y probar la conexi&oacute;n
SSL que est&aacute; ahora haciendo el reenv&iacute;o.</p>

<A NAME="285lfindex6">&nbsp;</A>
<H3>Una nota sobre seguridad</H3>


<p>No es buena idea especificar contrase&ntilde;as como par&aacute;metros
en la l&iacute;nea de comandos si ud. comparte un ordenador.  Esto
debido a que alguien que ejecute el comando ps -auxww ser&aacute;
capaz de ver la l&iacute;nea de comandos completa de su proceso,
incluyendo las contrase&ntilde;as.  Es mejor almacenar las
contrase&ntilde;as
en una forma no cifrada en otro fichero y dejar a su aplicaci&oacute;n de
java leerlas a partir ah&iacute;. Alternativamente puede usar Swing de
Java
para crear una caja de di&aacute;logo que pida una contrase&ntilde;a.</p>

<A NAME="285lfindex7">&nbsp;</A>
<H2>Conclusi&oacute;n</H2>


<p>Es simple usar el JSSE de Sun para la creaci&oacute;n de un
t&uacute;nel SSL que puede ser usado por postgres. De hecho,
cualquier otra aplicaci&oacute;n que requiera de una conexi&oacute;n
segura puede probablemente utilizar este t&uacute;nel SSL. Existen
muchas formas de agregar criptograf&iacute;a a su conexi&oacute;n,
solo use su editor de linux favorito y empieze a escribir c&oacute;digo.
Divi&eacute;rtase!<br></p>

<A NAME="285lfindex8">&nbsp;</A>
<H2>Enlaces &Uacute;tiles</H2>


<ul>
<li><a href="../../common/src/article285/">C&oacute;digo fuente de este
art&iacute;culo</a></li>

<li><a href="http://www.postgresql.org/idocs/">Documentaci&oacute;n
PostgreSQL</a><br>
</li>

<li><a href=

"http://java.sun.com/j2se/1.4.1/docs/guide/security/jsse/JSSERefGuide.html">
Especificaciones de JSSE de Sun</a><br>
</li>

<li><a href=
"http://java.sun.com/j2se/1.4/docs/guide/security/CryptoSpec.html">
Especificaciones de JCA de Sun</a><br>
</li>

<li><a href=
"http://java.sun.com/docs/books/tutorial/security1.2/index.html">
Gu&iacute;a de seguridad Java</a><br>
</li>
</ul>



<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1" summary="tb-button-outerpart">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1" summary="tb-button">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=285"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Chianglin Ng, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#9999AA">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE summary="translators">
  <tr><td><font size="2">en --&gt; -- : Chianglin Ng <small>&lt;chglin(at)singnet.com.sg&gt;</small></font></td></tr>
  <tr><td><font size="2">en --&gt; es: Juan Carlos Piedra &lt;jcpiedra(at)troglo.org&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2003-03-24, generated by lfparser version 2.34</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
