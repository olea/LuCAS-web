<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//ES">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.21">
 <META NAME="LFCATEGORY" CONTENT="Software Development">
<!-- this is used by a number of tools:
 =LF=AUTHOR: Lorne Bailey
 =LF=CAT___: Software Development
 =LF=TITLE_: GCC: el origen de todo
 =LF=NUMBER: 229
 =LF=ANAME_: article229.html
 -->
 <TITLE>lf229, Software Development: GCC: el origen de todo</TITLE>
<!-- stylesheet added by lfparser: --> 
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-familiy:monospace,Courier }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; border-style:none; border-width:medium; border-color:#FFD700; padding:0.5cm ;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; border-style:none; border-width:medium; border-color:#aedbe8; padding:0.1cm ;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; border-width:medium; border-color:#AAAAAA; padding:0.5cm ; margin-top:0.1cm; margin-right:1cm; margin-left:1cm; text-align:center }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar -->
 <!-- top navegation bar -->
 <TABLE cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="144"><IMG src="../../common/images/logolftop.gif"
           alt="[LinuxFocus-icon]" width="350" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE width="100%">
               <TR align="right">
                 <TD class="top"><A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="-1">Hogar</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="-1">Mapa</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="-1">Indice</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="-1">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="30%" >
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<IMG height=200 alt="[Lorne Bailey]"
src="article229_meta_shtml_archivos/LorneBailey.gif" width=178>
<BR>por  Lorne Bailey <br> <small>&lt;sherm_pbody(at)yahoo.com&gt;</small>
<BR><BR>
<I>Sobre el autor:</I><BR>
<P>Lorne vive en Chicago y trabaja como consultor inform&aacute;tico especializado
en el intercambio de datos entre bases de datos Oracle. Como se decidi&oacute;
programar &uacute;nicamente en ambientes *nix ha podido escapar del infierno de las
DLL. Actualmente est&aacute; realizando su master de grado en Ciencias Inform&aacute;ticas. </P>
<!-- TRANSLATED TO es -->
<BR><BR><I>Taducido al espa&ntilde;ol por:</I><BR>
Walter Echarri <small>&lt;wecharri(at)yahoo.com&gt;</small>
<br>
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#229lfindex0">Las reglas del GCC</A></LI>
  <LI><A HREF="#229lfindex1">En los comienzos... </A></LI>
  <LI><A HREF="#229lfindex2">Pre-compilaci&oacute;n </A></LI>
  <LI><A HREF="#229lfindex3">Compilaci&oacute;n </A></LI>
  <LI><A HREF="#229lfindex4">Ensamblado </A></LI>
  <LI><A HREF="#229lfindex5">Enlazado </A></LI>
  <LI><A HREF="#229lfindex6">Las dos opciones m&aacute;s importantes </A></LI>
  <LI><A HREF="#229lfindex7">Depurando </A></LI>
  <LI><A HREF="#229lfindex8">Resumen</A></LI>
  <LI><A HREF="#229lfindex9">Enlaces </A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=229&amp;lang=es">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<H2>GCC: el origen de todo</H2>
 <IMG height=60 alt=[Illustration] hspace=10
src="article229_meta_shtml_archivos/illustration229.gif" width=200>
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
El presente art&iacute;culo
muestra como usar el compilador gcc y presupone conocimientos b&aacute;sicos del lenguaje C.
Les ense&ntilde;aremoas a invocar el compilador desde la l&iacute;nea de comandos
para c&oacute;digos fuentes sencillos escritos en C. Seguiremos con un an&aacute;lisis
de lo que realmente ocurre durante la compilaci&oacute;n de programas y c&oacute;mo
controlar la situaci&oacute;n. Por &uacute;ltimo, analizaremos brevemente el uso del depurador.

</P>
<HR size="2" noshade align="right"><BR>
<!-- BODY OF THE ARTICLE -->

<A NAME="229lfindex0">&nbsp;</A>
<H2>Las reglas del GCC</H2>

<P>&iquest;Se pueden imaginar compilar software libre con un compilador propietario
de c&oacute;digo cerrado? &iquest;C&oacute;mo sabr&iacute;amos qu&eacute; ocurre en nuestro ejecutable? Podr&iacute;a
haber todo tipo de puertas traseras o troyanos. Ken Thompson, program&oacute; un compilador
que dejaba una puerta trasera en el programa 'login' y que perpetuaba el
troyano cuando el compilador se compilaba a s&iacute; mismo.
Puede leerse los detalles de este art&iacute;culo cl&aacute;sico
<A href="http://www.acm.org/classics/sep95">aqu&iacute;</A>. Afortunadamente, tenemos al compilador gcc.
Cada vez que hacemos <CODE>configure; make; make install </CODE>gcc realiza
el trabajo pesado tras bambalinas. &iquest;C&oacute;mo hacemos para que gcc trabaje para nosotros?
Comenzaremos escribiendo un juego de naipes, pero lo haremos con el objeto
de demostrar la funcionalidad del compilador. Puesto que empezaremos
desde cero, necesitaremos una comprensi&oacute;n del proceso de compilaci&oacute;n para
saber qu&eacute; necesitamos hacer y en qu&eacute; orden para crear el ejecutable.
Haremos un repaso general de c&oacute;mo se compila un programa C y las opciones
para que gcc haga lo que queremos que haga.
Las diferentes etapas (y las herramientas necesarias) son: <A
href="http://www.linuxfocus.org/English/March2002/article229.meta.shtml#precomp">Pre-compilaci&oacute;n</A>
(gcc -E), <A
href="http://www.linuxfocus.org/English/March2002/article229.meta.shtml#comp">Compilaci&oacute;n</A>
(gcc), <A
href="http://www.linuxfocus.org/English/March2002/article229.meta.shtml#assem">Ensamblado</A>
(as), y <A
href="http://www.linuxfocus.org/English/March2002/article229.meta.shtml#link">Enlazado</A> (ld). </P>
<A NAME="229lfindex1">&nbsp;</A>
<H2>En los comienzos... </H2>

<P>Ante todo, debemos saber c&oacute;mo invocar al compilador. En realidad, es sencillo.
Comenzaremos con el primer programa en C m&aacute;s cl&aacute;sico de todos los tiempos
(los programadores experimentados sabr&aacute;n perdonarme). </P>
<P><PRE>#include &lt;stdio.h&gt;

int main()<BR>
{
  printf("&iexcl;Hola mundo!\n");
}
</PRE>
<P></P>
<P>Guarde el archivo como <CODE>juego.c</CODE>. Se puede compilar desde la l&iacute;nea de
comandos, ejecutando <PRE>gcc juego.c
</PRE>Por defecto, el compilador C crea un ejecutable llamado <CODE>a.out</CODE>
que se puede ejecutar haciendo <PRE>a.out
<B>Hello World</B>

</PRE>Cada vez que se compila un programa, el nuevo ejecutable <CODE>a.out</CODE>
sobreescribir&aacute; el programa anterior. De esta manera nos resultar&aacute; dif&iacute;cil
saber qu&eacute; programa se corresponde con el archivo <CODE>a.out</CODE>. Podemos evitar el problema
indic&aacute;ndole a gcc que deseamos dar al ejecutable un nombre determinado mediante
la opci&oacute;n <CODE>-o </CODE>. Llamaremos a este programa <CODE>juego</CODE>,
aunque podr&iacute;amos haberlo llamado como quisi&eacute;ramos puesto que C carece
de las restricciones que posee Java en cuanto a los nombres de archivos.
<PRE>gcc -o juego juego.c
</PRE><PRE>juego
<B>Hello World</B>

</PRE>
<P></P>
<P>A estas alturas, estamos bastante lejos de tener un programa &uacute;til. Si piensa
que esto no sirve para nada debiera considerar que tenemos un programa
que compila y funciona. Queremos asegurarnos que esto siga siendo as&iacute; a medida
que agreguemos poco a poco cierta funcionalidad al programa. Parece ser que todos
los principiantes quieren escribir un programa con 1000 l&iacute;neas y corregirlas
todas simult&aacute;neamente. Nadie, absolutamente nadie, puede hacer esto. La idea
es hacer un peque&ntilde;o programa que funcione, hacer peque&ntilde;os cambios y ejecutarlo
nuevamente. Esto limita la cantidad de errores que se deben corregir a la vez.
Por otra parte, de esta manera uno sabe exactamente lo que hizo mal y d&oacute;nde
centrar nuestra atenci&oacute;n. Esto evita crear programas que <B>uno</B> piensa
que deber&iacute;an funcionar, y que incluso compilan, pero que nunca terminan
siendo ejecutables. Recuerden que el s&oacute;lo hecho que compile no significa que el c&oacute;digo
sea correcto. </P>
<P>Nuestro siguiente paso consiste en crear un archivo de cabecera para nuestro
juego. Un archivo de cabecera agrupa distintos tipos de datos y declaraciones
de funciones en un mismo lugar. Esto nos asegura que las estructuras de datos
est&eacute;n consistentemente definidas de modo que cada parte de nuestro programa 'vea'
todo exactamente de la misma manera.</P>

<PRE>#ifndef BARAJA_H
#define BARAJA_H

#define TAMBARAJA 52

typedef struct BARAJA_t
{
  int naipe[TAMBARAJA];
  /* n&uacute;mero de naipes empleados */
  int repartidos;
}baraja_t;

#endif /* BARAJA_H */
</PRE>
<P>Guardamos este archivo como <CODE>baraja.h</CODE>. S&oacute;lo los archivos <CODE>.c</CODE>
se compilan, por lo tanto debemos modificar el c&oacute;digo de nuestro juego.c. En la l&iacute;nea 2,
escribamos <CODE>#include "baraja.h"</CODE> y en la 5, <CODE>baraja_t baraja. </CODE>
Para asegurarnos que no hemos cometido ning&uacute;n error, lo compilamos nuevamente.
<PRE>gcc -o juego juego.c
</PRE>
<P></P>
<P>No hay errores, por lo tanto, ning&uacute;n problema. Si no compila deberemos corregirlo
hasta que lo haga.</P>
<A NAME="229lfindex2">&nbsp;</A>
<H2><A name=precomp>Pre-compilaci&oacute;n</A> </H2>

<P>&iquest;C&oacute;mo sabe el compilador qu&eacute; tipo de datos es <CODE>baraja_t</CODE>? Pues bien,
durante la pre-compilaci&oacute;n el compilador copia el archivo "baraja.h" en el archivo
"juego.c".
Las directivas del precompilador en el c&oacute;digo fuente est&aacute;n precedidas por un "#".
No obstante, puede invocarse al precompilador mediante la interfaz de gcc mediante
la opci&oacute;n <CODE>-E</CODE>. <PRE>gcc -E -o juego_precompilado.txt juego.c
wc -l juego_precompilado.txt
  3199 juego_precompilado.txt
</PRE>&iexcl;Se obtienen casi 3200 l&iacute;neas como salida! La mayor&iacute;a de ellas provienen del
archivo include <CODE>stdio.h</CODE>, pero si se las analiza atentamente, tambi&eacute;n
se encuentran nuestras declaraciones. Si no se asigna un nombre al archivo de salida
mediante la opci&oacute;n <CODE>-o</CODE> la salida es por consola.  El proceso de
pre-compilaci&oacute;n brinda una mayor flexibilidad al c&oacute;digo alcanzando tres
objetivos principales.
<OL>
  <LI>Copia los archivos "#include" en el archivo fuente a compilar.
  <LI>Reemplaza los "#define" por su valor real.
  <LI>Reemplaza las macros cuando son llamadas. </LI></OL>Esto permite
tener constantes v&aacute;lidas en todo el c&oacute;digo, definidas en un s&oacute;lo lugar y
actualizadas autom&aacute;ticamente cada vez que se modifican sus valores
(como ocurre con TAMBARAJA, que representa el n&uacute;mero de naipes en la baraja)
En la pr&aacute;ctica, casi nunca se usa la opci&oacute;n <CODE>-E</CODE> por s&iacute; sola.
<P></P>
<A NAME="229lfindex3">&nbsp;</A>
<H2><A name=comp>Compilaci&oacute;n</A> </H2>

<P>Como paso intermedio, gcc traduce el c&oacute;digo a lenguaje ensamblador. Al
hacerlo debe intuir lo que se pretende hacer analizando el c&oacute;digo fuente.
Si se comete un error de sintaxis, dar&aacute; un mensaje de error y la
compilaci&oacute;n se abortar&aacute;. La gente a veces confunde este paso con el proceso
entero. Sin embargo, a gcc le queda mucho trabajo por delante.</P>
<A NAME="229lfindex4">&nbsp;</A>
<H2><A name=assem>Ensamblado</A> </H2>

<P><CODE>As</CODE> transforma el c&oacute;digo ensamblador a c&oacute;digo objeto. En realidad,
el c&oacute;digo objeto no puede ejecutarse en la CPU pero est&aacute; muy cerca de
poder hacerlo. La opci&oacute;n <CODE>-c</CODE> del compilador transforma un archivo .c en
un archivo objeto con extensi&oacute;n .o. Si ejecutamos <PRE>gcc -c juego.c
</PRE> creamos autom&aacute;ticamente un archivo denominado juego.o. Aqu&iacute; hemos
tropezado con un algo importante. Podemos tomar cualquier archivo .c y crear
un archivo objeto con &eacute;l. Como veremos a continuaci&oacute;n, podemos combinar estos archivos
objetos en un archivo ejecutable durante la etapa de enlazado.
Vayamos a nuestro ejemplo. Puesto que estamos programando un juego de naipes
y hemos definido una baraja como <CODE>baraja_t</CODE>, escribiremos una
funci&oacute;n para poder barajar los naipes. Esta funci&oacute;n toma un puntero
de tipo baraja y le pasa un conjunto de valores aleatorios para los diferentes
naipes. El arreglo 'retirados' permite contabilizar los naipes utilizados.
Este arreglo de TAMBARAJA miembros evita dar valores duplicados a un mismo naipe.

<P></P><PRE>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include "baraja.h"

static time_t semilla = 0;

void barajar(baraja_t *pbaraja)
{
  /* permite contabilizar los n&uacute;meros utilizados */
  int retirados[TAMBARAJA] = {0};
  int i;

  /* Inicializaci&oacute;n aleatoria */
  if(0 == semilla)
  {
    semilla = time(NULL);
    srand(semilla);
  }
  for(i = 0; i &lt; TAMBARAJA; i++)
  {
    int valor = -1;
    do
    {
      value = rand() % TAMBARAJA;
    }
    while(retirados[valor] != 0);

    /* marcar valor como utilizado */
    retirados[valor] = 1;

    /* sentencia de depuraci&oacute;n */
    printf("%i\n", valor);
    pbaraja-&gt;naipe[i] = valor;
  }
  pbaraja-&gt;repartidos = 0;
  return;
}
</PRE>
<P>Guardemos este archivo como <CODE>barajar.c</CODE>. Hemos puesto una sentencia
de depuraci&oacute;n en el c&oacute;digo de modo que al ejecutar el programa &eacute;ste escriba
el n&uacute;mero de naipes que genera. Esto no agrega ninguna funcionalidad al programa
pero resulta crucial para ver qu&eacute; est&aacute; ocurriendo. Puesto que reci&eacute;n estamos
empezando a programar nuestro juego, no tenemos otra manera de asegurarnos
que nuestra funci&oacute;n est&aacute; haciendo lo que queremos que realmente haga.  Con la sentencia
printf podemos saber exactamente lo que est&aacute; pasando de modo que al pasar
a la pr&oacute;xima etapa sabemos que los naipes est&aacute;n bien barajados. Una vez que
sepamos que todo funciona correctamente podemos eliminar la l&iacute;nea de nuestro
c&oacute;digo fuente. Esta
t&eacute;cnica para depurar programas parece rudimentaria pero logra su cometido
con una m&iacute;nima cantidad de esfuerzo. Posteriormente, discutiremos t&eacute;cnicas de
depuraci&oacute;n m&aacute;s sofisticadas. </P>Obs&eacute;rvense dos cosas.
<OL>
  <LI>Pasamos un par&aacute;metro por referencia (su direcci&oacute;n se obtiene mediante el operador
  '&amp;' direcci&oacute;n de). De esta forma, se pasa la direcci&oacute;n de la variable a la funci&oacute;n
  de manera que &eacute;sta pueda cambiar el valor de la propia variable. Es posible
  hacer lo mismo con variables globales aunque su uso no es aconsejable.
  Los punteros constituyen una parte importante del lenguaje C y
  es fundamental entenderlos correctamente.
  <LI>Usamos una llamada a una funci&oacute;n desde un archivo .c nuevo. El sistema operativo
  siempre busca una funci&oacute;n 'main' y comienza la ejecuci&oacute;n a partir de ella.
  Puesto que <CODE>barajar.c</CODE> carece de una funci&oacute;n 'main', no puede
  dar lugar a un ejecutable aut&oacute;nomo. Es necesario, combinarla con otro
  programa que contenga una funci&oacute;n 'main' y que la llame desde all&iacute;.
  </LI></OL>
<P>Hagamos <PRE>gcc -c barajar.c
</PRE>y aseg&uacute;rese que aparezca un nuevo archivo denominado <CODE>barajar.o</CODE>. Edite
el archivo juego.c y en la l&iacute;nea 7 (a continuaci&oacute;n de la declaraci&oacute;n de la variable
baraja_t <CODE>baraja</CODE>) agregue la l&iacute;nea <PRE>barajar(&amp;baraja);
</PRE>Ahora, si intentamos crear el ejecutable como hicimos anteriormente, obtendremos un mensaje
de error <PRE>gcc -o juego juego.c

/tmp/ccmiHnJX.o: In function `main':
/tmp/ccmiHnJX.o(.text+0xf): undefined reference to `barajar'
collect2: ld returned 1 exit status

</PRE>La compilaci&oacute;n funcion&oacute; porque la sintaxis de nuestro c&oacute;digo es correcta.
No obstante, el enlazado fall&oacute; porque no le dijimos al compilador d&oacute;nde se encuentra la funci&oacute;n
'barajar'. &iquest;En qu&eacute; consiste el <I>enlazado</I> y c&oacute;mo le decimos al compilador d&oacute;nde encontrar
a la funci&oacute;n?
<P></P>
<A NAME="229lfindex5">&nbsp;</A>
<H2><A name=link>Enlazado</A> </H2>

<P>El enlazador, <CODE>ld</CODE>, toma el c&oacute;digo objeto creado previamente
por <CODE>as</CODE> y lo transforma en ejecutable mediante el comando
<PRE>gcc -o juego juego.o barajar.o
</PRE>Esto combinar&aacute; los dos c&oacute;digos objeto y crear&aacute; el ejecutable
<CODE>juego</CODE>.
<P></P>
<P>El enlazador encuentra a la funci&oacute;n <CODE>barajar</CODE> en el objeto barajar.o
y la incluye en el ejecutable. La verdadera belleza de los archivos objeto
consiste en que si deseamos utilizar nuevamente la funci&oacute;n, todo lo que
tenemos que hacer es incluir el archivo "baraja.h" y enlazar el archivo objeto
<CODE>barajar.o</CODE> en el nuevo ejecutable. </P>
<P>La reutilizaci&oacute;n de c&oacute;digo es sistem&aacute;tica. As&iacute;, por ejemplo, anteriormente
no tuvimos que escribir la funci&oacute;n <CODE>printf</CODE> que utilizamos como sentencia
de depuraci&oacute;n ya que el enlazador encontr&oacute; su definici&oacute;n en el archivo incluido
mediante <CODE>#include
&lt;stdlib.h&gt;</CODE> y la enlaz&oacute; con el c&oacute;digo objeto almacenado en la biblioteca C
(/lib/libc.so.6). De esta manera podemos usar la funci&oacute;n de alg&uacute;n programador
que sabemos que funciona correctamente y concentrarnos en la resoluci&oacute;n de
nuestros propios problemas. Es por eso que los archivos de cabecera normalmente
contienen &uacute;nicamente los datos y las definiciones de las funciones pero no los
cuerpos de las funciones. Normalmente, uno crea archivos objetos o bibliotecas para
que el enlazador los integre en el ejecutable.  Si no se incluyen las definiciones
de las funciones en las cabeceras pueden ocurrir errores. &iquest;Qu&eacute; podemos hacer
para asegurarnos que todo funcione correctamente? </P>
<A NAME="229lfindex6">&nbsp;</A>
<H2><A name=lasttwo>Las dos opciones m&aacute;s importantes</A> </H2>

<P>La opci&oacute;n <CODE>-Wall</CODE> activa todos las advertencias disponibles
sobre la sintaxis del lenguaje para ayudarnos a verificar que nuestro c&oacute;digo
es correcto y portable tanto como sea posible. Cuando se usa esta opci&oacute;n, al compilar
nuestro c&oacute;digo se obtienen mensajes del tipo
: <PRE>juego.c:9: warning: implicit declaration of function `barajar'
</PRE>Esto significa que nos resta algo por hacer. Necesitamos
a&ntilde;adir una l&iacute;nea en el archivo de cabecera para para informarle al compilador
sobre nuestra funci&oacute;n <CODE>barajar</CODE> de modo que pueda saber lo
que necesita hacer. Parece complicado, pero separa la definici&oacute;n de la
implementaci&oacute;n y nos permite
usar nuestra funci&oacute;n en cualquier lugar con tan s&oacute;lo incluir nuestra nueva cabecera
y enlazarla con nuestro c&oacute;digo objeto. Incluyamos esta l&iacute;nea en el archivo barraja.h
 <PRE>void barajar(baraja_t *pbaraja);
</PRE>Con lo cual desaparecer&aacute;n todos los mensajes de advertencia.
<P></P>
<P>Otra opci&oacute;n del compilador es la de optimizaci&oacute;n <CODE>-O#</CODE> (es decir, -O2).
que permite elegir el nivel de optimizaci&oacute;n deseado. El compilador tiene toda
una bolsa de trucos para hacer que el c&oacute;digo se ejecute un poco m&aacute;s r&aacute;pido.
En el caso de peque&ntilde;os programas como los nuestros no notaremos ninguna diferencia
pero en el caso de programas m&aacute;s grandes puede incrementarse bastante la
velocidad ejecuci&oacute;n. La ver&aacute;n por todos lados, de modo que es necesario que
conozcan qu&eacute; significa.</P>
<A NAME="229lfindex7">&nbsp;</A>
<H2><A name=debug>Depurando</A> </H2>

<P>Como todo sabemos, que nuestro c&oacute;digo compile no significa que vaya a funcionar
de la manera que esperamos que lo haga. Se puede verificar que todos los n&uacute;meros
se usan una &uacute;nica vez haciendo
<PRE>juego | sort - n | less
</PRE>y verificando que no falta nada. &iquest;Qu&eacute; hacemos si tenemos alg&uacute;n problema?
&iquest;C&oacute;mo vemos debajo del cap&oacute; y encontramos el error?
<P></P>Puede analizarse el c&oacute;digo con ayuda de un depurador. La mayor&iacute;a de las
distribuciones vienen acompa&ntilde;adas del cl&aacute;sico depurador gdb. Si las opciones de la l&iacute;nea de
comandos les resultan intimidantes, KDE nos brinda una agradable interfaz gr&aacute;fica con
<A
href="http://members.nextra.at/johsixt/kdbg.html">KDbg</A>. Existen otras interfaces
gr&aacute;ficas todas ellas muy similares entre s&iacute;. Para comenzar a depurar, hay que ir a
Archivo-&gt;Ejecutable y buscar nuestro programa <CODE>juego</CODE>. Presionando
F% o eligiendo del men&uacute;  Ejecuci&oacute;n-&gt;Ejecutar, se podr&aacute; ver la saida en otra
ventana separada. &iquest;Qu&eacute; sucede? En la ventana no se ve absolutamente nada. No se preocupen,
KDbg no funciona mal. El problema es que no hemos puesto ninguna informaci&oacute;n de depuraci&oacute;n
en el ejecutable con lo cual KDbg no nos puede decir qu&eacute; est&aacute; ocurriendo internamente.
La opci&oacute;n <CODE>-g</CODE> del compilador incluye la informaci&oacute;n necesario en los arhivos
objeto. Se deben compilar los archivos objetos (con extensi&oacute;n .o) con esta opci&oacute;n, con lo cual
el comando resulta ser <PRE>gcc -g -c barajar.c juego.c
gcc -g -o juego juego.o barajar.o
</PRE>Esto inserta marcas en el ejecutable que permiten a gdb y KDbg saber
qu&eacute; est&aacute; ocurriendo. El saber depurar correctamente es una habilidad
muy importante y vale la pena aprender a hacerlo. La manera en que los depuradores
ayudan a los programadores es colocando 'puntos de ruptura' en el c&oacute;digo fuente.
Intentemos colocar uno haciendo click derecho sobre la l&iacute;nea que contiene  a la
funci&oacute;n <CODE>barajar</CODE>. Aparecer&aacute; un peque&ntilde;o circulo rojo a continuaci&oacute;n de
dicha l&iacute;nea. Si se presiona F5 la ejecuci&oacute;n del programa se detiene en esta l&iacute;nea.
Presionando F8 <I>entramos</I> a la funci&oacute;n barajar. &iexcl;Estamos mirando el c&oacute;digo de
<CODE>barajar.c</CODE>! Podemos controlar la ejecuci&oacute;n paso a paso y ver qu&eacute; es
lo que realmente est&aacute; ocurriendo. Si posicionamos el puntero sobre una variable local
veremos el valor almacenado en ella. Excelente. Es mucho mejor que esos
<CODE>printf</CODE> &iquest;no es cierto?
<P></P>
<A NAME="229lfindex8">&nbsp;</A>
<H2>Resumen</H2>

<P>El presente art&iacute;culo representa un r&aacute;pido recorrido al proceso de compilaci&oacute;n
y depuraci&oacute;n de programas escritos en C. Hemos analizado los pasos que sigue
el compilador y las opciones que requiere gcc para llevarlos a cabo.
Tratamos brevemente el enlazado de bibliotecas compartidas y finalizamos con
una introducci&oacute;n a los depuradores. En realidad, lleva bastante tiempo
saber lo que uno est&aacute; haciendo, pero espero que este art&iacute;culo haya servido
para empezar con el pie derecho. Puede encontrarse m&aacute;s informaci&oacute;n en las p&aacute;ginas
del manual <CODE>man</CODE> y de <CODE>info</CODE> de <CODE>gcc</CODE>,
<CODE>as</CODE> y <CODE>ld</CODE>. </P>
<P>Escribir c&oacute;digo por cuenta propia es una excelente forma de aprender.
Para practicar, se puede considerar la estructura b&aacute;sica del programa
del juego de cartas analizado y escribir un juego de blackjack.
Tomense el tiempo para aprender a usar un depurador.
Resulta mucho m&aacute;s f&aacute;cil comenzar con una interfaz gr&aacute;fica como KDbg
A&ntilde;adiendo poco a poco cierta funcionalidad al programa lo
terminar&aacute;n sin siquiera darse cuenta. Por lo tanto, &iexcl;sigan practicando!
<P>A continuaci&oacute;n se detalla lo necesario para lograr un juego completo.
<UL>
  <LI>La definici&oacute;n de un jugador (se puede definir, por ejemplo, jugador_t
  al igual que se hizo con baraja_t).
  <LI>Una funci&oacute;n que reparta un n&uacute;mero definido de naipes a un jugador determinado.
  Recordar llevar la cuenta de la cantidad de naipes que quedan en manos del jugador.
  <LI>Alg&uacute;n tipo de interactividad que pregunte al jugador si desea otro naipe.
  <LI>Una funci&oacute;n que determine el valor de las cartas de un jugador. Un <I>naipe</I>
  vale % 13 (entre 0 y 12), el <I>palo</I> vale / 13 (entre 0 y 3).
  <LI>Una funci&oacute;n que determine el valor de la jugada de un jugador.</LI></UL>
<P></P>
<P></P>
<A NAME="229lfindex9">&nbsp;</A>
<H2><A name=links>Enlaces</A> </H2>

<UL>
  <LI><A href="http://www.gnu.org/directory/gcc.html">gcc</A> La colecci&oacute;n de compiladores
  GCC GNU
  <LI><A href="http://www.gnu.org/directory/gdb.html">gdb</A> El depurador GNU
  <LI><A href="http://members.nextra.at/johsixt/kdbg.html">KDbg</A> El depurador gr&aacute;fico
  de KDE.
  <LI><A href="http://www.acm.org/classics/sep95">Award Winning Compiler
  Hack</A> El grandioso compilador modificado de Ken Thompson</LI></UL><!-- vim: set sw=2 ts=2 et tw=74: -->

<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=229&amp;lang=es"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Lorne Bailey, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
<BR><a href="http://cgi.linuxfocus.org/cgi-bin/lfcomment?lang=es&amp;article=article229.html" target="_TOP">Pinchar aqu&iacute; para informar de alg&uacute;n problema o enviar comentarios a LinuxFocus</A><BR></TD>
<TD BGCOLOR="#9999AA">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE>
  <tr><td><font size="2">en --&gt; -- : Lorne Bailey <small>&lt;sherm_pbody(at)yahoo.com&gt;</small></font></td></tr>
  <tr><td><font size="2">en --&gt; es: Walter Echarri &lt;wecharri(at)yahoo.com&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2002-03-15, generated by lfparser version 2.21</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
