<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.34">
 <META NAME="LFCATEGORY" CONTENT="Webdesign">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf269, Webdesign: Administrando HTML con Perl, HTML::TagReader</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 .mark  { background-color:#e6e6ff }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Guido Socher
 =LF=CAT___: Webdesign
 =LF=TITLE_: Administrando HTML con Perl, HTML::TagReader
 =LF=NUMBER: 269
 =LF=ANAME_: article269.html
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top"><A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="2">Hogar</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Mapa</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Indice</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="2">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="190" summary="about the author">
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4 summary="pda download"> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<IMG src="../../common/images/Guido-S.gif" alt="[Photo of the Author]" height="164" width="173">
<BR>por  Guido Socher <a href="http://linuxfocus.org/~guido/"><font size="1">(homepage)</font></a>
<BR><BR>
<I>Sobre el autor:</I><BR>
<!-- aboutauthor_start -->
<P>A Guido le gusta Perl porque es un lenguaje de scripting muy flexible
y r&aacute;pido. Le gusta el lema de Perl "Hay m&aacute;s de un camino para hacerlo" el
cual refleja la libertad y las posibilidades que tienes cuando usas c&oacute;digo
abierto.</P>
<!-- aboutauthor_stop -->
<!-- TRANSLATED TO es -->
<BR><BR><I>Taducido al espa&ntilde;ol por:</I><BR>
Mar&iacute;a P&eacute;rez <small>&lt;lupeagui(at)hotmail.com&gt;</small>
<br>
<!--
 =LF=TRANSTO=es: Mar&iacute;a P&eacute;rez
-->
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#269lfindex0">Introducci&oacute;n</A></LI>
  <LI><A HREF="#269lfindex1">Una posible soluci&oacute;n</A></LI>
  <LI><A HREF="#269lfindex2">HTML::TagReader</A></LI>
  <LI><A HREF="#269lfindex3">Referencias</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=269">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>Administrando HTML con Perl, HTML::TagReader</H2>
 <IMG src="../../common/images/article269/html_trbutton.png" width=
"385" height="170" alt="[Illustration]" hspace="10">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<!-- articleabstract_start -->

Si quieres administrar un sitio web con mas de 10 p&aacute;ginas HTML pronto averiguar&aacute;s que necesitas algunos programas para ayudarte.
<br>
 La mayor&iacute;a del software tradicional lee ficheros l&iacute;nea a l&iacute;nea (o car&aacute;cter a car&aacute;cter). Desafortunadamente las l&iacute;neas no tienen significado en ficheros SGML/XML/HTML. Los ficheros SGML/XML/HTML estan basados en etiquetas. HTML::TagReader es un m&oacute;dulo ligero para procesar un fichero mediante etiquetas.<BR><BR>


En este art&iacute;culo se supone que se conoce Perl bastante bien. Mira <A href="../January2000/article136.html">mis tutoriales sobre Perl
(Enero 2000)</A> si quieres aprender Perl.




<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- BODY OF THE ARTICLE -->


<A NAME="269lfindex0">&nbsp;</A>
<H2>Introducci&oacute;n</H2>

Tradicionalmente los ficheros han estado basado en l&iacute;neas. Ejemplos son los ficheros de configuraci&oacute;n de linux tales como /etc/hosts, /etc/passwd... Hay incluso viejos sistemas operativos donde tienes funciones en el sistema operativo para recuperar y escribir datos l&iacute;nea a l&iacute;nea.<BR>


Los ficheros SGML/XML/HTML estan  basados en etiquetas, las l&iacute;neas no tienen significado aqu&iacute;, sin embargo los editores de texto  y las personas utilizan las l&iacute;neas.
<BR>
 <BR>

Especialmente los ficheros largos de HTML por regla general constan de varias l&iacute;neas de c&oacute;digo HTML. Hay incluso herramientas tales como "Tidy" para sangrar html y hacerlo legible. Usamos l&iacute;neas aunque HTML est&aacute; basado en etiquetas y no en l&iacute;neas. Puedes compararlo con el c&oacute;digo C. Te&oacute;ricamente puedes escribir el c&oacute;digo entero en una sola l&iacute;nea. Nadie hace esto. Ser&iacute;a ilegible.
<BR>


Por lo tanto esperas que un corrector sint&aacute;ctico de HTML escriba "ERROR:l&iacute;nea.." en vez de "ERROR despues de la etiqueta 4123". Esto es porque tu editor de texto te permite saltar facilmente a una l&iacute;nea dada en el fichero.
 <BR>
 <BR>

Lo qu&eacute; se necesita aqui es una manera buena y f&aacute;cil<b> para procesar un fichero de HTML etiqueta a etiqueta y  mantener los n&uacute;meros de las l&iacute;neas</b>.



<A NAME="269lfindex1">&nbsp;</A>
<H2>Una posible soluci&oacute;n</H2>





El modo normal de leer un fichero en Perl es usando el operador <I>while(&lt;FILEHANDLE&gt;)</I>. Este leer&aacute; los datos l&iacute;nea a l&iacute;nea y pasar&aacute; cada l&iacute;nea a la variable $_. &iquest;Por qu&eacute; Perl hace esto as&iacute;? Perl tiene una variable interna llamada INPUT_RECORD_SEPARATOR ($RS o $/) donde est&aacute; definido "/n" como el final de l&iacute;nea. Si pones $/="&gt;" entonces Perl usar&aacute;  "&gt;" como final de l&iacute;nea. La siguiente l&iacute;nea de comando del script de Perl reformatear&aacute; el texto de html para que "&gt;" sea siempre el final de l&iacute;nea:


<P class="code">perl -ne 'sub BEGIN{$/="&gt;";} s/\s+/ /g; print
"$_\n";' file.html</P>

<P>Un fichero de html que aparece como</P>



<PRE>
&lt;html&gt;&lt;p&gt;some text here&lt;/p&gt;&lt;/html&gt;
</PRE>
 se transformar&aacute; en
<PRE>
&lt;html&gt;
&lt;p&gt;
some text here&lt;/p&gt;
&lt;/html&gt;
</PRE>

Lo importante no es sin embargo la legibilidad. Para los desarrolladores de software  es importante que el dato sea pasado a las funciones en su c&oacute;digo etiqueta a etiqueta. Con esto ser&aacute; f&aacute;cil encontrar  "&lt;a href= ... incluso si el original html ten&iacute;a "a" y "href" en l&iacute;neas separadas.<BR>
 <BR>




Cambiando el valor de la  variable "$/" (INPUT_RECORD_SEPARATOR) no causa desbordamiento y es muy r&aacute;pido. Es tambi&eacute;n posible usar el operador match y expresiones regulares como un iterador y procesar el fichero con expresiones regulares. Esto es un poco m&aacute;s complicado y m&aacute;s lento pero tambi&eacute;n muy usado frecuentemente.
<BR>
 <BR>


<B>&iquest;D&oacute;nde est&aacute; el problema?</B> El t&iacute;tulo de este art&iacute;culo dec&iacute;a HTML::TagReader pero hasta ahora he estado hablando todo el tiempo sobre una soluci&oacute;n muy simple que no requiere m&oacute;dulos extras. Debe haber algo mal en esta soluci&oacute;n:


<UL>

  <LI>La mayor&iacute;a de todos los ficheros HTML en el mundo tienen errores. Hay millones de p&aacute;ginas que contiene por ejemplo ejemplos de c&oacute;digo C  que aparecen a nivel de c&oacute;digo HTML como<BR>
<tt>
   if ( limit &gt; 3) ....</tt><BR>
   en vez de <BR><tt>
   if ( limit &amp;gt; 3) ....</tt><BR>
En HTML "&lt;" empieza una etiqueta y "&gt;" la termina. Ninguna de ella deber&iacute;a aparecer de esta manera en alg&uacute;n lugar del texto. La mayor&iacute;a de los navegadores las mostrar&aacute; correctamente y esconder&aacute; el error.<BR>
  <BR>
  </LI>

  <LI>Si se cambia el valor de la variable "$/" afecta al programa entero. Si quieres procesar otro fichero l&iacute;nea a l&iacute;nea cuando estas leyendo el fichero html entonces tendr&aacute;s un problema.<BR>
  <BR>
  </LI>
</UL>
Dicho de otra manera, solamente es posible cambiar el valor de la variable "$/"(INPUT_RECORD_SEPARATOR) en casos especiales. <BR><BR>


Todav&iacute;a tengo un &uacute;til programa de ejemplo que nos permita seguir discutiendo. El asigna sin embargo  a la variable "$/" el valor "&lt;" porque los navegadores no pueden manejar un  "&lt;"  equivocado de la misma manera que "&gt;" y por lo tanto hay menos p&aacute;ginas web con "&lt;" equivocadas que  con "&gt;" equivocadas.El programa se llama <A href=
"../../common/src/article269/tr_tagcontentgrep.html">tr_tagcontentgrep
(click para verlo)</A> y puedes tambi&eacute;n ver en el c&oacute;digo como mantiene el n&uacute;mero de l&iacute;nea. tr_tagcontentgrep  puede ser usado para buscar una cadena de car&aacute;cteres (por ejemplo "img") en una etiqueta incluso si la etiqueta ocupa varias l&iacute;neas. Algo como:
<P class="code"><B>tr_tagcontentgrep -l img file.html</B><BR>
 index.html:53: &lt;IMG src="../images/transpix.gif" alt=""&gt;<BR>
 index.html:257: &lt;IMG SRC="../Logo.gif" width=128
height=53&gt;<BR>
</P>


<P class="code"><B>tr_tagcontentgrep -l img file.html</B><BR>
 index.html:53: &lt;IMG src="../images/transpix.gif" alt=""&gt;<BR>
 index.html:257: &lt;IMG SRC="../Logo.gif" width=128
height=53&gt;<BR>
</P>


<A NAME="269lfindex2">&nbsp;</A>
<H2>HTML::TagReader</H2>


HTML::TagReader resuelve los dos problemas creados con la modificaci&oacute;n de  INPUT_RECORD_SEPARATOR y ofrece tambi&eacute;n una forma m&aacute;s sencilla para separar el texto de las  etiquetas. No es tan pesado como un analizador completo  de HTML y ofrece lo que t&uacute; quieres cuando procesas c&oacute;digo html: Un m&eacute;todo para leer etiqueta a etiqueta.<BR>
 <BR>

Demasiadas palabras. Aqui esta como usarlo. Primero debes escribir<BR>
<I>use HTML::TagReader;</I> <BR>
en tu programa para cargar el m&oacute;dulo. Entonces llama<BR>
<I>my $p=new HTML::TagReader "filename";</I> <BR>
para abrir el fichero "filename" y almacena el objeto referenciado en $p.Ahora puedes llamar  $p-&gt;gettag(0) o $p-&gt;getbytoken(0) para coger la pr&oacute;xima etiqueta. gettad devuelve solamente etiquetas (lo que hay entre &lt;
y &gt;) mientras que getbytoken adem&aacute;s de darte el texto entre &lt;
y &gt; te dice que &eacute;s (etiqueta o texto). Con estas funciones es muy f&aacute;cil procesar ficheros html. Imprescindible para mantener un sitio web grande. Una completa descripci&oacute;n sint&aacute;ctica puede ser encontrada en <A href=
"../../common/src/article269/man_HTML_TagReader.html"> la p&aacute;gina de ayuda de
HTML::TagReader</A>. <BR>
 <BR>

Aqui esta un ejemplo real de un programa. Imprime los t&iacute;tulos de los documentos para un n&uacute;mero de documentos:
<PRE>#!/usr/bin/perl -w
use strict;
use HTML::TagReader;
#
die "USAGE: htmltitle file.html [file2.html...]\n" unless($ARGV[0]);
my $printnow=0;
my ($tagOrText,$tagtype,$linenumber,$column);
#
for my $file (@ARGV){
 my $p=new HTML::TagReader "$file";
# read the file with getbytoken:
 while(($tagOrText,$tagtype,$linenumber,$column) = $p-&gt;getbytoken(0)){
 if ($tagtype eq "title"){
$printnow=1;
 print "${file}:${linenumber}:${column}: ";
next;
}
 next unless($printnow);
if ($tagtype eq "/title" || $tagtype eq "/head" ){
$printnow=0;
 print "\n";
next;
 }
 $tagOrText=~s/\s+/ /; #kill newline, double space and tabs
 print $tagOrText;
 }
}
# vim: set sw=4 ts=4 si et:
</PRE>C&oacute;mo trabaja? Leemos el fichero de html con $p-&gt;getbytoken(0) cuando encontramos &lt;title&gt; o
&lt;Title&gt; o &lt;TITLE&gt; (son devueltos como  $tagtype eq "title") entonces  activamos un indicador ($printnow) para que empiece la impresi&oacute;n y cuando encontramos &lt;/title&gt; paramos la impresi&oacute;n.

<BR>
 Usa el programa asi:


<P class="code"><B>htmltitle file.html somedir/index.html</B><BR>
 file.html:4:programa de Perl<BR>
 somedir/index.html:9: p&aacute;gina personal de Joe <BR>
</P>

<P> Por supuesto es posible implementar el tr_tagcontentgrep desde dentro con HTML::TagReader. Es peque&ntilde;o y f&aacute;cil de escribir:
<PRE>#!/usr/bin/perl -w
use HTML::TagReader;
die "USAGE: taggrep.pl searchexpr file.html\n" unless ($ARGV[1]);
my $expression = shift;<
my @tag;
for my $file (@ARGV){
 my $p=new HTML::TagReader "$file";
 while(@tag = $p-&gt;gettag(0)){
 # $tag[0] is the tag (e.g &lt;a href=...&gt;)
 # $tag[1]=linenumber $tag[2]=column
 if ($tag[0]=~/$expression/io){
  print "$file:$tag[1]:$tag[2]: $tag[0]\n";
 }
}
}



</PRE>  El script es peque&ntilde;o y no tiene demasiado manejo de errores pero aparte de esto es totalmente funcional. Para buscar por etiquetas que contienen la cadena "gif" escribe:
<BR>
<BR>

<P class="code"><B>taggrep.pl gif file.html</B><BR>
file.html:135:15: &lt;img src="images/2doc.gif" width=34
height=22&gt;<BR>
file.html:140:1: &lt;img src="images/tst.gif" height="164"
width="173"&gt;</P>


Alg&uacute;n ejemplo m&aacute;s? Esto es un programa que quitar&aacute; todas las etiquetas &lt;font...&gt; y &lt;/font&gt; del c&oacute;digo html. Estas etiquetas de fuentes algunas veces son usadas en grandes cantidades por alg&uacute;n editor de html pobre en dise&ntilde;o gr&aacute;fico y causa muchos problemas cuando son mostradas las p&aacute;ginas en diferentes navegadores y con diferente tama&ntilde;o de pantalla. Esta sencilla versi&oacute;n quita todas las etiquetas de fuentes. Puedes cambiarlo para borrar solamente el tipo de fuente o tama&ntilde;o y dejar el color sin cambiar.
<PRE>#!/usr/bin/perl -w
use strict;
use HTML::TagReader;
# strip all font tags from html code but leave the rest of the
# code un-changed.
die "USAGE: delfont file.html &gt; newfile.html\n" unless ($ARGV[0]);
my $file = $ARGV[0];
my ($tagOrText,$tagtype,$linenumber,$column);
#
my $p=new HTML::TagReader "$file";
# read the file with getbytoken:
while(($tagOrText,$tagtype,$linenumber,$column) = $p-&gt;getbytoken(0)){
 if ($tagtype eq "font" || $tagtype eq "/font"){
print STDERR "${file}:${linenumber}:${column}: deleting $tagtype\n";
 next;
 }
 print $tagOrText;
}
# vim: set sw=4 ts=4 si et:


</PRE>Como puedes ver es f&aacute;cil escribir programas &uacute;tiles con pocas l&iacute;neas.<BR>
El paquete del c&oacute;digo fuente de HTML::TagReader (ver referencias) contiene algunas aplicaciones de HTML::TagReader:<UL>


<LI>tr_blck -- chequea enlaces rotos en p&aacute;ginas html.
  <LI>tr_llnk -- lista los enlaces en ficheros HTML.
  <LI>tr_xlnk -- expande los enlaces en directorios dentro de un enlace de un fichero de &iacute;ndices.
  <LI>tr_mvlnk -- modifica etiquetas en ficheros HTML con comandos de Perl.
  <LI>tr_staticssi -- expande directivas SSI  #include virtual y
  #exec cmd y produce una p&aacute;gina html est&aacute;tica.
  <LI>tr_imgaddsize -- a&ntilde;ade ancho=... y alto=... a &lt;img
  src=...&gt;.
</LI></UL>

tr_xlnk y tr_staticssi son muy &uacute;tiles cuando quieres hacer un CDROM de un sitio web. En el servidor web por ejemplo te aparecer&aacute; http://www.linuxfocus.org/index.html incluso si escribes solamente http://www.linuxfocus.org/ (sin el index.html). Si tu solamente grabas todos los ficheros y directorios en un CD y accedes al CD con el navegador web directamente (file:/mnt/cdrom) entonces veras solamente un listado del directorio en vez de index.html. La compa&ntilde;&iacute;a que hizo el primer Linux<font color="#FF0000">Focus</font> CD cometi&oacute; este error y fue horrible usar el CD. Ahora que ellos cogen el dato via tr_xlnk los CDs funcionan.<BR
clear="all">
 <BR>
Estoy seguro que encontraras HTML::TagReader &uacute;til. &iexcl;Feliz programaci&oacute;n!

<A NAME="269lfindex3">&nbsp;</A>
<H2>Referencias</H2>

<UL>
<LI><A href=
  "../../common/src/article269/man_HTML_TagReader.html"> P&aacute;gina de ayuda de
  HTML::TagReader</A></LI>


  <LI>Tutorial de Perl: <A href="../January2000/article136.html">Perl
  III (January 2000)</A></LI>




  <LI>El programa tr_tagcontentgrep  (no utiliza
  HTML::TagReader): <A href=
  "../../common/src/article269/tr_tagcontentgrep.txt">tr_tagcontentgrep
  (txt)</A> or <A href=
  "../../common/src/article269/tr_tagcontentgrep.html">tr_tagcontentgrep
  (html)</A>





<LI>El c&oacute;digo fuente de HTML:TagReader:<BR>
  <A href=
  "http://cpan.org/authors/id/G/GU/GUS/">http://cpan.org/authors/id/G/GU/GUS/</A><BR>
>
   o<BR>
   <A href=
  "http://main.linuxfocus.org/~guido/index.html#TagReader">http://main.linuxfocus.org/~guido//index.html#TagReader</A>
<LI>Tidy  es esencial si dise&ntilde;as p&aacute;ginas web:
<A href:"http://www.w3.org/People/Raggett/tidy/"> tidy, una utilidad para chequear la sintaxis de html</A><BR>
 C&oacute;mo usar tidy? Facilmente: <BR>
  <TT>tidy -e file.html</TT><BR>
  imprimir&aacute; errores html <BR>
  <TT>tidy -im -raw file.html</TT><BR>
  editar&aacute; el fichero e indentar&aacute; bonitamente. Tambi&eacute;n corregir&aacute; faltas (al menos aquellas para las que tidy haya adivinado que quer&iacute;as decir).
<BR></LI></UL>


<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1" summary="tb-button-outerpart">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1" summary="tb-button">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=269"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Guido Socher, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#9999AA">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE summary="translators">
  <tr><td><font size="2">en --&gt; -- : Guido Socher (<a href="http://linuxfocus.org/~guido/"><font size="1">homepage</font></a>)</font></td></tr>
  <tr><td><font size="2">en --&gt; es: Mar&iacute;a P&eacute;rez &lt;lupeagui(at)hotmail.com&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2003-01-01, generated by lfparser version 2.34</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
