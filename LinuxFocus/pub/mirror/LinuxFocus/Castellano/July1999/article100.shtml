<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//ES">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.21">
 <META NAME="LFCATEGORY" CONTENT="Software Development">
<!-- this is used by a number of tools:
 =LF=AUTHOR: Emre Demiralp
 =LF=CAT___: Software Development
 =LF=TITLE_: Postscript III:Manejo de datos en PostScript: Arrays, Variables, Bucles y definiciones de Macros
 =LF=NUMBER: 100
 =LF=ANAME_: article100.html
 -->
 <TITLE>lf100, Software Development: Postscript III:Manejo de datos en PostScript: Arrays, Variables, Bucles y definiciones de Macros</TITLE>
<!-- stylesheet added by lfparser: --> 
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-familiy:monospace,Courier }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; border-style:none; border-width:medium; border-color:#FFD700; padding:0.5cm ;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; border-style:none; border-width:medium; border-color:#aedbe8; padding:0.1cm ;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; border-width:medium; border-color:#AAAAAA; padding:0.5cm ; margin-top:0.1cm; margin-right:1cm; margin-left:1cm; text-align:center }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar -->
 <!-- top navegation bar -->
 <TABLE cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="144"><IMG src="../../common/images/logolftop.gif"
           alt="[LinuxFocus-icon]" width="350" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE width="100%">
               <TR align="right">
                 <TD class="top"><A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="-1">Hogar</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="-1">Mapa</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="-1">Indice</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="-1">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="30%" >
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<IMG SRC="../../common/images/Emre-D.gif" ALT="[Photo of the Author]" HEIGHT=147 WIDTH=132>
<BR>por  Emre Demiralp <br> <small>&lt;emre(at)kardelen.fe.itu.edu.tr&gt;</small>
<BR><BR>
<I>Sobre el autor:</I><BR>
<P>Soy estudiante en del  Istanbul American Robert
College, y al mismo tiempo uno de los administradores del sistema
de ordenadores de la facultad de Ciencias y Letras de la Universidad T&eacute;cnica
de Estambul. El sistema operativo predominante es LINUX. Intereses:
PovRay y PostScript, animaci&oacute;n, dise&ntilde;o de CD's, programaci&oacute;n, holografia.
Soy usuario de Linux desde 1994.</P>
<!-- TRANSLATED TO es -->
<BR><BR><I>Taducido al espa&ntilde;ol por:</I><BR>
Alberto Pardo <small>&lt;apardoyo(at)yahoo.es&gt;</small>
<br>
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#100lfindex0">Introducci&oacute;n</A></LI>
  <LI><A HREF="#100lfindex1">Arrays y operadores de Array</A></LI>
  <LI><A HREF="#100lfindex2">Claves y Variables</A></LI>
  <LI><A HREF="#100lfindex3">Bucles</A></LI>
  <LI><A HREF="#100lfindex4">Procedimientos o
Definiciones de
Macros</A></LI>
  <LI><A HREF="#100lfindex5">Ejercicios</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<H2>Postscript III:Manejo de datos en PostScript: Arrays, Variables, Bucles y definiciones de Macros</H2>
 <IMG SRC="../../common/images/suleyman.gif" ALT="[Ilustration]"
HSPACE=10 HEIGHT=114 WIDTH=266>
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<P><BLOCKQUOTE><I>Quien sabe demasiado, se equivoca demasiado.<BR>
-Proverbio turco-.</I><BR></BLOCKQUOTE>
El autor continua la descripci&oacute;n del manejo de datos en lenguaje
PostScript.
La definici&oacute;n de arrays, operaciones con arrays, definici&oacute;n de variables,
bucles y definiciones de macros se presentan el el presente art&iacute;culo con
suficiente detalle. Adem&aacute;s de ilustrarlo con ejemplos y preguntas que se
contestar&aacute;n en el proximo art&iacute;culo.
</P></P>
<HR size="2" noshade align="right"><BR>
<!-- BODY OF THE ARTICLE -->


<!--   BODY OF THE ARTICLE    -->


<A NAME="100lfindex0">&nbsp;</A>
<H3>Introducci&oacute;n</H3>


<P>Este es el tercero  de una serie de art&iacute;culos sobre PostScript. Continuaremos
con las operanciones con la pila de PostScript. Se recalcar&aacute; sobre la definici&oacute;n
de los arrays, operadiones con arrays, definiciones de variables, definiciones de
loops y macros. Se explicaran los aspectos m&aacute;s importantes de estos puntos,
ilustrandiose con algun ejemplo.
Se ampliar&aacute;n los conceptos de las operaciones don la pila en un futuro art&iacute;culo </P>

<A NAME="100lfindex1">&nbsp;</A>
<H3>Arrays y operadores de Array</H3>



<P>En anteriores art&iacute;culos de esta serie, se comento la estructura de los operadores de
stack y de las operaciones con las que podemos las extructuras de las pilas.
Recordamos que todo lo que guardamos en la pila eran enteros, exceptuando unos elementos
especiales que se usan como puntos de refenrencia en las pilas. Estos elementos los
llamabamos <TT>-marktype-</TT> y los operadores: <TT>cleartomark</TT> y <TT>counttomark</TT>,
Y ser&aacute;n utilizados para limpiar o contar  los elementos desde el principio hasta el final de
la pila.Tambien se puede crear otro tipo de extructura que puede incluir muchos elementos.
Este tipo de estructura se le denomina <TT>array</TT> y es posible operar con sus
elementos usando <TT>los operadores de array</TT> del lenguaje PosScript.
Vamos a ilustrar estos conceptos con un ejemplo de ordenar los operadores de un array.</P>

<P><B>[&nbsp;&nbsp;:</B>Esto crea un elemento marktype en el stack.
A menos que no se acompa&ntilde;e de <TT>]</TT> funciona igual que un comando
<TT>mark</TT>. Todos los elementos que entren en el operando stack despues de este
operador considerados elementos individuales aunque esten marcados con un punto de
 referencia despues de ellos en el operando stack.

A continuaci&oacute;n se explica la relaci&oacute;n entre <TT>[</TT> y <TT>mark</TT> </P>

<PRE><TT>GS&gt;[ pstack
-marktype
GS&lt;1&gt;2 3 mark pstack
-marktype-
3
2-marktype-
GS&lt;4&gt;</TT></PRE>

<P><B>]&nbsp;&nbsp;:</B>Este es el acompa&ntilde;ante del operador anterior
<TT>[</TT>.
El stack debe contener un elemento marktype o tipo marca antes de que se de ese elemento.
De hecho, se el considera  como una marcar que indica el final del array y completa la
construcci&oacute;n del array. Todo final necesita un principio, PostScript tiene su compa&ntilde;ero,
la marca de inicio <TT>]</TT> . Si <TT>[</TT> se piederde, PostScript devuelve un mensaje
 de error y no se ejecuta la operaci&oacute;n. Si el elemento registra el operando stack despues
de  <TT>[</TT> entonces se crea un array vacio y se almacena una sola entidad o elemento
en el array ( el elemento marktype se convierte en parte del array, aqu&iacute; aparece como
 un elemento diferente) tal como se muetra a continuaci&oacute;n: </P>

<PRE><TT>GS&gt;[ pstack
-marktype-
GS&lt;1&gt;] pstack
[]
GS&lt;1&gt;</TT></PRE>

<P>Despues de todo esto, el stack contiene un &uacute;nico elemento, un array vacio.
Para crear un Array con datos, se realiza con
<TT>[</TT>
y <TT>]</TT> junto con los elementos al mismo tiempo en una &uacute;nica entrada de datos. Tal
 como se muestra a continuaci&oacute;n: </P>

<PRE><TT>GS&gt;[ 1 2 3 ] pstack
[1 2 3]
GS&lt;1&gt;</TT></PRE>

<P>El array se considera como una &uacute;nica entidad.<BR>
<BR>
Se puede crear un array que este vacio pero que pueda contener un n&uacute;mero determinado
de elementos. Para ello ser&aacute; necerario el uso de <TT>null</TT> que significa <TT>nada</TT>. </P>

<PRE><TT>GS&gt;[ null null ] pstack
[null null]
GS&lt;1&gt;</TT></PRE>

<P><B>array:</B>Este comando necesita un par&aacute;metro entero. Si el par&aacute;metro
es <TT>n</TT> el comando es <TT>n array</TT>. Esto permite crear un array
conteniendo exactamente <TT>n</TT> <TT>null</TT> elementos.

Hace lo mismo que crear un array con los simbolos de inicio y fin.

Por ejemplo, <TT>3 array</TT>, es lo mismo que  <TT>[ null null null
]</TT>.
Busca su par&aacute;metro como primer elemento del operando stack. Si se da antes
del comando, entoces entra el operando stack y se convierte en el primer elemento
que toma el comando. Si no se introduce el par&aacute;metro, entonces el primer elemento del
operando stack determina lo que pasar&aacute;. Si el valor es entero, su valor se utilizar&aacute;
por el comando, en otro caso aparece un mensaje de error debido a incompatibilidades.
</P>

<P><B>length:</B>Evalua el n&uacute;mero de elementos de un array. Los elmentos
<TT>null</TT> tambien se cuentan.
Este operador necesita un par&aacute;metro que debe estar situado como primer
elemento del array.Y desaparece cuando finaliza la ejecuci&oacute;n de la operaci&oacute;n.
Para que no haya problemas este par&aacute;metro se ha de asignar antes de ejecutar la
operaci&oacute;n. Veamos un ejemplo </P>

<PRE><TT>GS&gt;[ 1 2 3 4 5 ] length pstack
5
GS&lt;1&gt;</TT></PRE>

<P>Si no damos el paramentro para el operador <TT>length</TT>
entonces el comando usara el primer elemento del operando stack, se sustituira por el
n&uacute;mero de elementos que haya en el array </P>

<PRE><TT>GS&lt;1&gt;pstack
[1 2 3 6 7]
GS&lt;1&gt;length pstack
5
GS&lt;1&gt;</TT></PRE>

<P>aparecer&aacute; un mensaje de error, si el primer elemento del operando stack no es un array.</P>

<P><B>get:</B>Necesita dos par&aacute;metros. El primero ha de ser un array y el segundo un entero.
Toma un elemento especificado del array. La posici&oacute;n viene determinada por el segundo
par&aacute;metro: el entero. La posici&oacute;n viene indehe position of the element to be gotten is the
second parameter of the operator. The positions are indexxada con n&uacute;meros naturales,
empezando por cero. De hecho esta regla se aplica a todos los par&aacute;metros del operando.
 El comando usa estos par&aacute;metros y despues son borrados. Su tipo ha de ser compatible
 con los valores dados. No se recalcar&aacute; sobre este punto nunca m&aacute;s. Veamos un emjemplo
 de <TT>get</TT> . </P>

<PRE><TT>GS[1 6 3 0 9] 0 get pstack
1
GS&lt;1&gt;</TT></PRE>

<P><B>put:</B>Necesita tres parametros.Son respctivamente: array, &iacute;ndice y el elemento a
insertar en el array. Se ejecuta de la siguiente manera: Toma el array, busca la localizaci&oacute;n
 con el &iacute;ndice, y sustituye el elemento que hay por el tercer par&aacute;metro.

El array resultante, no se almacena en el operador stack. Por consiguiente, definiremos un
 array variable (o en terminologia Postcript, una llave), mediante el uso del operador
 <TT>put</TT>. De esta manera, el array se asigna al stack.
Veamos un ejemplo: </P>

<PRE><TT>GS&gt;[1 2 3] 0 8 put
GS&gt;</TT></PRE>

<P>De echo, no ha ocurrido nada y no aparece ning&uacute;n mensaje de error. Put se ha ejecutado
correctamente, pero no se ha guardado el array en el stack. Para ello se ha de hacer un
paso m&aacute;s: </P>

<PRE><TT>GS&gt;/ar [ 1 2 3 ] def
GS&gt;ar 0 8 put
GS&gt;ar pstack
[8 2 3]
GS&lt;1&gt;</TT></PRE>

<P>Primero se define el array variable o llave. Su nombre es <TT>ar</TT>.
El segundo paso consiste en cambiar el primer elemento (con indice 0) por
<TT>8</TT>
usando el operador put. Despu&eacute;s con <TT>ar pstack</TT>
se inserta
el valor del array variable <TT>ar</TT> en el opertador stack y se
visualiza su contenido. Ya se mencionar&aacute; como se define la variable
m&aacute;s adelante,en este art&iacute;culo. Los comentarios sobre diccionarios y el
diccionario Stack se realizar&aacute;n en posteriores art&iacute;culos de esta serie.
</P>

<P><B>getinterval:</B>Crea un subarray a partir de un array.
Necesita tres parametros.Respectivamente son : el array, de donde se crea el sukbarray,
el &iacute;ndice que especifica el primer elemento del subarray, y un entero que indica el n&uacute;mero
de elementos del subarray. Cuando se ejecuta, toma el n&uacute;mero de elementos (indicado por
el tercer parametro)del array (el primer par&aacute;metro) empezando por la posici&oacute;n indicada
por el &iacute;ndice (segundo par&aacute;metro)y copia el resultado en un nuevo array. El nuevo array
se inserta en el operando stack. Por ejemplo,
</P>

<PRE><TT>GS&gt;[1 2 3 4 5 6 7 8 9] 2 3 getinterval pstack
[3 4 5]
GS&lt;1&gt;</TT></PRE>

<P><B>putinterval:</B>Reemplaza un subarray de un array dado por otro array.
Se necesitan tres parametros : Primero, el array de donde
se extrae
el subarray; segundo, el integer que indica la posici&oacute;n del subarray a
cambiar; y tercero, el array que subtituir&aacute; al subarray. Este comando
es similar a <TT>put</TT>. Veamos un ejemplo: </P>

<PRE><TT>GS&gt;/ar [1 2 3 4 5 6 7 8 9] def
GS&gt;ar 3 [0 0 0] putinterval
GS&gt;ar pstack
[1 2 3 0 0 0 7 8 9]
GS&lt;1&gt;</TT></PRE>

<P><B>aload:</B>Toma el array como par&aacute;metro y copia sus elementos
como entidades simples en el stack.
Veamos un ejemplo: </P>

<PRE><GS><TT>[1 2 3] aload pstack
[1 2 3]
3
2
1
GS&lt;4&gt;</TT></PRE>

<P><B>astore:</B>Reemplaza todos los elementos de un array
dado como segundo par&eacute;mero con una secuencia de elementos cuyos n&uacute;mero
es igual a la longitud del array del operador stack. El resultado es
un nuevo array con los elementos sustituidos. </P>

<PRE><TT>GS&gt;1 2 3 [null null null] astore pstack
[1 2 3]
GS&lt;1&gt;</TT></PRE>

<P><B>copy:</B> Copia el primer par&aacute;metro del array en el primer subarray
dado como segundo par&aacute;metro. El resultado es el array copiado, no el segundo
subarray.
Veamos un ejemplo: </P>

<PRE><TT>GS&gt;[1 2 3] [4 5 6 7 8] copy pstack
[1 2 3]
GS&lt;1&gt;/ar [4 5 6 7 8] def
GS&lt;1&gt;[1 2 3] ar copy
GS&lt;2&gt;ar pstack
[1 2 3 7 8]
[1 2 3]
[1 2 3]
GS&lt;3&gt;</TT></PRE>

<P> Los elementos del array no han de ser enteros. Puede ser arrays de car&aacute;cteres
o cadenas de car&aacute;cteres. Se puede anidar estructuras de arrays. Esto permite
utilizar operaciones sobre matrices y definiciones de macros sobre matrices.
Esto permite trabajar con secuencias multidimensionales.
</P>

<A NAME="100lfindex2">&nbsp;</A>
<H3>Claves y Variables</H3>



<P>Como cualquier otro lenguaje de programaci&oacute;n se puede definir variables.
Esto permite manenjar cantidades sin tener en cuenta su situaci&oacute;n en la memoria.
Se puede guardar un dato en memoria y acceder mediante una direcci&oacute;n o clave.
La primera aproximaci&oacute;n es el uso de punteros como en C.... Si no quieres utilizar
direcciones, ya tienes suficiente con el uso de claves. En este caso es el interprete
del lenguaje quien se encarga del acceso a memoria y otras operaciones. As&iacute; puedes definir
un nombre y asignarle un valor. La manera que tiene de trabajar PostScript es mediante
diccionarios que contienen los nombres y sus definiciones relacionadas. As&iacute; un diccionario
se compone en parejas : la llave &oacute; <TT>key</TT> y el valor &oacute; <TT>value</TT>. Por ejemplo,
 <TT>add</TT>  es un nombre(<TT>key</TT>)que hace la suma(<TT>value</TT>).
PostScript conoce el significado de <TT>add</TT> por que esta guardado en el
dictionario cuyo ic <TT>systemdict</TT>. Si se introduce <TT>1 2 add
pstack</TT> se muestra el resultado <TT>3</TT> debido a que PostScriptbecause PostScript
mira lso tres nombres y ejecuta la instrucci&oacute;n. Priemro encuentra <TT>1</TT> y
<TT>2</TT> y entonces <TT>add</TT>. Los primeros objetos son enteros, as&iacute; que se guardan en
la memoria. El tercer elemento es una cadena de car&aacute;cteres,as&iacute; que debe ser un nombre
(<TT>key</TT>) o no. PostScript busca en su diccionario o diccionarios dicho nombre. Si lo
encuentra, ejecuta la instrucci&oacute;n.
Desde que existe <TT>add</TT> en el diccionario, <TT>systemdict</TT> hay una acci&oacute;n
(<TT>value</TT>) para este nombre (<TT>key</TT>). Toma los dos primeros elementos del stack,
realiza la suma y el resultado lo pone como primer  elemento del stack. La parte que queda
de la orden es la cadena <TT>pstack</TT> que esta en el diccionario y significa &quot;
presenta el contenido del stack en la salida standard &quot. Por otro lado se puede tomar
la siguiente linea del interprete como un error :
<TT>1 2 dad pstack</TT>. En este caso el interprete puede presentar un mensaje de error
debido a que no es una llave o nombre,  <TT>dad</TT> definida en el diccionario de PostScript.
</P>
<P>No estamos limitados a las definiciones del diccionario del sistema de PostScript. Se puede definir nuestros propios procedimientos o comandos
del usuario.
Si lo que se definen son identificadores, entonces los podemos llamar
<TT>variable</TT> aunque no es su uso en la terminologia PostScript.
Nuestro proposito es realizar llamadas desde otros lenguajes de programaci&oacute;n
conocidos.  Para realizar una definici&oacute;n de varible se debe declarar
<TT>/x value def</TT> donde <TT>value</TT> es un objeto de Postcript del tipo
integer, array, string ... Podemos considerar, por ejemplo, el caso de <TT>/x 12 def</TT>
en la l&iacute;nea del prompt. Cuando esta hecho, el interprete de PostScript toma tres objetos,
 <TT>/x</TT>, <TT>12</TT> and <TT>def</TT>. Los objetos que empiezan con el caracter "/"
los reconoce como llaves o nombres. Se pueden insertar en el stack sin comprobar si existenen
 en alg&uacute;n diccionario.

El comando <TT>def</TT> esta definido en el diccionario del sistema de PostScript
de tal manera que necesita dos parametros: El primero se define como una llave o nombre,
 y el segundo es el valor que se le asigna al nombre. Por lo tanto, PostScript crea el par
<TT>key-value</TT> despu&eacute;s de este comando, <TT>/x 12 def</TT>, lo publica y lo coloca en
 el siguiente diccionario <TT>current dictionary</TT>.Este elemento es el primero del
diccionario, del que m&aacute;s adelante haremos menci&oacute;n. Despues de este punto, <TT>x</TT>
se reconocer&aacute; por Postcript como <TT>12</TT> durante el resto de la sesi&oacute;n.</P>

<P>En principio cualquier cadena de caracteres que empiece con "/" se puede utilixar como llave.
De todas maneras es mejor utilizar letras y n&uacute;meros. Evitar el uso de car&aacute;teres especiales del
tipo : "/" , puntos, etc... Ya que PostScript los puede interporetar como modificadores, dando
lugar a respuestas inesperadas.

La limitaci&oacute;n del n&uacute;mero de caracteres viene determinado por el interprete que se este
utilizando. De hecho, no es practico utilizar nombres formados por 100 caracteres, aunque
 el interprete lo permite. PostScript distingue entre mayusculas y minusculas, lo que aumenta
 su versatilididad. Hay que ser cuidadoso y no definir nombres que esten en el diicionario de
 Postcript ya que el nuevo nombre sustituir&aacute; al del diccionario. Po ejemplo, si se define
<TT>/add 13 def</TT> entonces <TT>add</TT> se confvierte en una constante y perdemos esta
orden en lo que queda de sesi&oacute;n.</P>

<A NAME="100lfindex3">&nbsp;</A>
<H3>Bucles</H3>


<P>PostScript permite crear instrucciones repetitivas, denominadas bucles. Esto permite
repetir el mismo tipo de ejecuciones. A continuaci&oacute;n presentamos una instrucci&oacute;n que
permite esto:</P>

<P><B>repeat:</B>Necesita dos par&aacute;metros.El primero es del tipo integer he indica el n&uacute;mero
de repeticiones que se han de hacer y el segundo es un procedimiento que consiste en un
bloque acciones. In PostScript la definici&oacute;n de bloque se realiza con los limitadores
<TT>{</TT> y <TT>}</TT>.

Las instrucciones o comandos se han de poner entre estos limitadores. La sintaxis es de la
forma <TT>n { ... }  repeat</TT>.
Al ejecutar esta instrucci&oacute;n, PostScript toma el primer operando y lo coloca en el stack.
Se ejecuta todas las instrucciones incluidas en el bloque <TT>{ ... }</TT> . Y por &uacute;ltimo
 se busca la orden <TT>repeat</TT> en el diccionario del sistema y se ejecuta el bloque
<TT>n</TT> veces. Veamos un ejemplo. </P>

<PRE><TT>GS&gt;3 {1} repeat
1
1
1
GS&lt;3&gt;</TT></PRE>

<P>Tres valores enteros , <TT>1</TT> se insertan en el stack. De hecho, este procedimiento
es muy simple. Se trata de entrar <TT>1</TT>. Veamos un ejemplo un poco m&aacute;s complicado. </P>

<PRE><TT>GS&gt;1 5 {1 add} repeat pstack
6
GS&lt;1&gt;</TT></PRE>

<P>En este ejemplo, primero <TT>1</TT> se entra en el operando stack y se ejecuta la
instrucci&oacute;n <TT>{1 add}</TT> <TT>5</TT> veces sobre el stack. Esta ejecuci&oacute;n en <TT>5</TT>
veces sigue de la siguiente manera. Se ejecuta en el primer paso <TT>1 add</TT> .
<TT>add</TT> necesita dos parametros, el segundo de los cuales se da en el procedimiento.
El primer parametro (o <TT>operand</TT>) en terminologia PostScript se toma del stack.
Ademas se ejevuta el primer paso de la repetici&oacute;n, <TT>1 1 add</TT> .
El &uacute;nico elemnto del stack se elimina tras la ejecuci&oacute;n y el resultado, que  es <TT>2</TT>,
se inserta como primer elemento. En el segundo paso continua con <TT>2 1 add</TT> y se obtiene
 un nuevo resultado <TT>3</TT>. Esto nos lleva al tercer paso <TT>3 1 add</TT>. As&iacute; con los
siguientes: <TT>4 1 add</TT> y <TT>5 1 add</TT>. Al final solo tenemos un elemento en el stack
 <TT>6</TT>.</P>

<P><B>for:</B>Este comando utiliza una variable de control del tipo entero para la ejecuci&oacute;n
del proceso que se ha de repetir. La variable de control empieza desde un valor dado y se va
incrementando despues de cada ejecuci&oacute;n del proceso. Este proceso continua hasta sobrepasar
un limite preestablecido. Este comando necesita cuatro variables, las primeras tres son
 respectivamente <TT>Initial</TT>, <TT>Increment</TT>, and <TT>Limit</TT>.
Estos tres parametros son del tipo entero o decimal. El cuarto parametro es el procedimineto,
 que puede ser una instruccio&oacute;n o un bloque de instrucciones indicados por los siguientes
 simbolos <TT>{</TT> y <TT>}</TT>. La sintaxis del comando es <TT>Initial Increment Limit
Procedure for</TT>. Cuando se ejecuta, PostScript crea un contador temporal varible
(control variable en terminologia PostScript ) y lo inicializa al valor <TT>Initial</TT>.
Este valor se inserta en el stack. Que puede o no ser utilizado por <TT>Procedure</TT>
como operando. Si se usa se elimina del stack, en caso contrario permanece en &eacute;l.
Despues de que la variable contador se actiova a  <TT>Initial</TT> se ejecuta
<TT>Procedure</TT>. A continuaci&oacute;n se incrementa la variable contador con el valor de
<TT>Increment</TT>. El bucle continmua hasta que el valor del contador excede del valor
<TT>Limit</TT>. Lo que se esta indicando es que se ha sobrepasado el intervalo entre
<TT>Initial</TT> y <TT>Limit</TT>.
Si <TT>Increment</TT> es positivo, la ejecuci&oacute;n de <TT>for</TT> se completa cueando la varable
cotador sobrepasa a <TT>Limit</TT>.  El otro caso, la ejecuci&oacute;n de <TT>for</TT> para cuando
la variable contador es menor que el  <TT>Limit</TT>. Hay que asegurarse que la variable
<TT>Initial</TT> debe ser menor que <TT>Limit</TT> cuando <TT>Increment</TT> es positivo y
viceversa. Veamos un ejemplo para ser m&aacute;s explicitos. </P>

<PRE><TT>GS&gt;1 -0.5 -1 {} for pstack
-1.0
-0.5
0.0
0.5
1.0
GS&lt;5&gt;clear 0 1 1 23 {add} for pstack
276
GS&lt;1&gt;</TT></PRE>

<P>El primer comando es del tipo null y no hace nada. Todos los valore pasan al stack  y
permanecen all&iacute; hasta que se utilicen. El segundo, la siguiente orden incluye un procedimiento
<TT>add</TT> que necesita dos operandos. El primer elemento corresponde al primer elemento del
stack y el segundo corresponde al valor del contador del bucle, se inserta en el stack en este
paso.

El segundo comando evalua la suma de los 23 primeros numeros positivos enteros.

Se necesita un valor inicial para poder realizar la suma. Por eso temnemos el 0 antes de la
orden. No forma parte de la orden <TT>for</TT>.</P>

<P><B>forall:</B>Este comando ejecuta un procediemiento por cada elemento de un array dado.
Para ello enumera cada elemento empezando desde 0. Utiliza una variable temporal para controlar
el bucle. La variable temporal empieza desde 0, incrementadose de 1 en 1 hasta llegar al final
del array. El bucle es parecido al comando <TT>for</TT>. La diferencia esta, en que se emplean
elementos de un array en lugar de una variable para contar. Este comando necesita dos operandos.
El primero es el array con los elementos que se van a utilizar y el segundo es el procedimiento.
La sintaxis completa es is <TT>Array Procedure forall </TT>. Veamos a continuaci&oacute;n un ejemplo,
cuyo objetivo es obtener la suma de un array dado y poner los elementos en otro array. </P>

<PRE><TT>GS&gt;0 [11 23 45 -89 26 12 0 -34] {add} forall pstack
-6
GS&lt;1&gt;[1 22 -12 0] {} forall pstack
0
-12
22
1
-6
GS&lt;5&gt;</TT></PRE>

<P><B>loop:</B>El procedimiento busca el comando que ha de ejecutar y lo hace indefenidamente.
El bucle se rompe externamente, por ejemplo con  <TT>Ctrl-C</TT> . Se puede mejorar el programa
permitiendo que en determinadas condiciones el bucle se pare. La sintaxis del comando es
<TT>Procedureloop</TT>.</P>

<A NAME="100lfindex4">&nbsp;</A>
<H3>Procedimientos o
Definiciones de
Macros</H3>



<P>En PostScript, <TT>Procedure</TT> (procedimiento) or <TT>Macro</TT> significa un conjunto
ordenado de objetos. Estos deben ser agrupados con limitadores  <TT>{</TT> and <TT>}</TT>.
Se pueden crear utilizando la definici&oacute;n <TT>/Macro1 {1 add 2 mul} def</TT>.
Una vez hecho <TT>/Macro</TT> y su valor <TT>{1 add 2 mul}</TT> se a&ntilde;ade al diccionario
colocandose como primer elemento, como par <TT>key-value</TT>.
Al aparecer el objeto <TT>Macro1</TT> en el promt de interprete, se ejecuta lo que tiene esta
macro. Lo que se defina en la macro, puede ser simple o complidaca. En futuros art&iacute;culos
ampliaremos el tema de las macros.

</P>

<A NAME="100lfindex5">&nbsp;</A>
<H3>Ejercicios</H3>



<P>Cuando empezamos esta sere de art&iacute;culos dimos algunos ejercicios para el lector.
En este art&iacute;culo encontraras las soluciones.</P>

<LI><B>1)</B>&nbsp;&nbsp;Escribir un procedimiento que tome un valor entero y realice
la suma de los cuadrados desde 1 hasta ese valor inclusive.<BR>
<BR>
</LI>

<LI><B>2)</B>&nbsp;&nbsp;Escribir un procedimiento que tome dos enteros y calcule
los cubos de los enteros comprendidos entre estos dos enteros inclusives. Se debe crear
un array donde poner los resultados.<BR>
<BR>
</LI>

<LI><B>3)</B>&nbsp;&nbsp;Escribir un procedimiento que calcule la media aritmetica de los
elementos de un array. Se debe obtener tambi&eacute;n la ra&iacute;z cuadrada de la suma de los cuadrados
de los elementos del array.<BR>
<BR>
</LI>

<LI><B>4)</B>&nbsp;&nbsp;Assume that the PostScript does not have
<TT>exp</TT> procedure and write a procedure which takes two numerical
values
as operands and considers the first operand as base and the second
operand
as the exponent. The procedure will evaluate the exponent-th power of
the
base. The operands must be maintained in the operand stack after the
operation.<BR>
<BR>
</LI>

<LI><B>5)</B>&nbsp;&nbsp;The mathematical object, matrix, can be
considered
as the array of arrays. An <TT>N</TT> row square matrix can be
represented
by an <TT>N</TT>-element array whose elements are again
<TT>N</TT>-element
arrays. Call this type array of arrays &quot;Square Matrix&quot;. Write
a procedure which takes a square matrix operand and evaluates its trace
(the sum of the diagonal elements). The result and the original square
matrix must be maintained after the operation.<BR>
<BR>
</LI>

<LI><B>6)</B>&nbsp;&nbsp;Se escribe un procedimiento que utiliza un operador de matrices cuadradas y evalua su transpuesta.(las filas se intercambian por las columnas).
<BR>
<BR>
</LI>

<LI><B>7)</B>&nbsp;&nbsp;Se escribe un procedimiento que apartir de dos matrices cuadradas y se obtiene la suma de ambas. La matriz cuadrada original y el resultado se deben guardar despues de la operaci&oacute;n.<BR>
<BR>
</LI>

<LI><B>8)</B>&nbsp;&nbsp;Escribir un procedimiento que tome dos matrices cuadradas y realice
el producto entre ellas. El resultado y las matrices originales han de conservarse despues de
la operaci&oacute;n.
<BR>
<BR>
</LI>




<!-- 2pdaIgnoreStart -->
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Emre Demiralp, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
<BR><a href="http://cgi.linuxfocus.org/cgi-bin/lfcomment?lang=es&amp;article=article100.html" target="_TOP">Pinchar aqu&iacute; para informar de alg&uacute;n problema o enviar comentarios a LinuxFocus</A><BR></TD>
<TD BGCOLOR="#9999AA">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE>
  <tr><td><font size="2">en --&gt; -- : Emre Demiralp <small>&lt;emre(at)kardelen.fe.itu.edu.tr&gt;</small></font></td></tr>
  <tr><td><font size="2">en --&gt; es: Alberto Pardo &lt;apardoyo(at)yahoo.es&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2002-02-21, generated by lfparser version 2.21</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
