.\"
.\" Copyright (c) 1993 Michael Haardt (michael@moria.de),
.\"   Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Tue Jul  6 12:42:46 MDT 1993 <dminer@nyx.cs.du.edu>
.\" Added "Calling Directly" and supporting paragraphs
.\"
.\" Modified Sat Jul 24 15:19:12 1993 by Rik Faith <faith@cs.unc.edu>
.\"
.\" Modified 21 Aug 1994 by Michael Chastain <mec@shell.portal.com>:
.\"   Added explanation of arg stacking when 6 or more args.
.\"
.\" Modified 10 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" Traducción por Urko Lusa <ulusa@lacueva.ddns.org> 19980213
.\" Translation revised Mon Aug 17 1998 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Fri Jun 25 1999 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Sat Jan  8 2000 by Juan Piernas <piernas@ditec.um.es>
.\"
.TH INTRO 2 "22 mayo 1996" "Linux 1.2.13" "Manual del programador de Linux"
.SH NOMBRE
intro \- Introducción a las llamadas al sistema
.SH DESCRIPCIÓN
Este capítulo describe las llamadas al sistema de Linux.
En 
.BR syscalls (2)
encontrará una lista de las 164 llamadas al sistema presentes en Linux 2.0
.SS "Llamadas directas"
En la mayoría de los casos no es necesario invocar una llamada al sistema
directamente, pero hay veces en que la biblioteca C estándar carece de una
función adecuada.
.SS "Sinopsis"
.B #include <linux/unistd.h>

Una macro de tipo _syscall
.SS Configuración
Lo importante a conocer sobre una llamada al sistema es su prototipo. Es
necesario saber cuántos argumentos usa, sus tipos, y el tipo retornado por
la función. Hay seis macros que facilitan la llamada real al sistema. Tienen
la siguiente forma:
.sp
.RS
.RI _syscall X ( tipo , nombre , tipo1 , arg1 , tipo2 , arg2 ,...)
.RS
.HP
donde \fIX\fP es 0\(en5, el número de argumentos usado por la llamada del
sistema
.HP
\fItipo\fP es el tipo devuelto por la llamada al sistema
.HP
\fInombre\fP es el nombre de la llamada al sistema
.HP
\fItipoN\fP es el tipo del argumento nº N
.HP
\fIargN\fP es el nombre del argumento nº N
.RE
.RE
.sp
Estas macros crean una función llamada \fInombre\fP con los argumentos
especificados. Una vez incluida _syscall() en el fichero fuente, se invoca a
la llamada al sistema mediante \fInombre\fP.
.SH EJEMPLO
.nf
.sp
#include <stdio.h>
#include <linux/unistd.h>	/* para macros _syscallX */
#include <linux/kernel.h>	/* para la estructura sysinfo */

_syscall1(int, sysinfo, struct sysinfo *, info);

/* Nota: si copia directamente de la fuente nroff, recuerde
BORRAR las barras invertidas extra en las sentencias printf */

int main(void)
{
	struct sysinfo s_info;
	int error;

	error = sysinfo(&s_info);
	printf("Código de error = %d\\n", error);
	printf("Uptime = %ds\\nCarga: 1 min %d / 5 min %d / 15 min %d\\n"
		"RAM: total %d / libre %d / compartida %d\\n"
		"Memoria en bufers = %d\\nSwap: total %d / libre %d\\n"
		"Número de procesos = %d\\n",
		s_info.uptime, s_info.loads[0],
		s_info.loads[1], s_info.loads[2],
		s_info.totalram, s_info.freeram,
		s_info.sharedram, s_info.bufferram,
		s_info.totalswap, s_info.freeswap,
		s_info.procs);
	return(0);
}
.fi
.SH "Ejemplo de salida"
.nf
Código de error = 0
Uptime = 502034s
Carga: 1 min 13376 / 5 min 5504 / 15 min 1152
RAM: total 15343616 / libre 827392 / compartida 8237056
Memoria en bufers = 5066752
Swap: total 27881472 / libre 24698880
Número de procesos = 40
.fi
.SH NOTAS
Las macros _syscall() NO producen un prototipo. Es posible que tenga que
crear uno, especialmente para usuarios de C++.
.sp
Las llamadas al sistema no tienen porqué retornar sólo códigos de error
positivos o negativos. Es necesario examinar el código fuente para estar
seguro de cómo retornan los errores. Generalmente, es el negativo de un
código de error estándar, por ejemplo, \-\fBEPERM\fP. Las macros _syscall()
devolverán el resultado \fIr\fP de la llamada al sistema cuando \fIr\fP no
sea negativo, pero devolverán \-1 y establecerán la variable
.I errno
a \-\fIr\fP cuando \fIr\fP sea negativo. 
Para los códigos de error vea
.BR errno (3).
.sp
Algunas llamadas al sistema, como
.BR mmap ,
requieren más de cinco argumentos.
Éstos se manejan colocándose en la pila y pasando un puntero al bloque de
argumentos.
.sp
Cuando se define una llamada al sistema, los tipos de argumento DEBEN
pasarse por valor o mediante puntero (para conjuntos de datos como estructuras).
.SH CONFORME A
Ciertos códigos se usan para indicar variantes y estándares de Unix conforme
a los cuales operan llamadas de la sección. Éstos són:
.TP
SVr4
System V Release 4 Unix, tal como se describe en "Programmer's Reference
Manual: Operating System API (Intel processors)" (Prentice-Hall
1992, ISBN 0-13-951294-2).
.TP
SVID
System V Interface Definition, tal como se describe en "The System V Interface
Definition, Fourth Edition", disponible en
ftp://ftp.fpk.novell.com/pub/unix-standars/svid en ficheros Postcript.
.TP
POSIX.1
IEEE 1003.1-1990 parte 1, también conocido como ISO/IEC 9945-1:1990s,
también conocido como "IEEE Portable
Operating System Interface for Computing Environments", tal como se aclara
en la "POSIX Programmer's Guide" de Donald Lewine (O'Reilly & Associates,
Inc., 1991, ISBN 0-937175-73-0).
.TP
POSIX.1b
IEEE Std 1003.1b-1993 (estándar POSIX.1b) que describe prestaciones en
tiempo real de los sistemas operativos portables, también conocido como
ISO/IEC 9945-1:1996, tal como se aclara en
"Programming for the real world \- POSIX.4"
de Bill O. Gallmeister (O'Reilly & Associates, Inc. ISBN 1-56592-074-0).
.TP
SUS, SUSv2
Single Unix Specification (Especificación para un Unix Único).
(Desarrollado por X/Open y The Open Group. Vea también
http://www.UNIX-systems.org/version2/ .)
.TP
4.3BSD/4.4BSD
Las distribuciones 4.3 y 4.4 de Berkeley Unix.
4.4BSD tenía
compatibilidad ascendente con 4.3.
.TP
V7
Version 7, el Unix ancestral de Bell Labs.
.SH FICHEROS
.I /usr/include/linux/unistd.h
.SH "VÉASE TAMBIÉN"
.BR errno (3)
