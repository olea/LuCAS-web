.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Sun Nov 28 17:06:19 1993, Rik Faith (faith@cs.unc.edu)
.\"          with material from Luigi P. Bai (lpb@softint.com)
.\" Portions Copyright 1993 Luigi P. Bai
.\" Modified Tue Oct 22 22:04:23 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Translated into Spanish Wed Jan 28 1998 by
.\" 	Gerardo Aburruzaga García <gerardo.aburruzaga@uca.es>
.\" Translation revised Sun Apr 16 2000 by Juan Piernas <piernas@ditec.um.es>
.\"
.TH SHMOP 2 "28 enero 1998" "Linux 0.99.13" "Manual del Programador de Linux" 
.SH NOMBRE
shmop \- operaciones cno memoria compartida
.SH SINOPSIS
.nf
.B
# include <sys/types.h>
.B
# include <sys/shm.h>
.fi
.sp
.BI "void *shmat ( int " shmid ,
.BI "const void *" shmaddr ,
.BI "int " shmflg " )"
.sp
.BI "int shmdt ( const void *" shmaddr ")"
.SH DESCRIPCIÓN
La función
.B shmat
pega el segmento de memoria compartida identificada por
.B shmid
al segmento de datos del proceso que llama a la función.
La dirección del pegado se especifica en
.I shmaddr
según uno de los criterios siguientes:
.IP
Si
.I shmaddr
es
.BR 0 ,
el sistema intenta encontrar una región no asociada en el rango de 1 a
1,5 GB comenzando por el valor superior y bajando desde él.
.IP
Si
.I shmaddr
no es
.B 0
y
.B SHM_RND
está activado en
.IR shmflg ,
el pegado ocurre en la dirección igual al redondeo por abajo de
.I shmaddr
a un múltiplo de
.BR SHMLBA .
De otro modo,
.I shmaddr
debe ser una dirección alineada de una página en la cual ocurra el pegado.
.PP
Si
.B SHM_RDONLY
está activado en
.IR shmflg ,
el segmento se pega para lectura y el proceso debe tener permiso de
lectura en el segmento.
De otro modo el segmento se pega para lectura y escritura y debe tener
permisos de lectura y escritura en el segmento. No existe la noción de
segmentos de memoria compartida de escritura exclusiva.
.PP
El valor de
.B brk
del proceso que llama a la función no se altera por el pegado.
El segmento se despegará automáticamente cuendo el proceso se acabe.
El mismo segmento puede ser pegaado como de lectura y de
lectura-escritura, y más de una vez, en el espacio de direcciones del proceso.
.PP
Tras una llamada exitosa a
.B shmat
el sistema actualiza los miembros de la estructura
.B shmid_ds
asociada al segmento de memoria compartida como sigue:
.IP
.B shm_atime
toma el valor de la hora actual.
.IP
.B shm_lpid
toma el valor del PID del proceso llamador.
.IP
.B shm_nattch
se incrementa en uno.
.PP
Observe que el pegado tiene éxito también si el segmento de memoria
compartida se marca como para ser borrado.
.PP
La función
.B shmdt
despega del segmento de datos del proceso que la llama el segmento de
memoria compartida localizado en la dirección especificada por
.IR shmaddr .
El segmento de memoria compartida despegado debe ser uno de entre los
pegados actualmente (al espacio de direcciones del proceso) con
.I shmaddr
igual al valor devuelto por su llamada de pegado
.BR shat .
.PP
Tras una llamada exitosa a
.B shmdt
el sistema actualiza los miembros de la estructura
.B shmid_ds
asociada al segmento de memoria compartida como sigue:
.IP
.B shm_dtime
toma el valor de la hora actual.
.IP
.B shm_lpid
toma el valor del PID del proceso llamador.
.IP
.B shm_nattch
se decrementa en uno.
Si llega a 0 y el segmento está marcado para ser borrado, el segmento
se borra.
.PP
La región ocupada en el espacio de usuario del proceso llamador es desasociada.
.PP
.SH "LLAMADAS AL SISTEMA"
.TP
.B fork()
Después de un
.B fork()
el hijo hereda los segmentos de memoria compartidos pegados.
.TP
.B exec()
Tras un
.B exec()
todos los segmentos de memoria compartida pegados son despegados (pero
no destruidos).
.TP
.B exit()
Tras
.B exit()
todos los segmentos de memoria compartida pegados son despegados (no
destruidos). 
.PP
.SH "VALOR DEVUELTO"
En caso de fallo ambas funciones devuelven 
.B \-1
con
.B errno
indicando el error; 
en otro caso
.B shmat
devuelve la dirección del segmento de memoria compartido pegado, y
.B shmdt
devuelve
.BR 0 .
.SH ERRORES
Cuando
.B shmat
falla, al regresar,
.B errno
tendrá uno de entre los siguientes valores:
.TP 11
.B EACCES
El proceso llamador no tiene permisos de acceso para el tipo de pegado
pedido.
.TP
.B EINVAL
Valor de
.I shmid
inválido, no alineado (i.e., sin alineamiento de página y
\fBSHM_RND\fP no se especificó), o valor de
.I shmaddr
inválido, o pegado fallido en
.BR brk .
.TP
.B ENOMEM
No se pudo reservar memoria para el descriptor o para las tablas de página.
.PP
La función
.B shmdt
puede fallar sólo si no hay segmento de memoria compartida pegada en
.IR shmaddr ,
en cuyo caso al regresar
.B errno
tendrá el valor
.BR EINVAL .
.SH NOTAS
Al ejecutar una llamada al sistema
.BR fork (2),
el hijo hereda todos los segmentos de memoria compartida pegados.
.PP
Los segmentos de memoria compartida pegados a un proceso que ejecuta
una llamada al sistema
.BR execve (2)
no serán pegados en el proceso resultante.
.PP
El siguiente es un parámetro del sistema que afecta a la llamada al sistema
.BR shmat :
.TP 11
.B SHMLBA
Dirección del límite inferior del segmento. Debe estar alineado a página.
Para la implementación actual el valor de
.B SHMBLA
es
.BR PAGE_SIZE .
.PP
La implementación no tiene un límite intrínseco para el número máximo
de segmentos de memoria compartida por proceso 
.RB ( SHMSEG )
.SH "CONFORME A"
SVr4, SVID.  SVr4 documenta una condición de error adicional EMFILE.
En SVID-v4, el tipo del argumento \fIshmaddr\fP se cambió de
.B "char *"
a
.BR "const void *" ,
y el tipo del valor devuelto por \fIshmat\fP() de
.B "char *"
a
.BR "void *" .
(Linux libc4 y libc5 poseen los prototipos
.BR "char *" .
glibc2 posee
.BR "void *" .)
.SH "VÉASE TAMBIÉN"
.BR ipc (5),
.BR shmctl (2),
.BR shmget (2)
