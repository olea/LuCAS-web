.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     $Id: send.2,v 1.5 1999/06/12 10:11:39 freitag Exp $
.\"
.\" Modified Sat Jul 24 01:15:33 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 17:55:49 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Oct 1998 by Andi Kleen
.\" Translation revised Tue Apr 6 1999 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Sun Jun 27 1999 by Juan Piernas <piernas@ditec.um.es>
.\" Translation revised Sat Jan 29 2000 by Juan Piernas <piernas@ditec.um.es>
.\"
.TH SEND 2 "julio 1999" "Página man de Linux" "Manual del Programador de Linux"
.SH NOMBRE
send, sendto, sendmsg \- envía un mensaje de un conector (socket)
.SH SINTAXIS
.B #include <sys/types.h>
.br
.B #include <sys/socket.h>
.sp
.BI "int send(int " s ", const void *" msg ", size_t " len ","
.BI "int " flags );
.br
.BI "int sendto(int " s ", const void *" msg ", size_t " len ","
.BI "int " flags ", const struct sockaddr *" to ", socklen_t " tolen );
.br
.BI "int sendmsg(int " s ", const struct msghdr *" msg ","
.BI "int " flags );
.SH DESCRIPCIÓN
.BR Send ,
.BR sendto
y
.B sendmsg
son utilizados para transmitir un mensaje a otro conector.
.B Send
solo puede ser usado cuando un conector está en un estado
.I connected
mientras
.B sendto
y
.B sendmsg
pueden ser utilizados en cualquier momento.
.PP
La dirección de destino viene dada por
.I to
con
.I tolen
especificando su tamaño. La longitud del mensaje viene dada por
.IR len .
Si el mensaje es demasiado largo para pasar automáticamente a través del
protocolo inferior, se devuelve el error
.B EMSGSIZE
y el mensaje no es transmitido.
.PP
La llamada
.B send
lleva implícita el que no se indiquen los posibles errores en la entrega.
Los errores detectados localmente se indican devolviendo un valor \-1.
.PP
Cuando el mensaje no cabe en el buffer de envío del conector,
.B send
se bloquea, a no ser que el conector se haya colocado en el modo de E/S no
bloqueante. En el modo no bloqueante devolvería
.B EAGAIN
en este caso. Se puede utilizar la llamada
.BR select (2)
para determinar cuando es posible enviar más información.
.PP
El parámetro
.I flags
es una palabra de opciones y puede contener las siguientes opciones:
.\" XXX document MSG_PROXY
.TP
.B MSG_OOB
Enviar datos
.IR "fuera de orden" (out-of-band)
en conectores que soportan esta noción (p.ej. 
.BR SOCK_STREAM );
el protocolo subyacente también debe soportar datos
.IR "fuera de orden" .
.TP
.B MSG_DONTROUTE
No usar un ``gateway'' para enviar el paquete, enviar sólo a los ordenadores
que se encuentren en redes conectadas directamente. Normalmente, esto sólo
lo utilizan los programas de diagnóstico y enrutamiento. Esta opción sólo
está definida para familias de protocolos que enrutan. Los conectores de
paquetes no enrutan.
.TP
.B MSG_DONTWAIT
Habilitar el funcionamiento no bloqueante. Si la operación se bloqueara, se
devolvería
.B EAGAIN
(esto también se puede habilitar usando la bandera
.B O_NONBLOCK
con la operación
.B F_SETFL
de
.BR fcntl(2)).
.TP
.B MSG_NOSIGNAL
Solicitar el no enviar
.B SIGPIPE
en caso de error en conectores orientados a conexión cuando el otro extremo
rompa la conexión. Todavía se devuelve el error
.BR EPIPE .
.PP
Vea 
.BR recv (2)
para una descripción de la estructura
.IR msghdr .
Puede enviar información de control usando los miembros
.I msg_control
y
.IR msg_controllen .
La longitud máxima del buffer de control que el núcleo puede procesar está
limitada por conector por la sysctl
.BR net.core.optmem_max .
Vea
.BR socket (7).
.SH "VALOR DEVUELTO"
Las llamadas devuelven el numero de caracteres enviados, o \-1
si ha ocurrido un error.
.SH ERRORES
Estos son algunos errores estándares generados por la capa de conectores.
Los módulos de los protocolos subyacentes pueden generar y devolver errores
adicionales. Vea sus páginas de manual respectivas.
.TP
.B EBADF
Se ha especificado un descriptor no válido.
.TP
.B ENOTSOCK
El argumento
.I s
no es un conector.
.TP
.B EFAULT
Se ha especificado como parámetro una dirección incorrecta del espacio de
usuario.
tro.
.TP
.B EMSGSIZE
El conector requiere que este mensaje sea enviado automáticamente, y el tamaño 
del mensaje a ser enviado lo hace imposible.
.TP
.BR EAGAIN " o " EWOULDBLOCK
El conector está marcado como no bloqueante y la operación solicitada
lo bloquearía.
.TP
.B ENOBUFS
La cola de salida del interface de red está llena.
Esto generalmente indica que el interfaz ha parado de enviar,
pero puede ser causado por una congestión temporal.
(Esto no puede ocurrir en Linux, los paquetes simplemente se suprimen
silenciosamente cuando la cola de un dispositivo se desborda.)
.TP
.B EINTR
Se ha producido una señal.
.TP
.B ENOMEM
No hay memoria disponible.
.TP
.B EINVAL
Se ha pasado un argumento inválido.
.TP
.B EPIPE
Se ha desconectado el extremo local en un conector orientado a conexión.
En este caso el proceso tambíen recibirá una señal
.B SIGPIPE
a menos que se active la opción
.BR MSG_NOSIGNAL .
.SH "CONFORME A"
4.4BSD, SVr4, borrador POSIX 1003.1g (estas llamadas a función aparecieron
en 4.2BSD).
.SH NOTA
Los prototipos indicados más arriba siguen `the Single Unix Specification',
ya que glibc2 también lo hace; el argumento
.I flags
era `int' en BSD 4.* pero `unsigned int' en libc4 y libc5;
el argumento 
.I len
era `int' en BSD 4.* y libc4 pero `size_t' en libc5;
el argumento
.I tolen
era `int' en BSD 4.*, libc4 y libc5.
Vea también
.BR accept (2).
.SH "VÉASE TAMBIÉN"
.BR fcntl (2),
.BR recv (2),
.BR select (2),
.BR getsockopt (2),
.BR sendfile (2),
.BR socket (2),
.BR write (2),
.BR socket (7),
.BR ip (7),
.BR tcp (7),
.BR udp (7)
