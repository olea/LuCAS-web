.\" Copyright 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)popen.3	6.4 (Berkeley) 4/30/91
.\"
.\" Converted for Linux, Mon Nov 29 14:45:38 1993, faith@cs.unc.edu
.\" Modified Sat May 18 20:37:44 1996 by Martin Schulze (joey@linux.de)
.\" Modified 7 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\"
.\" Translated into Spanish Thu Mar  5 10:06:54 CET 1998 by Gerardo
.\" Aburruzaga García <gerardo.aburruzaga@uca.es>
.\" Translation revised Wed Aug 19 1998 by Juan Piernas <piernas@ditec.um.es>
.\"
.TH POPEN 3  "7 Mayo 1998" "BSD" "Manual del Programador de Linux"
.SH NOMBRE
popen, pclose \- E/S de procesos
.SH SINOPSIS
.B #include <stdio.h>
.sp
.BI "FILE *popen(const char *" orden ", const char *" tipo );
.sp
.BI "int pclose(FILE *" flujo );
.SH DESCRIPCIÓN
La función
.B popen()
inicia un proceso creando una tubería, llamando a
.BR fork (2)
para crear el proceso y ejecutando el intérprete de comandos (shell).
Puesto que una tubería
es unidireccional por definición, el argumento
.I tipo
sólo puede especificar lectura o escritura, pero no ambos; el flujo
resultante es respctivamente de lectura o escritura exclusiva.
.PP
El argumento
.I orden
es un puntero a una cadena terminada en cero que contiene una línea de
orden del shell. Esta orden se pasa a
.I /bin/sh
precedida de la opción
.BR \-c ;
si se necesita interpretar la línea, esto lo hace el shell. El argumento
.I tipo
es un puntero a una cadena terminada en cero que debe ser o "r" para
lectura o "w" para escritura.
.PP
El valor devuelto por
.B popen()
es un flujo normal de E/S estándar a todos los efectos salvo en que
debe cerrarse con
.B pclose()
en vez de con
.BR fclose() .
Escribir a dicho flujo significa escribir en la entrada estándar de la
orden; la salida estándar de la orden es la misma que la del proceso
que llamó a
.BR popen() ,
a menos que la propia orden modifique esto. De modo análogo, leer
de un flujo de `popen' implica leer de la salida estándar de la orden,
y la entrada estándar de la orden es la misma que la del proceso que
llamó a
.BR popen .
.PP
Observe que los flujos de salida de
.B popen
son completamente tamponados (buffered) de forma predeterminada.
.PP
La función
.B pclose
espera que el proceso asociado termine, y devuelve el estado de salida
de la orden como el devuelto por
.BR wait4 .
.SH "VALOR DEVUELTO"
La función
.B popen
devuelve
.B NULL
si las llamadas a
.BR fork (2)
o a
.BR pipe (2)
fallan, o si no puede reservar memoria.
.PP
La función
.B pclose
devuelve \-1 si
.\" Las siguientes realmente producen un resultado indefinido, por lo que
.\" las comento.
.\" .I flujo
.\" no está asociado con una orden de `popen', si
.\" .I flujo
.\" ya ha sido cerrado con `pclose', o si
.B wait4
devuelve un error o se detecta algún otro error.
.SH ERRORES
La función
.B popen
no asigna un valor a
.I errno
si falla la reserva de memoria. Si las funciones subyacentes
.BR fork() " o " pipe()
fallan, a
.I errno
se le asigna un valor apropiado. Si el argumento
.I mode
es incorrecto y se detecta esta condición, a
.I errno
se le asigna el valor
.BR EINVAL .
.PP
Si
.B pclose()
no puede obtener el estado del hijo, se asigna a
.I errno
el valor
.BR ECHILD .
.SH "CONFORME A"
POSIX.2
.SH FALLOS
Puesto que la entrada estándar de una orden abierta para lectura
comparte su puntero de posición con el proceso que llamó a
.BR popen() ,
si el proceso original ha hecho una lectura tamponada, la posición en
la entrada de la orden puede no ser la esperada. De forma similar, la
salida de una orden abierta para escritura puede resultar mezclada con
la del proceso original. Esto último puede evitarse llamando a
.BR fflush (3)
antes de a
.BR popen .
.PP
Un fallo al ejecutar el shell es indistinguible de un fallo del shell
al ejecutar la orden, o una salida inmediata de la orden. La única
pista es un estado de salida 127.
.SH HISTORIA
Una función
.B popen()
y otra
.B pclose()
apareció en UNIX de AT&T Versión 7.
.SH "VÉASE TAMBIÉN"
.BR fork (2),
.BR sh (1),
.BR pipe (2),
.BR wait4 (2),
.BR fflush (3),
.BR fclose (3),
.BR fopen (3),
.BR stdio (3),
.BR system (3).
