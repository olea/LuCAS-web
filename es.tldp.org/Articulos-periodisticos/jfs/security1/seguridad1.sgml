<!doctype linuxdoc system>

<article>

<title>Artículo para la revista Linux Actual número 6: Auditores de Seguridad en GNU/Linux.
<author>Javier Fernández-Sanguino Peña <url url="jfs@computer.org">
<date>15 dic 1998

<abstract> Se verán las distintas herramientas disponibles para
comprobar la seguridad de un sistema GNU/Linux, herramientas que no
son específicas de Linux y sí del mundo UNIX general, así como las
facilidades y problemas de migrar estas herramientas al mundo Linux.

<sect>Seguridad en GNU/Linux
<p>
A veces se le ha atribuido al sistema GNU/Linux una escasez de
seguridad, a pesar de ser un sistema multiusuario real, y sí que han
existido conocidos agujeros de seguridad, no en el sistema en su
conjunto sino en diversas aplicaciones. El gestor de correo, enorme y
complejo, <em/sendmail/ tiene el triste prestigio de ser un programa
en el que había problemas de seguridad frecuentes. Este gestor no era
específico de Linux, pero sí de sistemas UNIX en general.

Por esto, y a pesar de que la respuesta de los desarrolladores de las
diversas distribuciones de GNU/Linux, y de los creadores de
aplicaciones ha sido siempre rápida, es posible que en un sistema no
se tapen los agujeros de seguridad porque el administrador no ha tenido
tiempo de actualizar a la última versión, no conoce de la existencia
de aquél, o no ha sabido configurar adecuadamente las aplicaciones o
servicios ofrecidos.


Las distribuciones basadas en GNU/Linux ofrecen a sus usuarios una
gran cantidad de información en sus servidores de WWW referentes a
actualizaciones de paquetes que proporcionaban programas a los cuales
les ha sido detectado un posible peligro de seguridad. RedHat hace
esto frecuentemente, incluso se vió obligada a sacar la versión 5.1 de
forma acelerada para tapar el gran número de agujeros existentes en su
versión estrella, la 5.0. Debian también pone avisos de seguridad,
cuando son recibidos, relacionados con los programas que se ofrecen
dentro de la distribución, aunque con su modelo de desarrollo más
abierto, veáse por ejemplo el BTS (Bug Tracking System), consigue
ofrecer antes nuevas versiones de los programas con los problemas de
seguridad resueltos. Así mismo, Debian, con posterioridad a la salida
de la versión final de su distribución, crea una nueva sección llamada
<em>stable-updates</em> que contiene actualizaciones a paquetes de la
versión estable en su mayor parte relacionadas con problemas de
seguridad.

<!-- captura del BTS o páginas de avisos de seguridad de Debian -->

Sin embargo los problemas que dan lugar a que una determinada máquina
esté "comprometida" no se limita exclusivamente a que se haya
instalado la última versión de un determinado programa, también es
necesario cuidar la configuración de ciertos programas, vigilar la
información ofrecida a los extraños y el contenido de los
diversos ficheros de un sistema.

El sistema GNU/Linux se surte, desde sus principios, de los programas
surgidos dentro de la comunidad UNIX en muchos ámbitos, ya que éste es
un sistema UNIX para PCs, como ya saben los lectores de la
revista. Desde gestores de correo, a servidores de ftp o servidores de
WWW, algunos de los existentes en GNU/Linux son, o provienen de,
programas diseñados en principio para otros sistemas UNIX, aunque con
el auge actual de GNU/Linux estos programas se diseñan específicamente
para Linux. Es por lo primero que los problemas de seguridad de estos
programas se pueden trasladar a una distribución de GNU/Linux, pero
también es por esto que existen gran cantidad de auditores de
seguridad para Linux.

Se tratarán primero en este artículo herramientas que no son
específicas de GNU/Linux, sino del mundo UNIX en general, y tratando
de comentar las particularidades de aquellos en cuanto a GNU/Linux se
refiere. En el próximo artículo de la revista, en esta misma sección,
se comentarán también herramientas exclusivas, surgidas
posteriormente, para GNU/Linux, y se incidirá en las facilidades (o
problemas) de portabilidad de estas herramientas a GNU/Linux.


<sect>¿Qué son los programas auditores de seguridad?
<p>

Los programas auditores de seguridad son herramientas tremendamente
útiles para la administración de un sistema, ya que permiten detectar, de
forma rutinaria, problemas de seguridad para los que pudieran existir
ataques conocidos. 

Un programa auditor de seguridad debería ser capaz
de detectarlos sin vulnerar la integridad del sistema, es decir, no
debería, por ejemplo, detectar que un sistema es vulnerable a un
ataque del tipo DoS (Denial of Service), dejando al sistema
"colgado". Este tipo de programas no sustituyen al sentido común ni a
la experiencia de un buen administrador, sino que suponen una ayuda
para realizar algunas tareas rutinarias que pueden llevar mucho tiempo
a un administrador normal.

Estos programas  pueden operar a muchos niveles,
desde la comprobación de la pertenencia de archivos a usuarios y
grupos del sistema hasta pruebas sobre aplicaciones instaladas para
verificar si éstas tienen agujeros conocidos. Una forma sencilla de
demonstrarlo sería, por ejemplo, mirar la versión de ésta última, y
ver si se trata de una versión que tuviera un problema especialmente
grave.

<sect>Los precursores: COPS, Tiger, Tripwire e ISS
<p>
Llamamos a estos programas precursores porque fueron los primeros que
empezaron a desarrollarse en la línea de automatizar las tareas del
administrador para vigilar la seguridad de la máquina. Todos estos
sugieron en el mundo UNIX al principio de la decada de los 90, aunque
algunos se mantienen aún hoy vigentes o han sido "remozados" para
adaptarlos a los nuevos tiempos.

COPS (Computer Oracle and Password System) es un paquete de
herramientas de seguridad disponible de forma pública. Están diseñadas
para ayudar a la tarea de un administrador identificando problemas de
seguridad en un sistema UNIX, aunque no pretende arreglar las
discrepancias que encuentra sino que simplemente produce un informe de
lo que ha encontrado y lo almacena o lo envía por correo. COPS fue
realizado por Dan Farmer, uno de los creadores de SATAN y distribuido
el 31 de enero de 1989.

El paquete se divide en dos partes: un conjunto de programas que
automatizan comprobaciones rutinarias y la documentación para
manejarlo e interpretar su salida. COPS requiere ser ejecutado en cada
máquina a chequear y es multiplataforma. El programa inicialmente fue
escrito en base a shell scripts (en el intento de asegurar la
portabilidad de éste) y en programas en C (para aquellas acciones que
necesitan ejecutarse rápidamente), la última versión de este paquete
(1.0.4, 6 de marzo de 1992) está realizada, además, en Perl.

COPS realiza un buen número de comprobaciones, con la intención de
buscar vulnerabilidades:
<itemize>
<item>chequeo de permisos de ficheros, directorios y dispositivos.
<item>cracker de passwords a dos niveles, que de hecho ha sido
realizado usando el notorio <em/Crack/ (ver más abajo).
<item>comprobación del contenido, formato y seguridad de los ficheros
de passwords y ge grupo.
<item>chequeo de programas que se ejecutan en /etc/rc* y en el cron.
<item>búsqueda de programas setuid root, con permiso de escritura y
avisa si son shell scripts.
<item>comprobación a través CRC de binarios y ficheros importantes para evitar
modificaciones.
<item>comprobación de permisos de escritura en los directorios de los
usuarios y de sus ficheros de configuración.
<item>comprobacion automática de avisos del CERT, descargándolos
previamente y comprobando si existe algún aviso nuevo para el tipo de
máquina sobre el que se ejecuta.
<item>un sistema experto llamado Kuang que en base a una serie de
reglas indica si el sistema ha sido o no comprometido.
<item>chequeos varios: directorios en el patg, hosts.equiv,
exportaciones por NFS...
</itemize>

Dado que no realiza ninguna modificación, no necesita ser ejecutado
con privilegios de superusuario (como "root") sino que lo puede
ejecutar cualquier usuario. Eso sí, para descubir parte de la
información, como por ejemplo analizar todos los ficheros con el bit
setuid, puede que sea necesario ejecutarlo como superusuario ya que
puede que algunos ficheros (o directorios) no tengan permisos de
lectura para todo el mundo.

Junto con COPS se distribuye CARP (COPS Analysis and Reporting
Program), programa que realiza informes gráficos en base a los
resultados de COPS.

Tiger es similar a COPS, pues se dedica a conseguir información que
pueda descubrir problemas de seguridad en máquinas UNIX pero está más
actualizado que COPS y más configurable. La última versión disponible
es de marzo de 1994.

Tiger, que toma el nombre de un equipo de futbol americano, es un
conjunto de Bourne shell scripts, programas en C y ficheros de datos
que se usan para realizar una auditoría de seguridad de sistemas
UNIX. Es multiplataforma, entre ellas SunOS 4.x y 5.x.

Se desarrolló para escanear sistemas que se querían fueran accesibles
desde el exterior de un campus, y se ejecuta localmente.

El objetivo primordial de Tiger es analizar el sistema para tratar de
encontrar maneras de obtener privilegios de superusuario. Su diseño
parte de la hipótesis de que cualquier otro uid o gid puede ser
obtenido por personas no autorizadas, es decir, que cualquie persona
puede hacerse pasar por un usuario cualquiera de la máquina, excepto,
por supuesto, por el superusuario.

Algunos de los chequeos que reliza Tiger son:
<itemize>
<item>aliases de mail.
<item>exportación por NFS.
<item>variables de inetd.
<item>variables del PATH.
<item>ficheros .rhosts y .netrc.
<item>permisos de ficheros y directorios.
<item>avisa de la existencia de parches de mantenimiento.
<item>paths que se encuentren en ficheros que den algún warning.
<item>ofrece ayuda sobre todos los temas.
<item>lanza automáticamente el CRACK.
</itemize>

Tiger está disponible para Linux 2.x, gracias al trabajo realizado por
Robert L. Ziegler, aunque la versión distribuida originalmente tenía
soporte para Linux 0.99. Tiger tiene soporte para muchas
arquitecturas, en función de la arquitectura sobre la que se ejecuta
se define las comprobaciones que va a realizar.


Por otro lado tenemos a Tripwire, un programa que comprueba la
integridad de ficheros y directorios. Genera, en su primera pasada
información sobre éstos en una base de datos, y posteriormente los
comprueba y avisa de cualquier diferencia (incluso borrados y
añadidos). Ejecutado de manera regular permite encontrar cambios en
ficheros críticos que podrían haber tenido lugar por la entrada de un
"intruso".

Lo que Tripwire hace es marcar en la base de datos tanto los permisos
y usuarios de los ficheros como un código de redundancia cíclica (CRC)
con el que luego comprueba si ha sido modificado un determinado
fichero.  Este paquete está disponible para Debian GNU/Linux existe un
paquete <em>tripwire</em> en su última versión (slink) que está
disponible para instalar.

Finalmente dentro de este tipo de programas y en la misma época, se
encuentra el ISS (Internet Security Scanner), de Christoper Klaus. En
un principio el programa fue realizado por un interés, por parte del
autor, de conocer los problemas de seguridad en Internet en
1993. Posteriormente, el autor creó una compañía alrededor de este
producto, y distinguió la versión comercial de la versión de prueba,
que carece de interfaz gráfico y de parte de la funcionalidad que
tiene la primera.

En cualquier caso ISS se trata de una de las primeras herramientas
que, a pesar de carecer del interfaz gráfico que luego proveerá SATAN
y otras herramientas posteriores, pone en marcha el desarrollo de
herramientas auditoras de seguridad de redes automatizadas. COPS,
TIGER y Tripwire constituyen el primer paso ya que se tratan de
herramientas que sólo ven el sistema sobre el que se ejecutan y
comprueban las vulnerabilidades en éste. ISS es capaz de comprobar
vulnerabilidades comunes en una o varias subrededes (en la línea de
comandos se le dará un rango de una red que indica las máquinas que debe
comprobar)

ISS es un programa monolítico escrito en C, que realiza comprobaciones
sobre los puertos abiertos en el servidor y de los
servicios RPC ofrecidos, estudio de las particiones exportadas por
NFS, observación del servidor de correo, comprobaciones sobre el NIS
(antes llamado YP - Yellow Pages) y accesos mediante telnet haciendo
uso de pares de usuario/password comunes (que en algunos casos venían
de fábrica y no se modificaban).

ISS se convierte así en uno de los primeros programas que implementan
estas baterías de pruebas, de forma que para un administrador resulta
más sencillo comprobar todas las máquinas a su cargo de un sólo
vistazo. Más tarde, aunque muy cercano en el tiempo, llegaría SATAN,
causando una auténtica revolución.

<sect>SATAN
<p>
SATAN es el acrónimo de Security Administrator Tool for Analyzing
Networks (ver listado 1 
<!-- <ref id="satan-curiosidad"> -->
). Se trata, más que de un
programa, de un conjunto de programas unidos en un interfaz
común. Cuando éste fue escrito por Dan Farmen (programador de COPS) y
Wietse Venema de la Universidad de Tecnología de Eindhoven, lo que se
hizo fue poner una interfaz gráfica que ya se preveía poderosa, y al
mismo tiempo "amigable", como es el WWW a un conjunto de programas,
algunos ya existentes y otros creados de cero por sus autores, que
probaban vulnerabilidades conocidas.

SATAN no es una herramienta novedosa en el aspecto técnico, pero causó
una auténtica revolución. Las herramientas de este tipo, pueden
convertirse, como todas las herramientas, en utensilios útiles o en
armas mortíferas. Los autores tuvieron la "osadía", entonces, de poner
el resultado de su trabajo en Internet y permitiendo la distribución
libre de binarios y fuentes. Había otros programas disponibles
libremente como COPS, para probar vulnerabilidades en un sólo sistema,
o el ISS, para probarlas en sistemas remotos, pero este último, por
ejemplo, carecía de suficiente funcionalidad y de un interfaz gráfico
en la versión pública, aunque sí en la versión comercial. Los autores
decidieron distribuirlo de forma libre ya que su experiencia les
indicaba que los esfuerzos de limitar la distribución de información
de seguridad y herramientas para este fin no había mejorado las cosas,
dado que los elementos "no deseables" los conseguían de todas formas y
las personas que deberían haber tenido acceso a ellas no lo habían
tenido debido a limitaciones arbitrarias o injustas.

Esto tuvo como consecuencia una grave polémica, por la cual incluso
uno de los creadores fue despedido de su trabajo. SATAN fue concebida
como una herramienta para admininistradores, pero también podía ser
usada como un arma por crackers. Incluso se diseñaron programas para
detectar "ataques" de SATAN, como por ejemplo Courtney (desarollado
por CIAC) o Gabriel.

El problema entonces, y también ahora, es que la mayor parte de los
administradores de sistemas no eran capaces de estar al tanto del
conjunto de agujeros de seguridad que salían en programas de uso
frecuente en muchos sistemas UNIX. Un cracker, bien informado, podía
hacer uso de estas vulnerabilidades reconocidas (pero aún no
resueltas), para atacar a sistemas que aún no se habían actualizado a
una versión del programa que resolviera los fallos. 

En un sistema concurren muchos servicios que se "ven" en el exterior,
como por ejemplo: servidores de WWW, de correo o de FTP, gestores de
bases de datos, exportación de discos via NFS, etc... Estar al tanto
de actualizaciones de todos estos y de la forma en que pueden ser
usados para obtener información de un servidor que puede servir e
intentar acceder a éste puede ocupar gran parte del tiempo de un
administrador de sistemas.

Estar al tanto de listas de distribución como bugtrack, los avisos del
CERT <!-- (ver listado X <ref id="mas-info"> --> no es fácil y,
además, si no se hace de forma contínua se puede dejar un "agujero"
que un intruso puede intentar aprovechar.

SATAN abrió la polémica al poner en manos de todo el mundo un
programa, de fácil uso, que descubriera todas estas vulnerabilidades a
un tiempo, a la vez que ponía al descubierto información sobre
las relaciones entre máquinas, lo que los autores denominaron
"relación de Confianza".

SATAN obtiene tanta información como le es posible de servicios de red
como finger, NFS, NIS, ftp y tftp, rexd, y otros. La información
extraída no sólo indica las fuentes por las que un intruso podría
ganar información del sistema, sino también fallos potenciales de
seguridad generalmente debidos a una mala configuración de estos
servicios, problemas conocidos en herramientas de red o malas
políticas de seguridad.

Pero el concepto novedoso de SATAN es el extraer, de la información
inicial y con un conjunto de reglas configurables por el usuario, las
relaciones de dependencia entre máquinas o  servicios dados de una a
otra. Esto hace posible el análisis de todos los servidores de una red
para analizar las implicaciones de la política de confianza y
servicios ofrecidos que, en palabras de los autores "les permitarán
hacer decisiones razonables sobre el nivel de seguridad de los
sistemas involucrados". Los autores de SATAN hablan de confianza
cuando recursos locales de un servidor (discos duros, acceso de
usuarios, servidores de X...) son usados por un cliente con o sin la
autorización debida. Si el sistema X confía en el Y, un intruso que
pueda poner en peligro Y podrá también poner en peligro X. Los autores
indican que cualquier tipo de confianza puede ser subvertida, no sólo
porque se pueda acceder a Y, sino porque el sistema que valida el
acceso de Y pueda estar fuera del control del administrador. Por
ejemplo, si se identifica a Y por el nombre de la máquina y se
subvierte el servidor de nombres (el DNS), o si se hace uso de la
técnica de IP spoofing para hacerle creer a X que otra
máquina es Y.

A este respecto los autores de SATAN escribieron un excelente ensayo
sobre seguridad en sistemas UNIX y en Internet en general que se
titula "Improving the Security of Your Site by Breaking Into It"
("Mejorar la seguridad de su servidor entrando a la fuerza en él"),
lectura recomendable para todos aquellos interesados en seguridad 
<!-- (ver listado X
<ref id="mas-info">) 
-->


Hay que decir que SATAN es una herramienta que podría considerarse ya
obsoleta, las vulnerabilidades que intenta descubrir, eran comunes (y
conocidas) cuando fue diseñada, pero se tratan de "agujeros" que, hoy
por hoy, deberían estar "tapados", si se detecta algunos de estos es
debido a una incompetencia por parte del administrador de la
máquina. Sin embargo, donde aún sí resulta útil SATAN es en la función
de recopilación de información y en la aplicabilidad del concepto de
confianza.

<sect>Ejecución de SATAN
<p>
SATAN debe ser ejecutado como usuario <em>root</em> (superusuario) ya
que algunos de los tests que realiza necesita los requisitos de este
usuario para funcionar (ver listado 2 <!-- <ref id="ejecutar-root">
-->. Hace uso, por ejemplo, de sockets abriéndolos como SOCK_RAW, para
hacer accesos a bajo nivel de éstos. Es posible ejecutar SATAN como
cualquier otro usuario, pero algunos de los tests, no funcionarán en
absoluto.

Han existido algunos problemas a este respecto en la distribución de
SATAN, ya que si el programa se ejecuta como superusuario, y el código
fuente está disponible, es posible que algún desaprensivo distribuya
una versión de SATAN "modificada" de forma que, al ejecutarla,
se introduciría un troyano en el sistema, es decir, la copia modificada
realiza más de lo que debería, enviando información, por ejemplo, de
nuestro sistema al exterior. Por ello es una buena medida obtener
SATAN directamente de la fuente original y comprobar que no ha sido
modificado (mediante la suma MD5 del fichero recibido)

Para ejecutar SATAN hace falta Perl 5 (en este lenguaje están
programados los scripts que generan las páginas automáticamente y
algunos de los tests) y un navegador de WWW, bien sea textual (Lynx) o
gráfico (Netscape Navigator o similares, para más navegadores ver el
artículo "Navegadores de WWW para GNU/Linux", aparecido en Linux
Actual número 3). Los programas que realizan las tareas de prueba
sobre los diversos sistemas se escribieron en C, perl o lenguaje de la
shell, utilizando código disponible en los grupos de noticias
(comp.sources.misc.*), y de hecho es posible añadir nuevos programas a
todo el conjunto de la herramienta. Otras herramientas posteriores,
como SAINT, que se comentarán más adelante, o NESSUS, que se comentará
en un artículo en el próximo número de la revista, hacen más fácil el
introducir nuevos programas mediante la descripción de reglas.


Cuando se arranca el programa, éste obtiene la configuración de los
ficheros localizados en el directorio <em>config/</em>. Estos ficheros
indican dónde se encuentran herramientas habituales en entornos UNIX
(como <em>finger</em> o <em>ping</em>) así como el navegador de WWW
que se utilizará (almacenado en la variable <em>$MOSAIC</em>). Estas
herramientas serán utilizados por los diversos programas de los que
está compuesto SATAN, y se pueden configurar a mano o bien utilizando
el <em>script</em> proporcionado por los autores (reconfig), que busca la
localización de estas utilidades en el servidor en el que se instale SATAN.

Seguidamente, lanzará un servidor de WWW y el navegador de WWW que se
haya configurado para acceder directamente a la página principal de
SATAN. Desde ésta se seleccionará 'Run SATAN', posteriormente
 el servidor al que va a acceder, se podrá limitar si
se va a probar sobre el servidor o sobre su subred, el
nivel del escáner y finalmente  'Start the
scan'. El acceso al servidor de WWW creado por SATAN (y que se
encuentra en un puerto dedicado, en el espacio de usuario, esto es,
por encima del 1024), se realiza mediante una llave de un sólo uso que
SATAN genera para cada ejecución. Dado que esta llave se guarda en los
ficheros HTML generados por SATAN, es importante que estos ficheros
tengan permisos de lectura sólo para el superusuario y no para
otros. Si no fuera así, cualquier usuario podría acceder al servidor
de WWW con la clave proporcionada en ellos y acceder a toda la
información disponible sobre los escáners realizados por el
superusuario mientras SATAN está siendo ejecutado.


En la selección de Objetivos el usuario puede seleccionar el nivel de
ataque: Ligero, Normal o Duro. Un ataque "Ligero" sólo indicará los
servidores que existen y qué servicios de RPC (llamada remota a
procedimiento) ofrecen. Un ataque "Normal" escaneará los objetivos
probando conexiones telnnt, FTP, WWW, gopher y SMTP. Se utilizará para
establecer qué sistema operativo es (aunque para esto es mejor QueSO,
ver listado 3 <!--<ref id="queso">-->). Un ataque "Duro" buscará otras
vulnerabilidades, como servidores de FTP que permiten escribir a todos
los usuarios o servidores de confianza.


SATAN puede ejecutarse con diversas opciones que indiquen qué servidor/es
probar y el nivel de ataque a utilizar, así como limitaciones en el
número de servidores a probar. Además muestra de forma gráfica los resultados
ordenando las vulnerabilidades por tipos, organizadas de muy diversas
maneras (por nivel de riesgo, por sistema operativo...), aunque los
autores indican que un trabajo a realizar sería mostrar de forma más
gráfica (quizás a través de un grafo) las interrelaciones entre los
servidores.  Existen además tutoriales que dan información más en
detalle de los problemas concretos de algunas de las vulnerabilidades,
que son útiles para que el administrador busque más información antes
de tomar una decisión sobre cómo arreglar el problema.

Toda la información recopilada sobre las distintas máquinas se
almacena en una base de datos (se puede tener más de una base de datos
sobre máquinas), que se mantiene entre ejecuciones del programa, y es
útil para inferir relaciones entre máquinas que las pueda hacer vulnerables.

Además SATAN es configurable con reglas (en el directorio <em>facts/</em>) que
le permiten inferir nueva información y detonar nuevos tests en
función de los servicios que se ofrezcan. Estas reglas están escritas
en Perl y, a través de ellas se puede extender el programa con nuevos
tests. De hecho la decisión de qué test realizar en función de la
información recibida se encuentra en estas reglas.


<sect>Compilar SATAN para Linux
<p>
SATAN no fue desarrollado originalmente para GNU/Linux, sino que su
documentación indica que funciona en una gran variedad de sistemas
UNIX: SunOS 4.x y 5.x, AIX, IRIX5, HP-UX 9.x, SYSV-R4 y Ultrix
4.x. Sus autores destacan que hace falta modificarlo para hacerlo
funcionar bajo GNU/Linux.

De hecho es así, siendo necesario modificar los ficheros que se incluyen
al compilar el código fuente para hacerlo funcionar con la versión de
la librería de C de GNU/Linux. Aunque los cambios difieren para libc5
y para libc6, básicamente debido a la redefinición de la
implementación de los formatos de paquete de IP e ICMP en la librería
estándar. Esto se puede arreglar modificando el fichero
<em>lcompat.h</em> (que funciona para libc5) y comentando toda la
definición del paquete ip e icmp, para dejar que sea la librería de C
(viene definido en el fichero <em>/usr/include/netinet/ip.h</em>) la
que los defina. Asimismo se puede eliminar las referencias en el
código fuente a la librería proporcionada en el paquete, si se dispone
de las cabeceras de la librería de C (en Debian las proporciona el
paquete libc6-dev) para compilar el programa. En la versión que se
distribuye en el CD las cabeceras de las librerías proporcionadas por
los autores han sido modifcadas por las cabeceras de la libc6, aún así
también se entrega un fichero (satan-lib.diff.linux) con las
diferencias entre ambas.

Finalmente, para adaptarse a los "nuevos tiempos" y usar los módulos
de Perl instalados en el sistema en lugar de los proporcionados por el
programa (como es el caso del módulo que proporciona en Perl la
función <em>getopts</em> o <em>ctime</em>), es necesario cambiar
ligeramente el programa principal (<em>satan</em>) y algunos de los
tests, que están escritos en Perl.


También los autores asumen el comportamiento de la llamada al sistema
<em>select</em> (que sirve para quedarse a la espera de recibir datos
en diversos descriptores) y se ha de modificar el fichero
<em>tcp_scan.c</em> que es el responsable de escanear todos los
puertos TCP disponibles en un servidor.

Todos estos cambios se han realizado en la versión de SATAN
distribuida en el CD, aunque para beneficio de los lectores se ha
incluido un fichero que indica todas estas diferencias
(satan-1.1.1.diff.linux). Haciendo uso de estos ficheros (realizados
con el programa <em>diff</em>) se podrían modificar las fuentes
originales (haciendo uso del programa <em>patch</em>, ver página de manual).

En general, un usuario que instale SATAN dentro de una distribución de
GNU/Linux no tendrá que resolver estos problemas, dado que los
responsables de la distribución, presumiblemente, los habrán resuelto
para que se integre dentro de ésta. Sin embargo no está de más
conocerlo, caso de que se desee obtener SATAN de la fuente original y
recompilarlo antes de usarlo, algo bastante aconsejable dado el hecho
de que va a ser el usuario con los máximos privilegios el que va a
hacer uso de éste.

Para compilar SATAN para Linux, una vez realizados los cambios arriba
indicados, es necesario, desde el directorio raíz, ejecutar <em>make
linux</em> seguido de <em>perl reconfig</em>. Posteriormente se puede
configurar los valores que ha obtenido automáticamente editando
directamente, como ya se ha dicho antes, los ficheros en el
subdirectorio <em>config/</em>.

<sect>SAINT
<p>
SAINT (Security Administrator's Integrated Network Tool) es un
producto de World Wide Digital Solutions Inc. (WWDSI) derivado de
SATAN, realizado en 1998, no se distribuye bajo la misma licencia sino
bajo una realizada por la compañía. Esta nueva licencia no permite su
distribución por parte de aquellos que lo obtienen ni modificaciones
fuera del uso interno de una compañía que haga uso de este.

Las diferencias con SATAN en cuanto a interfaz son mínimas, ambos
hacen uso de un navegador de WWW, y los pasos a dar para poner en
marcha el programa son los mismos.

SAINT añade a SATAN lo que éste ahora mismo no tiene y es actualidad.
El programa no sólo prueba las vulnerabilidades que contemplaba SATAN,
sino que añade comprobaciones de las vulnerabilidades conocidas hasta la
fecha de su creación. Los tests incluyen comprobaciones sobre
servidores de WWW, POP o SMB (ver artículo sobre Samba en el número 1
de Linux Actual), y nuevas reglas para dirigir el funcionamiento de
éste. Además, la compañía que lo diseñó lo actualiza con cierta
regularidad.

A todo esto hay que añadir muchos nuevos tutoriales, hasta un total de
43, sobre las distintas vulnerabilidades que se puedan encontrar, que
ayudan al administrador dándole más información sobre el peligro de
ésta y sobre cómo eliminarlo. Las vulnerabilidades están clasificadas
en tres categorías: Peligrosas (rojo), Proceder con Cautela (amarillo)
o de Categoría Desconocida (marrones), no en dos como en SATAN.

SAINT demuestra que es posible realizar un producto comercial sobre un
producto que se distribuye de forma gratuita, y con excelentes resultados.



<sect>Resumen
<p>

En este artículo se han visto algunas herramientas de seguridad útiles
para los sistemas GNU/Linux, si bien algunas de ellas primitivas. Así
como algunos de los problemas de utilizar estar herramientas bajo
GNU/Linux, en el próximo artículo se estudiarán con más detenimiento
algunas herramientas similares, nacidas para GNU/Linux, como es el
caso de NESSUS (ver <url url="http://www.nessus.org">) y otras
herramientas relacionadas con auditorías de seguridad disponibles en
el mundo UNIX.

<sect>Sumarios
<p>

Es posible que existan agujeros de seguridad debido a la mala
administración.

Las distribuciones basadas en GNU/Linux dan mucha información relativa
a seguridad.

Los programas auditores de seguridad ayudan a detectar
vulnerabilidades.

COPS y Tiger comprueban la integridad del sistema haciendo chequeos
sobre éste.

SATAN es un conjunto de programas para comprobar la seguridad de
servidores remotos.

SATAN causó una auténtica revolución por poner a disposición de todos
una herramienta poderosa.

Existen programas para detectar ataques de SATAN.

Es difícil mantenerse al tanto de todos los problemas de seguridad de
los programas.


SATAN debe ser ejecutado como superusuario.

Para ejecutar SATAN en Linux es necesario adaptarlo adecuadamente.

SAINT es un desarrollo comercial realizado sobre SATAN.


En un próximo artículo se estudiarán otros programas de seguridad.

<!-- hacer -->

<sect>Listados
<p>


<!-- LISTADO x-


PIE LISTADO x: -->


LISTADO 1-

Existen ciertas curiosidades relacionadas con SATAN, que se reflejan
aquí para información de los lectores.

La imagen de SATAN, un personaje humanoide con una cara caótica y
extraña, no ha sido fruto de la imaginación de sus programadores. Se
trata de una aportación del dibujante Neil Gaiman, autor del comic
Sandman, al proyecto. El boceto original, firmado por éste, forma
parte de la distribución de SATAN.


************* INSERTAR IMAGEN DE SATAN ****************

El nombre SATAN también puede resultar ofensivo a algunas personas,
los programadores, para evitar discrepancias aunque piensan que el
nombre del programa se ajusta muy bien a su herramienta, facilitaron
el que se pudiera cambiar el nombre de éste. Existe un programa en la
distribución de SANTA <em/repent/ (arrepentir) que, si se ejecuta,
cambia todas las menciones del angel caído a SANTA (Security Analysis
Network Tool for Administrators).

Otra curiosidad algo más molesta es que debido al modelo de diseño de
SATAN, las páginas de WWW vistas en el navegador son en realidad
scripts en Perl que ejecuta éste. Por ello la extensión de todas estas
páginas es <em/.pl/ esto puede causar problemas en navegadores que
tengan configurado esta extensión como un tipo MIME determinado
(application/x-perl). El navegador de Netscape, por ejemplo, por no
saber qué hacer con este tipo de documentos pedirá al usuario un lugar
donde guardarlos. Desde luego éste no es el comportamiento deseado, ya
que uno quiere ver el resultado directamente sobre el navegador. Para
conseguir esto, es necesario ir (en el Navigator) al menú de
Preferencias/Aplicaciones, eliminar el tipo MIME asociado a la
extensión <em/pl/ y añadir dentro de los documentos del tipo
<em>text/html</em> (que son interpretados por el navegador) la
extensión <em/pl/. En el Communicator se ha de modificar esto en el
menú Preferencias/Avanzadas/Aplicaciones.

Esto se debe a que cuando Dan Farmer y Wietse Venema diseñaron SATAN,
aún no estaba extendido el uso de tipos MIME para todo y tampoco, desde
luego, estaba asignado esta extensión al lenguaje Perl ya que por
entonces andaba en sus orígenes y no se había extendido tanto como
hasta ahora.


PIE LISTADO 1: Curiosidades de SATAN <label id="satan-curiosidad">


LISTADO 2-

Es un riesgo indudable ejecutar binarios como superusuario, aunque es
algo de lo más común para muchos usuarios, que encuentran que un
determinado programa no se ejecuta como usuario normal y sí  lo
ejecutan como superusuario. Es el caso, por ejemplo, de muchos juegos
que hacen uso de la librería <em/svgalib/, ya que para el manejo a
bajo nivel del hardware (indispensable en muchos juegos) hace falta
ejecutar el juego como root (o poner éste <em/setuid/).

En el caso de SATAN se conoce una distribución de binarios de la
versión de este para Linux que era en realidad un troyano. Realizaba
todas las funciones de SATAN perfectamente pero el que la distribuyó
añadió código que ponía en compromiso el sistema en el que fuera
ejecutado. Curiosamente, aquella persona (que dicho sea de paso perdió
su trabajo por su "hazaña") también distribuyó el código fuente, que
se puede poner como ejemplo de un troyano.

Los cambios al código tenían lugar en el programa <em/fping/, al que
añadía una nueva función llamada <em/backdoor()/ que era ejecutada por
<em/main()/ después de comprobar que había sido ejecutada por el
superusuario. Esta función tenía como tarea añadir un nuevo usuario a
la base de datos de usuarios (el fichero <em>/etc/passwd</em>), llamado
suser después de comprobar que no existía. Posteriormente hace
setuid el binario <em/fping/, y abre una conexión remota a un servidor
cuyos ficheros de registro eran accesibles por todo el mundo. Se
conecta a un puerto abierto por el demonio <em/inetd/, que no está
conectado a ninguna aplicación, pero que sin embargo se registra como
acceso. Esto posiblemente lo hacía para poder ver quienes ejecutaban
esta versión "modificada" de SATAN, y poder acceder a ellos como
usuario 'suser' y con la password conocida. 

La segunda parte del troyano, dentro del código de <em/fping/ en la
función main, hacía que, si éste era ejecutado por el usuario 'suser'
y fijaba una determinada variable de entorno, el programa
inmediatamente arrancaba una shell. Dado que el programa ahora tenía
setuid del superusuario (si era el propietario del fichero) lo que
se obtenía al ejectuar <em/fping/ con esta modificación que era una shell
de root.

El código de este troyano, comentado por ldoolit@cebaf.gov, está
disponible en el CD de la revista, junto a la distribución de SATAN.

PIE LISTADO 2: El problema de la ejecución de binarios como root


LISTADO 3-

Los programas auditores de seguridad vistos utilizan métodos
rudimentarios para "adivinar" el sistema operativo que utiliza la
máquina sobre la que se están haciendo los tests. NESSUS (como se verá
en el próximo artículo), por ejemplo, lo hace en base a dos
conexiones: una conexión al puerto de FTP (21) y otra al puerto de
telnet (23- login remoto). Con la primera identifica si es un sistema
Windows o un UNIX, basándose en la cadena de bienvenida recibida; si
contiene a la palabra "Microsoft" se trata de un NT y si contiene la
palabra "wu-" decide que es un UNIX (el servidor <em/wu-ftp/, es el
más utilizado en el mundo UNIX). Mirando en el puerto de telnet busca
determinadas cadenas de caracteres para adivinar si es un Linux, IRIX,
FreeBSD, etc.. Esto está implementado como un "plugin" llamado
<em/guess_os/.

SATAN implementa algo parecido en su lista de reglas
<em>rules/hosttype</em>, en la que simplemente busca expresiones
regulares en las respuestas de los programas que utiliza para
monitorizar el servidor remoto y en función de éstas decide si es un
SGI, SUN, APOLLO, VMS, Linux..

Ambos métodos pueden ser engañados por un administrador que cambie las
cabeceras de sus servicios para indentificarse de forma distinta, y
además fallarán si no existe ningún servicio que proporcione esta
información textual.

Un método técnicamente más avanzado, y con más estilo, es el
implementado por QueSO de Jordi Murgo. Se trata de una idea apuntada por otros
programas como por ejemplo <em/tft/ de Lamont Granquist (enviado a
rootshell el 7 de julio de 1998), que realiza pruebas sobre la
respuesta de una máquina a las 64 "banderas" del protocolo TCP. 

QueSO (también llamado WathOS) identifica el sistema operativo en
función de la implementación TCP/IP; en particular en función de la
respuesta a paquetes "extraños" cuyo comportamiento no está definido
en ningún RFC y por tanto cuya respuesta depende de la programación de
la pila de protocolos en el sistema operativo concreto. En total
envía siete paquetes, y compara la respuesta con una base de datos de
respuestas típicas por sistemas operativos entregada con el programa.

El programa está disponible en código fuente, bajo la licencia GNU en
<url url="http://apostols.org/projectz/queso/">, ha sido
programado por un español y es capaz de reconocer entre más de ochenta
implementaciones distintas en diversos sistemas operativos.

PIE LISTADO 3: QueSO, un programa que indica el SO <label id="queso">

LISTADO 4

En el CD se han incluido todas las herramientas comentadas en el
artículo y las que se verán el siguiente, al menos aquellas cuya
licencia permite su distribución en dicho CD. Están en el
subdirectorio <em>la6/security</em>. Asimismo, y por considerarlo de
interés para los lectores, se han incluido también otras herramientas
de seguridad de sistemas UNIX en general y GNU/Linux en particular,
haciendo una réplica de los servidores de sunsite (ahora
metalab.unc.edu) y de CIAC.

Con intención de hacer más accesible la instalación de estos paquetes,
el autor ha creado, un paquete para Debian GNU/Linux que
permite instalar la última version de SATAN (1.1.1). Este paquete,
 ofrecido en primicia para los lectores de Linux Actual, formará, si
es posible, parte de la distribución de Debian en un futuro. Está
localizado en el directorio <em>debian/</em>.


PIE LISTADO 4: Contenido del CD


<sect>Capturas
<p>

Capturas incluidas con el articulo y sus pies de páginas:

- satan-cara.gif: CARA del personaje del programa SATAN (insertar en el listado 1)
- satan-main.gif: "Paso 1: Página inicial de SATAN."


- saint-main.gif: Página inicial de SAINT.


- satan-select.gif: "Paso 2: Selección de servidor sobre el que realizar los
tests."

- satan-data.gif: "Paso 3: Recolección de datos realizada por SATAN"

- satan-result.gif: "Paso 4: Resultados de SATAN para un servidor."

- satan-result2.gif: "Paso 5: Resultados de SATAN ordenados por tipo de servicios."




<sect>Notas de maquetación
<p>

Las capturas de SATAN conviene que estén alineadas en la misma
posición de la páginas, porque son consecutivas es decir, primero va
satan-main, luego satan-select, después satan-data y luego
satan-result y satan-result2.

La captura de la "cara" de SATAN debe ir dentro del listado en el que
se indica.

AVISO!: Si las capturas se reducen mucho es posible que no se pueda leer (no
lo se), si es así contactar con el autor y pedir capturas nuevas
relacionadas con el artículo. Sustituiré las capturas del
funcionamiento del Programa por otras.

<sect>Notas de coordinación
<p>

Este artículo irá seguido de otro contando nuevas cosas al respecto,
ya que el artículo original era demasiado largo (11 páginas). Así que
el siguiente que será entregado más tarde tendrá las cosas a las que
se alude en éste (NESSUS y más cosas), aun así los contenidos en el CD
son del total de los dos artículos (salvo una sorpresa que me reservo
para el siguiente)

En resumen, para LA7 reservar 5 páginas para la continuación.

No hay problema en eliminar listados si la maquetación lo precisa (se
incluirían en el siguiente), pero se DEBEN mirar las referencias que
haya a éstos en el artículo. En cualquier caso NUNCA quitar el listado
4, y si es posible, el 1. El orden de preferencia para la inclusión de
listados es: 4, 1, 2, y 3.

<!-- Una posible continuación de este artículo sería sobre trinux
www.trinux.org -->
</article>


