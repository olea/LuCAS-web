.\" Taken from grep(1). Covered by the GPL. (C) FSF
.\" -*-nroff-*-
.\" Adapted Sun Apr  6 22:19:27 1997 by Nicolás Lichtmaier
.\" <nick@feedback.com.ar>
.\" Translated into Spanish on Mon Jun 15 1998 by Gerardo Aburruzaga
.\" García <gerardo@cica.es>
.\"
.TH REGEX 7 "10 Septiembre 1992" "Debian GNU/Linux"
.SH NOMBRE
regex \- expresiones regulares
.\" `regular expression pattern matching' en el original; pero con lo
.\" de arriba queda no sólo más corto sino incluso más claro (N.d.T.).
.SH DESCRIPCIÓN
.PP
Una expresión regular es un patrón que describe un conjunto de cadenas
de caracteres. Las expresiones regulares se construyen de forma
análoga a las aritméticas, empleándose varios operadores para combinar
expresiones más pequeñas.
.PP
Hay dos versiones diferentes de la sintaxis de las expresiones
regulares: la ``básica'' y la ``extendida''. En algunas
implementaciones (como en la del
.B grep
de GNU), no hay ninguna diferencia entre las dos en cuanto a la
funcionalidad disponible con cada una. En otras implementaciones, las
expresiones regulares básicas son menos potentes. La descripción
siguiente se aplica a las expresiones regulares extendidas;
las diferencias con las básicas se resumen después.
.PP
Los bloques de construcción fundamentales son las expresiones
regulares que concuerdan con un solo carácter. La mayoría de los
caracteres, incluyendo todas las letras y los dígitos, son expresiones
regulares que concuerdan consigo mismos. Cualquier meta-carácter con un
significado especial puede ser protegido precediéndolo con una barra
inclinada inversa.
.PP
Una lista de caracteres rodeados por
.B [
y
.B ]
concuerda con cualquier carácter solo de los de la lista; pero si el
primer carácter de ella es el acento circunflejo
.B ^
entonces concuerda con cualquier carácter que
.I no
esté en la lista.
Por ejemplo, la expresión regular
.B [0123456789]
concuerda con cualquier dígito. Se puede especificar un rango de
caracteres ASCII dando el primero y el último, separados por un
guión. 
Finalmente, ciertas clases de caracteres tienen nombres predefinidos,
y uno puede referirse a ellas por éstos. Los nombres son
auto-explicativos, y son los siguientes:
.BR [:alnum:] ,
.BR [:alpha:] ,
.BR [:cntrl:] ,
.BR [:digit:] ,
.BR [:graph:] ,
.BR [:lower:] ,
.BR [:print:] ,
.BR [:punct:] ,
.BR [:space:] ,
.BR [:upper:] ,
y
.BR [:xdigit:].
Por ejemplo,
.B [[:alnum:]]
significa
.BR [0-9A-Za-z] ,
excepto en que la última forma depende de que se use la codificación
de caracteres ASCII, mientras que la primera es transportable.
(Note que en estos nombres de clases los corchetes son parte de los
nombres simbólicos, y deben incluirse aparte de los que delimiten la
lista entre corchetes.) La mayoría de los meta-caracteres pierden su
significado especial cuando están dentro de listas. Para incluir un
.B ]
literal, póngase el primero de la lista. De forma similar, para
incluir un
.B ^
literal, póngase en cualquier posición menos en la
primera. Finalmente, para incluir un
.B \-
literal, póngase el último.
.PP
El punto
.B .
concuerda con cualquier carácter.
El símbolo
.B \ew
es un sinónimo de
.B [[:alnum:]]
y
.B \eW
lo es de
.BR [^[:alnum]] .
.PP
El acento circunflejo
.B ^
y el signo del dólar (o del escudo portugués)
.B $
son meta-caracteres que concuerdan respectivamente con la cadena vacía
al principio y al final de una línea.
Los símbolos
.B \e<
y
.B \e>
concuerdan respectivamente con la cadena vacía al principio y al final
de una palabra.
El símbolo
.B \eb
concuerda con la cadena vacía al borde de una palabra,
y
.B \eB
concuerda con la cadena vacía si
.I no
está en el extremo de una palabra.
.PP
A una expresión regular que concuerde con un solo carácter puede
seguir uno de los varios operadores de repetición:
.PD 0
.TP
.B ?
El elemento precedente es opcional y concordaba como mucho una vez.
.TP
.B *
El elemento precedente concordará cero o más veces.
.TP
.B +
El elemento precedente concordará una o más veces.
.TP
.BI { n }
El elemento precedente va a concordar exactamente
.I n
veces.
.TP
.BI { n ,}
El elemento precedente ha concordado
.I n
o más veces.
.TP
.BI {, m }
El elemento precedente es opcional y ha concordado como mucho 
.I m
veces.
.TP
.BI { n , m }
El elemento precedente ha concordado como poco
.I n
veces, pero no más de
.I m
veces.
.PD
.PP
Dos expresiones regulares pueden concatenarse; la expresión regular
resultante concuerda con cualquier cadena de caracteres formada por la
concatenación de dos subcadenas que concuerden respectivamente con las
subexpresiones concatenadas.
.PP
Dos expresiones regulares pueden juntarse por medio del operador infijo
.BR | ;
la expresión regular resultante concuerda con cualquier cadena que lo
haga con cualquiera de las subexpresiones.
.PP
La repetición tiene precedencia sobre la concatenación, la cual a su
vez la tiene sobre la alternancia. Una subexpresión entera puede
encerrarse entre paréntesis para modificar estas reglas de precedencia.
.PP
La retrorreferencia
.BI \e n\c
\&, donde
.I n
es un solo dígito, concuerda con la subcadena que 
previamente concordaba con la
.IR n \-sima
subexpresión entre paréntesis de la expresión regular.
.PP
En las expresiones regulares básicas, los meta-caracteres
.BR ? ,
.BR + ,
.BR { ,
.BR | ,
.BR ( ,
y
.BR )
pierden su significado especial; en su lugar emplee las versiones
protegidas por la barra inclinada inversa
.BR \e? ,
.BR \e+ ,
.BR \e{ ,
.BR \e| ,
.BR \e( ,
y
.BR \e) .
.SH OBSERVACIÓN
Esta página del Manual de
.B Debian/GNU\ Linux
se ha extraído de la de
.BR grep "(1)."
.SH "VÉASE TAMBIÉN"
.BR regcomp (3),
.BR grep (1)
