.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is copyright (C) 1992 Drew Eckhardt,
.\"                 copyright (C) 1995 Michael Shields.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-05-18 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Sun Feb 11 14:07:00 MET 1996  Martin Schulze  <joey@linux.de>
.\"	* layout slightly modified
.\"
.\" Modified Mon Oct 21 23:05:29 EDT 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Translated into Spanish Fri 23 Jan 1998 by Gerardo Aburruzaga
.\" García <gerardo.aburruzaga@uca.es>
.\"
.TH SELECT 2 "11 febrero 1996" "Linux 1.2" "Manual del Programador de Linux"
.SH NOMBRE
select, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \- multiplexación de E/S síncrona
.\"synchronous I/O multiplexing
.SH SINOPSIS
.B #include <sys/time.h>
.br
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
\fBint select(int \fIn\fB, fd_set *\fIreadfds\fB,
fd_set *\fIwritefds\fB, fd_set *\fIexceptfds\fB,
struct timeval *\fItimeout\fB);
.sp
.BI "FD_CLR(int " fd ", fd_set *" set );
.br
.BI "FD_ISSET(int " fd ", fd_set *" set );
.br
.BI "FD_SET(int " fd ", fd_set *" set );
.br
.BI "FD_ZERO(fd_set *" set );
.fi
.SH DESCRIPCIÓN
.B select
espera a que una serie de descriptores de ficheros cambien su estado.
.\"waits for a number of file descriptors to change status.
.PP
Se miran tres conjuntos independientes de descriptores. Aquéllos
listados en
.I readfds
serán observados para ver si hay caracteres que llegan a estar
disponibles para lectura, aquéllos en
.I writefds
serán observados para ver si es correcto escribir inmediatamente en
ellos, y aquéllos en
.I exceptfds
serán observados para ver si ocurren excepciones. En caso de éxito,
los conjuntos se modifican en marcha para indicar qué descriptores
cambiaron realmente su estado.
.PP
Se proporcionan cuatro macros para manipular los conjuntos.
.B FD_ZERO
limpiará un conjunto.
.B FD_SET
y
.B FD_CLR
añaden o borran un descriptor dado a o de un conjunto.
.B FD_ISSET
mira a ver si un descriptor es parte del conjunto; esto es útil
después de que
.B select
regrese.
.PP
.I n
es el descriptor con el número más alto en cualquiera de los tres
conjuntos, más 1.
.PP
.I timeout
es un límite superior de la cantidad de tiempo transcurrida antes de que
.B select
regrese. Puede ser cero, causando que
.B select
regrese inmediatamente. Si
.I timeout
es NULL (no hay tiempo de espera),
.B select
puede bloquear indefinidamente.
.SH VALOR DEVUELTO
En caso de éxito,
.B select 
devuelve el número de descriptores contenidos en los conjuntos de
descriptores, que puede ser cero si el tiempo de espera expira antes
de que ocurra algo interesante.
En caso de error, se devuelve \-1, y se pone un valor apropiado en 
.IR errno ;
los conjuntos y
.I timeout
estarán indefinidos, así que no
confíe en sus contenidos tras un error.
.SH ERRORES
.TP
.B EBADF
Se ha dado un descriptor de fichero inválido en uno de los conjuntos.
.TP
.B EINTR 
Se ha capturado una señal no bloqueante.
.TP
.B EINVAL 
.I n
es negativo.
.TP
.B ENOMEM
.B select
no ha sido capaz de reservar memoria para las tablas internas.
.SH OBSERVACIONES
Hay algún código por ahí que llama a
.B select
con los tres conjuntos vacíos,
.I n
cero, y un
.I timeout
distinto de cero como una forma transportable y curiosa de dormir con
una precisión por debajo del segundo.
.PP
En Linux,
.I timeout
se modifica para reflejar la cantidad de tiempo no dormido; la mayoría
de otras implementaciones no hacen esto. Esto produce problemas cuando
el código de Linux que lee
.I timeout
se transporta a otros sistemas operativos, y cuando se transporta a
Linux código que reutiliza una struct timeval para varias
.BR select s
en un bucle sin reinicializarla. Considere que
.I timeout
está indefinido después de que
.B select
regrese.
.SH EJEMPLO
.nf
#include <stdio.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

int
main(void)
{
    fd_set rfds;
    struct timeval tv;
    int valret;

    /* Mirar stdin (df 0) para ver si tiene entrada */
    FD_ZERO(&rfds);
    FD_SET(0, &rfds);
    /* Esperar hasta 5 s */
    tv.tv_sec = 5;
    tv.tv_usec = 0;

    valret = select(1, &rfds, NULL, NULL, &tv);
    /* ¡No confiar ahora en el valor de tv! */

    if (valret)
        printf("Los datos ya están disponibles.\\n");
        /* FD_ISSET(0, &rfds) será verdadero */
    else
        printf("Ningún dato en 5 segundos.\\n");

    return(0);
}
.fi
.SH CONFORME A
4.4BSD (la función
.B select
apareció por primera vez en 4.2BSD). Generalmente es transportable a o
desde sistemas no-BSD que admitan clones de la capa de zócalos de BSD
(incluyendo variantes System V). Sin embargo, observe que la variante
System V normalmente pone la variable de espera antes de salir, pero
la variante BSD no.
.SH "VÉASE TAMBIÉN"
.BR accept (2),
.BR connect (2),
.BR poll (2),
.BR read (2),
.BR recv (2),
.BR send (2),
.BR write (2)
