.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Wed Jul 28 11:03:24 1993, Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Nov 28 16:43:30 1993, Rik Faith <faith@cs.unc.edu>
.\"          with material from Giorgio Ciucci <giorgio@crcc.it>
.\" Portions Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\" Modified Fri Jan 31 17:24:31 1997 by Eric S. Raymond <esr@thyrsus.com>
.\"
.\" Traducción por Urko Lusa <ulusa@arrakis.es> el 28 Ene 98
.\"
.TH SHMCTL 2 "28 noviembre 1993" "Linux 0.99.11" "Manual del programador de Linux"
.SH NOMBRE
shmctl \- control de memoria compartida
.SH SINOPSIS
.ad l
.B #include <sys/ipc.h>
.sp
.B #include <sys/shm.h>
.sp
.BI "int shmctl(int " shmid ", int " cmd ", struct shmid_ds *" buf );
.ad b
.SH DESCRIPCIÓN
\fBshmctl()\fP
permite al usuario recibir información sobre un segmento de memoria
compartida, establecer el dueño, grupo y permisos del segmento, así como
destruirlo. La información sobre el segmento identificado como \fIshmid\fP
se devuelve en una estructura \fIshmid_ds\fP:
.PP
.in +0.5i
.nf
struct shmid_ds {
	struct	ipc_perm shm_perm;	/* permisos de operación */
	int	shm_segsz;		/* tamaño del segmento (bytes) */
	time_t	shm_atime;		/* tiempo de la última unión */
	time_t	shm_dtime;		/* tiempo de la última separación */
	time_t	shm_ctime;		/* tiempo del último cambio */
	unsigned short	shm_cpid;	/* pid del creador */
	unsigned short	shm_lpid;	/* pid del último operador */
	short	shm_nattch;		/* nº de uniones actuales */
	/* Los siguientes son privados */
	unsigned short   shm_npages;  /* tamaño del segmento (páginas) */
	unsigned long   *shm_pages;   
	struct shm_desc *attaches;    /* descriptores para uniones */
};
.fi
.in -0.5i
.PP
Los campos del miembro \fIshm_perm\fP pueden ser:
.PP
.in +0.5i
.nf
struct ipc_perm
{
  key_t  key;
  \fBushort uid\fP;   /* euid y egid del \fBdueño\fP */
  \fBushort gid\fP;
  ushort cuid;  /* euid y egid del creador */
  ushort cgid;
  \fBushort mode\fP;  /* 9 bits más bajos de los modos de acceso */
  ushort seq;   /* número de secuencia */
};
.fi
.PP
Están disponibles los siguientes \fIcmds\fP:
.br
.TP 12
.B IPC_STAT
se usa para copiar la información sobre el segmento de memoria compartida en
la memoria intermedia \fIbuf\fP. El usuario debe tener permiso de \fBlectura\fP del
segmento de memoria compartida.
.TP
.B IPC_SET
se usa para aplicar los cambios que el usuario ha efectuado en los miembros
\fIuid\fP, \fIgid\fP, o \fImode\fP del campo \fIshm_perms\fP. Sólo se usan
los 9 bits más bajos de \fImode\fP.
El miembro
.I shm_ctime
también es actualizado. El usuario debe ser el dueño, creador o el
superusuario.
.TP
.B IPC_RMID
se usa para marcar el segmento como destruido. En realidad, se destruirá
después de la última separación (es decir, cuando el miembro
.I shm_nattch
de la estructura asociada
.I shmid_ds
sea cero). El usuario debe ser el dueño, creador o el superusuario.
.PP
El usuario \fIdebe\fP asegurarse de que el segmento se destruye al
final; de lo contrario, las páginas de dicho segmento que se
cargaron en memoria al producir un fallo de página,
permanecerán en memoria o en el fichero de intercambio.
.PP
Además, el \fBsuperusuario\fP puede impedir o permitir que un segmento de
memoria compartida pase al fichero de intercambio con los siguientes comandos (sólo
Linux):
.br
.TP 12
.B SHM_LOCK
impide que un segmento de
memoria compartida pase al fichero de intercambio.
El usuario debe cargar en memoria mediante fallos de página
cualquier página que necesite estar presente después de que
se habilite el bloqueo.
.TP
.B SHM_UNLOCK
permite sacar del fichero de intercambio al segmento de
memoria compartida.
.PP
Las llamadas de control
.BR IPC_INFO ,
.BR SHM_STAT
y
.B SHM_INFO
son usadas por el programa
.BR ipcs (8)
para proporcionar información sobre los recursos asignados. En el futuro,
éstos pueden ser modificados según se necesite o movidos a un sistema de
ficheros proc.
.PP
.SH "LLAMADAS DEL SISTEMA"
.TP
.B fork()
Después de un
.B fork()
el hijo hereda los segmentos de memoria compartida unidos.
.TP
.B exec()
Después de un
.B exec()
todos los segmentos de memoria compartida unidos son separados (no destruidos).
.TP
.B exit()
A través de
.B exit()
todos los segmentos de memoria compartida unidos son separados (no
destruidos).
.PP
.SH "VALOR DEVUELTO"
En caso de éxito se devuelve 0, en caso de error \-1.
.SH ERRORES
En caso de error,
.B errno
tomará uno de los siguientes valores:
.TP 12
.B EACCES
se devuelve si se pide \fBIPC_STAT\fP y
\fIshm_perm.modes\fP no permite acceso de lectura para
.IR msqid .
.TP
.B EFAULT
el argumento
.I cmd
tiene el valor
.B IPC_SET
o
.B IPC_STAT
pero la dirección apuntada por
.I buf
no es accesible.
.TP
.B EINVAL
se devuelve si \fIshmid\fP no es un identificador válido
o \fIcmd\fP no es un comando válido.
.TP
.B EIDRM
se devuelve si \fIshmid\fP apunta a un identificador borrado.
.TP
.B EPERM
se devuelve si se intenta \fBIPC_SET\fP o \fBIPC_RMID\fP y el usuario
no es el creador, el propietario, o el superusuario, y el usuario
no tiene permiso para sus grupos o el resto del mundo.
.SH "CONFORME A"
SVr4, SVID.  SVr4 documenta las condiciones de error adicionales
EINVAL,
ENOENT, ENOSPC, ENOMEM, EEXIST. Ni SVr4 ni SVID documentan una
condición de error EIDRM.
.SH "VÉASE TAMBIÉN"
.BR shmget (2),
.BR shmop (2)
