.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single Unix specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.\" Translated Tue Apr 25 2000 by Juan Piernas <piernas@ditec.um.es>
.\"
.TH WPRINTF 3  "20 noviembre 1999" "GNU" "Manual del Programador de Linux"
.SH NOMBRE
wprintf, fwprintf, swprintf, vwprintf, vfwprintf, vswprintf \- conversión
con formato de la salida de caracteres anchos
.SH SINOPSIS
.nf
.B #include <stdio.h>
.B #include <wchar.h>
.sp
.BI "int wprintf (const wchar_t* " format ", ...);"
.BI "int fwprintf (FILE* " stream ", const wchar_t* " format ", ...);"
.BI "int swprintf (wchar_t* " wcs ", size_t " maxlen ,
.BI "              const wchar_t* " format ", ...);"
.sp
.B #include <stdarg.h>
.sp
.BI "int vwprintf (const wchar_t* " format ", va_list " args );
.BI "int vfwprintf (FILE* " stream ", const wchar_t* " format ", va_list " args );
.BI "int vswprintf (wchar_t* " wcs ", size_t " maxlen ,
.BI "               const wchar_t* " format ", va_list " args );
.fi
.SH DESCRIPCIÓN
La familia de funciones \fBwprintf\fP es equivalente para caracteres anchos
a la familia de funciones \fBprintf\fP. Realizan la salida con formato de
caracteres anchos.
.PP
Las funciones \fBwprintf\fP y \fBvwprintf\fP realizan la salida de
caracteres anchos a \fBstdout\fP. \fBstdout\fP no debe estar orientada a
bytes. Vea la función \fBfwide\fP para más información.
.PP
Las funciones \fBfwprintf\fP y \fBvfwprintf\fP realizan la salida de
caracteres anchos a \fIstream\fP. \fIstream\fP no debe estar orientado a
bytes. Vea la función \fBfwide\fP para más información.
.PP
Las funciones \fBswprintf\fP y \fBvswprintf\fP realizan la salida de
caracteres anchos a un array de caracteres anchos. El programador debe
garantizar que hay espacio suficiente en \fIwcs\fP para, al menos, 
\fImaxlen\fP caracteres anchos.
.PP
Estas funciones son como las funciones \fBprintf\fP, \fBvprintf\fP,
\fBfprintf\fP, \fBvfprintf\fP, \fBsprintf\fP y \fBvsprintf\fP, salvo por las
siguientes diferencias:
.TP
.B \(bu
La cadena \fIformat\fP es una cadena de caracteres anchos.
.TP
.B \(bu
La salida está formada por caracteres anchos, no por bytes.
.TP
.B \(bu
\fBswprintf\fP y \fBvswprintf\fP toman un argumento \fImaxlen\fP,
\fBsprintf\fP y \fBvsprintf\fP no. (Las funciones \fBsnprintf\fP y
\fBvsnprintf\fP toman un argumento \fImaxlen\fP, pero en Linux no devuelven
\-1 ante un desbordamiento de buffer.)
.PP
El tratamiento de los caracteres de conversión \fBc\fP y \fBs\fP es
distinto:
.TP
.B c
Si no está presente un modificador
.BR l ,
el argumento
.I int
se convierte a un carácter ancho, mediante una llamada a la función
.BR btowc ,
y se escribe el carácter ancho resultante.
Si está presente un modificador
.BR l ,
se escribe el argumento (carácter ancho)
.IR wint_t .
.TP
.B s
Si no está presente un modificador
.BR l :
se espera que el argumento
.IR "" `` "const char *" ''
sea un puntero a un array de tipo carácter (puntero a una cadena) que
contenga una secuencia de caracteres multibyte que comience en el estado
inicial de cambios. Los caracteres del array se convierten a caracteres
anchos (cada uno mediante una llama a la función
.B mbrtowc
con un estado de conversión que comienza en el estado inicial antes del
primer byte). Se escriben todos los caracteres anchos resultantes hasta
encontrar (pero sin incluir) un carácter ancho terminador nulo. Si se
especifica una precisión,
no se escriben más caracteres anchos del número especificado. Dese cuenta
que la precisión determina el número de
.I caracteres anchos
escritos, no el número de
.I bytes
o
.IR "posiciones de pantalla" .
El array debe contener un byte terminador nulo, a menos que se proporcione
una precisión y ésta sea tan pequeña que el número de caracteres anchos
obtenidos la iguale antes de que se llegue al final del array. (Si está
presente un modificador
.BR l :
se espera que el argumento
.IR "" `` "const wchar_t *" ''
sea un puntero a un array de caracteres anchos. Se escriben todos los
caracteres anchos del array hasta encontrar (pero sin incluir) un carácter
ancho terminador nulo. Si se especifica una presición, no se escriben más
caracteres del número especificado. El array debe contener un carácter
ancho terminador nulo, a menos que se de una precisión y ésta sea más
pequeña o igual que el número de caracteres anchos en el array.
.SH "VALOR DEVUELTO"
Las funciones devuelven el número de caracteres anchos escritos, excluyendo
el carácter ancho terminador nulo en el caso de las funciones
\fBswprintf\fP y \fBvswprintf\fP. Las funciones devuelven \-1 en caso de
error.
.SH "CONFORME A"
ISO/ANSI C, UNIX98
.SH "VÉASE TAMBIÉN"
.BR printf "(3), " fprintf "(3), " snprintf "(3), " fputwc "(3), " fwide (3),
.BR wscanf (3)
.SH OBSERVACIONES
El comportamiento de \fBwprintf\fP y compañía depende de la categoría
LC_CTYPE de la localización actual.
.PP
Si la cadena \fIformat\fP contiene caracteres anchos que no son ASCII, el
programa sólo funcionará correctamente si la categoría LC_CTYPE de la
localización actual en tiempo de ejecución es la misma que la categoría
LC_CTYPE de la localización actual en tiempo de compilación. Esto es así
porque la representación
.B wchar_t
es dependiente de la plataforma y de la localización. (La libc de GNU
representa los caracteres anchos usando sus puntos de código Unicode
(ISO-10646) pero otras plataformas no hacen esto. Tampoco el uso de nombres
universales de caractares, según la norma ISO C99, de la forma \\unnnn
soluciona este problema.) Por tanto, en programas internacionalizados,
la cadena \fIformat\fP debería estar formada sólo por caracteres anchos
ASCII, o debería construirse en tiempo de ejecución de una forma
internacionalizada (por ejemplo, usando
.B gettext
o
.BR iconv ,
seguida de
.BR mbstowcs ).
