.\" peter memishian -- meem@gnu.ai.mit.edu
.\" $Id: insque.3,v 1.2 1996/10/30 21:03:39 meem Exp meem $
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"   Linux libc source code (5.4.7)
.\"   Solaris 2.x, OSF/1, and HP-UX manpages
.\"   Curry's "UNIX Systems Programming for SVR4" (O'Reilly & Associates 1996)
.\"
.\" Translated into Spanish Fri Feb 27 16:47:34 CET 1998 by Gerardo
.\" Aburruzaga García <gerardo.aburruzaga@uca.es>
.\"
.TH INSQUE 3  "27 Febrero 1998" "GNU" "Manual del Programador de Linux"
.SH NOMBRE
insque, remque \- inserta/quita un elemento de una cola
.SH SINOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "void insque(struct qelem *" elem ", struct qelem *" prev ");
.BI "void remque(struct qelem *" elem ");
.SH DESCRIPCIÓN
\fBinsque()\fP y \fBremque()\fP son funciones para manipular colas
hechas a partir de listas doblemente enlazadas. Cada elemento en esta
lista es de tipo \fBstruct qelem\fP.

La estructura \fBqelem\fP se define como

.RS
.nf
struct qelem {
    struct    qelem *q_forw;
    struct    qelem *q_back;
    char      q_data[1];
};
.fi
.RE

\fBinsque()\fP inserta el elemento apuntado por \fIelem\fP
inmediatamente detrás del elemento apuntado por \fIprev\fP, que
\fBNO\fP debe ser NULL. 

\fBremque()\fP quita el elemento apuntado por \fIelem\fP de la
lista doblemente enlazada.
.SH CONFORME A
SVR4
.SH FALLOS
El campo q_data se define algunas veces como de tipo \fBchar *\fP, y en
Solaris 2.x no parece que exista en absoluto.

La localización de los prototipos de estas funciones difiere según las
diversas versiones de UNIX. Algunos sistemas las ponen en <search.h>,
otros en <string.h>. Linux las pone en <stdlib.h> puesto que es el
sitio donde parecen tener mayor sentido.

Algunas versiones de UNIX (como HP-UX 10.x) no definen una 
\fBstruct qelem\fP, sino que los argumentos de \fBinsque()\fP y de
\fBremque()\fP son de tipo \fBvoid *\fP.

