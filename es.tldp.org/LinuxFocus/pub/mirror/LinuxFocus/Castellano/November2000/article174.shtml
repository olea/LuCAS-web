<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//ES">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.9">
 <META NAME="LFCATEGORY" CONTENT="Software Development">
 <TITLE>lf174, Software Development: An introduction to Tk</TITLE>
<!-- stylesheet added by lfparser: --> 
<style type="text/css">
<!--
 pre { font-familiy:monospace,Courier }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- 2pdaIgnoreStart -->
<MAP name="top">
  <AREA shape="rect" coords="367,9,418,30" alt="Hogar" href="../">
  <AREA shape="rect" coords="423,9,457,30" alt="Mapa" href="../map.html">
  <AREA shape="rect" coords="463,9,508,30" alt="Indice" href="../indice.html">
  <AREA shape="rect" coords="514,9,558,30" alt="Busqueda" href="../Search/">
</MAP>
<MAP name="bottom">
  <AREA shape="rect" coords="78,0,163,15" alt="Noticias" href="../News/">
  <AREA shape="rect" coords="189,0,284,15" alt="Arca" href="../Archives/">
  <AREA shape="rect" coords="319,0,395,15" alt="Enlaces" href="../Links/">
  <AREA shape="rect" coords="436,0,523,15" alt="Sobre LF" href="../aboutus.html">
</MAP>
<!-- IMAGE HEADER -->
<CENTER>
  <IMG src="../../common/images/Topbar-es.gif" width="600" height="40" border="0" alt="[Top bar]" ismap usemap="#top" ><BR>
  <IMG src="../../common/images/Bottombar-es.gif" width="600" height="21" border="0" alt="[Bottom bar]" ismap usemap="#bottom">
</CENTER>
<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0 hspace=4 vspace=4 WIDTH="30%" >
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<IMG SRC="../../common/images/Charles-V.jpg" ALT="[Photo of the author]" HEIGHT=106 WIDTH=100>
<BR>por  <A HREF="mailto:charles_vidal@bigfoot.com">Charles Vidal</A>
<BR><BR>
<I>Sobre el autor:</I><BR>
<P><P> President of a gastronomic lug in Paris.
He likes the GNU and Open Source philosophy, because they both allow
people to share knowledge. He would like to find time to play
Saxophone.</P></P>
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#lfindex0"> Tk the Graphical Toolkit for Tcl :WISH</A></LI>
  <LI><A HREF="#lfindex1"> Hello world !</A></LI>
  <LI><A HREF="#lfindex2"> Tk graphical object creation</A></LI>
  <LI><A HREF="#lfindex3"> The tree structure of the graphical object in the gui</A></LI>
  <LI><A HREF="#lfindex4">Creation of graphical objects: "hello world"</A></LI>
  <LI><A HREF="#lfindex5"> Layouts: Manager of the widgets positions.</A></LI>
  <LI><A HREF="#lfindex6"> Associating graphical objects and variables.</A></LI>
  <LI><A HREF="#lfindex7"> Layout manager</A></LI>
  <LI><A HREF="#lfindex8"> The list of the created widgets </A></LI>
  <LI><A HREF="#lfindex9"> Events </A></LI>
  <LI><A HREF="#lfindex10">A little example </A></LI>
  <LI><A HREF="#lfindex11">Ressources </A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=174&lang=es">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<H2>An introduction to Tk</H2>
 <img src="../../common/images/illustration174.gif" alt="Tcl Tk logo" HEIGHT=150 WIDTH=97 >
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>

This article introduces you to the features of the Tcl graphical toolkit:
<b>Tk</b>.
We shall see how easy it is to make a GUI (Graphical User Interface) with
a few lines of code.

</P>
<HR size="2" noshade align="right"><BR>
<!-- BODY OF THE ARTICLE -->


<A NAME="lfindex0">&nbsp;</A>
<H2> Tk the Graphical Toolkit for Tcl :WISH</H2>

<p>
Tk has been created to give the Tcl language a graphical toolkit.
We usually call it Tcl/Tk; it is pronounced Tikel/Tikey.
</p>
<p>
It is a mutli-platform graphical toolkit with the look of the native os.
It combines perfectly with the Tcl language which is also mutli-platform.
The great advantage of Tcl/Tk is its simplicity.
The couple allows you to rapidly create portable applications.
Just as <b>tclsh</b> exists for tcl, there is <b>wish</b> for Tk.
</p>
<A NAME="lfindex1">&nbsp;</A>
<H3> Hello world !</H3>

As an introduction, I'll show you how to program a classical example.
It shows the possibilities and the simplicity of the Tcl/Tk implementation.
<pre>
pack [ label .l -text "Bonjour monde" ]
</pre>
<CENTER>
<img src="../../common/images/article174/image174_1.jpg" HEIGHT=20 WIDTH=94 >
</CENTER>
<br>
Just compare this to a gtk program written in C:
<pre>
#include &lt;gtk/gtk.h&gt;
Int main( int   argc,
          char *argv[] )
{
   /* GtkWidget is the storage type for widgets */
    GtkWidget *window;
    GtkWidget *button;

    gtk_init(&amp;&argc, &amp;&argv);
   /* create a new window */
    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
    button = gtk_button_new_with_label ("Bonjour Monde");
    gtk_container_add (GTK_CONTAINER (window), button);
    gtk_widget_show (button);

    /* and the window */
    gtk_widget_show (window);
    gtk_main ();

    return(0);
}
</pre>
... or compare it  to Motif
<pre>
/* COMPILE  cc xmhello.c -L/usr/X11R6/lib  -lXm -lXt -lX11 -lXmu -o xmhello */

#include &lt;Xm/PushB.h>
#include &lt;Xm/Form.h>

/* Widget */

	Widget      main_widget, pushb;

main(int argc, char **argv)
{
	Widget      form;
	Arg         args[1];
	int         ac = 0;
	XmString    label_str;

	main_widget = XtInitialize(argv[0], "test", NULL, 0, &amp;&argc, argv);
	label_str = XmStringCreate("Bonjour Monde", XmSTRING_DEFAULT_CHARSET);
	XtSetArg(args[ac], XmNlabelString, label_str);
	ac++;
	pushb = XmCreatePushButton(main_widget, "hello", args, ac);
	XtManageChild(pushb);
	XtRealizeWidget(main_widget);
	XtMainLoop();
}
</pre>
But it is hard to compare the source of a scriptic language and a compiled one.
We must as well consider other aspects like the size of the application in memory.
So, all we can say is that making the classical "Hello World" program with Tk is
fairly easy.
More than the appearance of the toolkit, we should
notice the concept and the ideas.<br>
There are some extensions to modify the look of the Tk Widget,
for example Qtk, and TkStep.

<br>
It is interesting to note that the Tk Toolkit can be used with a lot of languages.
<ul>
<li> C
<li> C++
<li> <a href="http://www.python.org">Python</a> (<a href="http://www.python.org/topics/tkinter/"> Tkinter </a> )
<li> <a href="http://search.cpan.org/Catalog/User_Interfaces/Tk/">Perl </a>
<li> Eiffel
<li> Ada
<li> Modula-3
<li> <a href="http://caml.inria.fr/index-eng.html">caml </a>
<li>...<a href="http://dev.scriptics.com/faq/part1.html">For more information</a>
</ul>
And like a lot of scriptics languages Tcl-Tk is multi-platform.
<A NAME="lfindex2">&nbsp;</A>
<H3> Tk graphical object creation</H3>

This toolkit provides you with a set of basic graphical objects (widgets) in order to build a GUI.
<UL>
<LI> labels&nbsp;: <B>label</B>
<LI> buttons&nbsp;: <B>button</B>
<LI> check buttons: <B>checkbutton</B>
<LI> radio buttons &nbsp;: <B>radiobutton</B>
<LI> menus&nbsp;: <B>menubutton</B>
<LI> menus items&nbsp;: <B>command, radio, check, cascade</B>
<LI> scrollbar&nbsp;: <B>scrollbar</B>
<LI> text&nbsp;: <B>text</B>
<LI> entry &nbsp;: <B>entry</B><BR>
<LI> canvas&nbsp;: <B>canvas</B><BR>
<LI> frame&nbsp;: <B>frame</B>
<LI> listbox &nbsp;: <b>listbox</B>
<li> scale &nbsp;:<b>scale</b>
<li> Misc dialog  box ( fileselection box, warning dialog etc. )
</uL>
<p>
To watch a demo of all the available widgets, go into the directory
 /usr/local/lib/tk8.0/demos/ and launch <b> widget</b>.
</p>
<p>
The set of these graphical objects is limited (there are no tree widget, combobox ...).
However people or companies made some valuable extensions, the most famous is
: <a href="http://www.tix.com">Tix</A>
the <A HREF="http://www.tcltk.com/iwidgets/"> widgets Incr Tcl </A>
and recently the great <a href="http://www.unifix-online.com"> BWidget</A>,
all of the extensions  are available from the
<A HREF="http://dev.scriptics.com/resource/software/extensions/tk/"> scriptics</A> web site.
</p>

<A NAME="lfindex3">&nbsp;</A>
<H3> The tree structure of the graphical object in the gui</H3>


GUIs are build as a tree of windows (rectangle) with their own properties.
<br>
Nodes from the tree structure are containers for graphical objects like a button for
instance.
A tree structure is described in the Tcl/Tk language as follows:
<ul>
<li>	the . for the root
<li>	the .(name_container.)*name_of_graphical_object
</ul>
When the <b>wish </b> program is launched, a window appears.
This is the root window named <b>.</b> <I>(dot)</I>.

<A NAME="lfindex4">&nbsp;</A>
<H3>Creation of graphical objects: "hello world"</H3>


To create any graphical object, the tcl command looks like:
<br>
<i>name_object  .(name_container.)*name_graphical_object [property value]	</i>
<br>
<b>Example:</b>
<code>label .mylabel -text "hello world"</code>
<p>
As you can see, the action is carried out by giving the name
of the graphical object to create, here a <b>.label</b>, next the name of the container,
 where <b>.</B> is the root
window, and at the end you specify the properties (-text " hello Word "). We notice here that these
arguments can be accessed or modified constantly after the creation of the
graphical object.

</p>
<ul>
<li> To access the properties of the graphical object,
we use the command <b> cget </b> (for <b>C</b>onfiguring <b>get</b>).
<br>
<i>Example:</i>
<pre>
.mylabel cget text hello world
</pre>
<li>
To modify the configuration, we use the command <b>configure</b>.
This command returns the name of the created object, here .mylabel
<br><i>Example:</i>
<pre>
.mylabel configure -text "Bonjour Monde in french :)"
</pre>
</ul>
<br>
And now the label has the text "Bonjour Monde in french :) "
<br>
You can display it with the command:
<code>puts [label .mylabel -text "hello world"]</code>
The label can display the result of a command:
<br>
<pre>
.mylabel configure -text " This is the date [exec date ]"
</pre>
To list the options you can pass to configure for a given widget, type:
".mylabel configure"  using Wish in interactive mode.
<br>
This gives an error and shows the set of options you can use.
<br>
<A NAME="lfindex5">&nbsp;</A>
<H3> Layouts: Manager of the widgets positions.</H3>

<b> You might say <i> Nothing happens, nothing shows on the display </i></b>
<p>

Indeed, you just have created an object of the label type, but you did not ask to
display it. This is because the display of this object requires information you
did not yet specify; that is in which layout (a layout is a manager which helps positioning windows) you
wish to put this object.

</p>
Here are the available layouts:
<ol>
<li> The packer
<li> The placer
<li> The grid
</ol>
Let us choose the simplest: the packer.
It adds the objects inside himself according to the specifications of the user.
More about that, later.
<p>
<b>Fully featured Hello Word </b>
<br>
<code>
label .mylabel -text "hello world"
<br>
pack .mylabel
</code>
<br>
Or in one line
<br>
<code>pack [label .mylabel -text "hello world"]</code>
</p>
<br>
<p>
<b> The button </b>
Let us study the case of a button:
<br>
<code>
<br>button .myboutton -text "hello world" -command "exit"
<br>pack  .myboutton
</code>
<br>We notice that the button has a "command" property as an argument (only one).
It is  the tcl command
to execute when the user clicks the button.
In this example, the command to execute is <b> exit </b>, this causes the
program to quit.
</p>

<A NAME="lfindex6">&nbsp;</A>
<H3> Associating graphical objects and variables.</H3>


 The power of Tcl/tk is its great ease of associating graphical objects to a variable corresponding
 to their change of state. We do not need to call a function
to know the state of a graphical object.  In the same way, if one changes the variable, it
will directly influence the graphical object.
As you can see, this makes programming
very straightforward, and makes it possible to write much less code.

<p>
<b><i>Example</i></b>
<p>
<b> The checkbuttons and radiobuttons.</b>
<ol>
<li>A checkbutton is a button reflecting a state.
<br>
This button shows a boolean state (set or not).
We can associate a variable to it which takes the value 0 (defaut) or 1 according to the state of the checkbutton.
But we can also define the value the variable takes according to the state of the checkbutton.
<br>
Example:
<br><code>
<br>checkbutton $w.b1 -text "Wipers OK" -variable wipers -relief flat  -onvalue "Ok" -offvalue "not Ok"
<br></code>
<br>
<li>A radiobutton is a button reflecting the state of a set of buttons.
<br>
The radiobuttons are often grouped, this allows to choose one among others.
In order to group them together, you have to assign them the same variable name
and give it the value this variable takes when the radiobutton is selected.
<br>
Exemple:
<br><br>
<br><code>
<br>radiobutton .b1 -text "Premier " -variable size -value 1
<br>radiobutton .b2 -text "Second " -variable size  -value 2
<br></code>
</ol>
</p>
<b> Entry</b>
<br>
This widget is a line of text that the user can fill.
You can assign a variable to an entry with -textvariable.
<br>
Example:
<br>
<br><code>
<br>entry .e  -textvariable toto  -width 40
<br></code>
<A NAME="lfindex7">&nbsp;</A>
<H3> Layout manager</H3>

Usually graphical objects are put in a frame.
Be careful not to use more than one layout manager in the same frame.
There are three layout managers:
<ol>
<li> The packer:
It positions the graphical objet according to an orientation:
<ol>
<li> top
<li> bottom
<li> right
<li> left
</ol>
<p>
<b>Example:</b>
<table>
<tr>
<td>
<pre>
pack [ button .b1 -text top ] -side top
pack [ button .b2 -text bottom ] -side bottom
pack [ button .b3 -text right ] -side right
pack [ button .b4 -text right ] -side left
</pre>
</td><td align="CENTER">
<img src="../../common/images/article174/image174_2.gif" HEIGHT=78 WIDTH=102 >
</td></tr>
</table>
</p>
<p>
We can also configure the expansion of the widget inside: option -expand (yes|no) -fill ( x|y| both)
<br>
<li> The placer:
We can place a graphical objet at the x y position.
<p>
<b>Example:</b>
place [ label .l -text "With Place"] -x 100 -y 100
.l configure -bg red
</p>
<CENTER>
<img src="../../common/images/article174/image174_3.gif" HEIGHT=226 WIDTH=210 >
</CENTER>
<li> The grid
places widgets on a virtual grid made of rows and columns. It is the ideal layout for
listboxes or multiple line editboxes. The syntax is:
First create widgets, for instance .e_name then display them using:
<bR><code>
<bR>label .mainlbl2 -text "Label 2" -bd 2 -relief sunken
<bR>grid .mainlbl2 -row 0 -column 1 -sticky news
<bR>label .mainlbl1 -text "Label 1" -bd 2 -relief raised
<bR>grid .mainlbl1 -row 0 -column 0 -sticky news
<bR>label .mainlbl3 -text "Label 3" -bd 2 -relief solid
<bR>grid .mainlbl3 -row 1 -column 0
<bR>label .mainlbl4 -text "Label 4" -bd 2 -relief groove
<bR>grid .mainlbl4 -row 1 -column 1
<bR></code>
</p>
<CENTER>
<img src="../../common/images/article174/image174_4.jpg" HEIGHT=103 WIDTH=208 >
</CENTER>
</ol>
<A NAME="lfindex8">&nbsp;</A>
<H3> The list of the created widgets </H3>

<p>
We can get the list the graphical objects created with the command
winfo.
<pre>
 winfo exists name_object
</pre>
But we can get the list of all widget created with the command:
<pre>
winfo children .
</pre>
This functionality of tcl/tk does not exist in the other compiled graphical toolkits ( gtk, awt, motif ...).
</p>

<A NAME="lfindex9">&nbsp;</A>
<H3> Events </H3>

<p>
Tk treats the event and executes a command when <i>-command</i> was given to it.
But there are cases where one wishes to manage events more precisely or manage several
events for one widget. The <i>canvas</i> is such a widget.
</p>
<br><code>
<br>bind name_of_widget name_of_event tcl_code.
<br></code>
<br>
<A NAME="lfindex10">&nbsp;</A>
<H3>A little example </H3>

We are going to make a GUI to see the content of a tar (gz) file .
<br>
The interface is made of a list and two scrollbars.
<br>
Here is a description of the structure of the tcl script:
<ol>
<li> We build the gui (proc makegui).
<li> We insert all the paths of the widget in a hashtable <b>tabgui</b>.
<li> We scan the number of arguments; if it's equal to zero the application exits.
<li> We open the handle from a pipe with the program tar -tzvf name_file_tar.
<li> We insert each line read from the pipe into the list.
</ol>
We capture the keyboard event "Control C" to quit the application:
<pre>
bind all &lt;Control-c&gt; {destroy .}
</pre><br>
This is only a small example, we can improve it.
We can test if the file is compressed or not with the tcl command <b>string first</b>.
If the user does not give any argument, then a file chooser appears in order to
select the tar file.
We could make it more sophisticated by creating a popmenu allowing to act on
files within the archive.
Finally, we could have a menu bar at the top allowing the user to open a new file, create an archive ...
<pre>
#!/bin/sh
# the next line restarts using wish \
exec wish8.0 &quot;$0" "$@"

global tabgui

proc makegui { } {
global tabgui
#
# Creation of the  scrollbars for the list
# then the horizontal scrollbar is placed right, filling up horizontally the window
# and the vertical scrollbaris placed below, filling up vertically the window
#
set tabgui(scrollv) [scrollbar .scrollv -command &quot;.list yview"]
pack $tabgui(scrollv) -side right -fill y
set tabgui(scrollh) [scrollbar .scrollh -command &quot;.list xview" -orient horizontal ]
pack $tabgui(scrollh) -side bottom -fill x
#
# Creation of the list associating it to the scrollbar
#
#
set tabgui(list) [listbox .list  \
                -yscroll &quot;$tabgui(scrollv) set" \
                -xscroll &quot;$tabgui(scrollh) set" \
                -relief sunken -width 20 -height 20 \
        -setgrid yes ]
pack $tabgui(list) -side left -fill both -expand yes
wm minsize . 1 1
}

#
# Creation of the GUI
#
makegui

if $argc>0 {set tarfile [lindex $argv 0]} else {puts stderr &quot;tar file missing" ; exit}
set command &quot;tar -tzvf $tarfile"
set tube [ open |$command r]
 while {![eof $tube]} {
    set tarresult  [ gets $tube ]
    $tabgui(list)  insert end $tarresult
}

bind all &lt;Control-c&gt; {destroy .}
</pre>
<CENTER>
<img src="../../common/images/article174/image174_5.jpg" HEIGHT=363 WIDTH=193 >
</CENTER>
<A NAME="lfindex11">&nbsp;</A>
<H3>Ressources </H3>

<ul>
<li><a href="http://www-lipn.univ-paris13.fr/%7Ehamon/SJ-TclTk/">A good tutorial
(in french) </a>
<li><a href="http://www.unifix-online.com">Unifix online and the B Widget</a>
<li><a href="http://www.scriptcs.com">Scriptics </a>
</ul>



<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=174&lang=es"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="95%">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Charles Vidal, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
<BR><a href="http://cgi.linuxfocus.org/cgi-bin/lfcomment?lang=es&article=article174.html" target="_TOP">Pinchar aqu&iacute; para informar de alg&uacute;n problema o enviar comentarios a LinuxFocus</A><BR></TD>
<TD BGCOLOR="#9999AA"><!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font><TABLE>
<tr><td><font size=2>fr</font></td>
    <td><font size=2>-&gt;</font></td>
    <td><font size=2>--</font></td>
    <td><font size=2><a href="mailto:charles_vidal@bigfoot.com"><FONT COLOR="#FFFFFF">Charles Vidal</FONT></a></font></td>
</tr>
<tr><td><font size=2>fr</font></td>
    <td><font size=2>-&gt;</font></td>
    <td><font size=2>en</font></td>
    <td><font size=2><a href="mailto:charles_vidal@bigfoot.com"><FONT COLOR="#FFFFFF">Charles Vidal</FONT></a></font></td>
</tr>
<tr><td><font size=2>en</font></td>
    <td><font size=2>-&gt;</font></td>
    <td><font size=2>es</font></td>
    <td><font size=2><a href="mailto:"><FONT COLOR="#FFFFFF"> </FONT></a></font></td>
</tr>
</TABLE></TD>
</TR></TABLE></CENTER>
<p><font size=1>2001-07-02, generated by lfparser version 2.9</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
