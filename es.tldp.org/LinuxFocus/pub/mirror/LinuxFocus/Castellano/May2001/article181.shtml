<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//ES">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.9">
 <META NAME="LFCATEGORY" CONTENT="Software Development">
 <TITLE>lf181, Software Development: &iexcl;Trabaja con make!</TITLE>
<!-- stylesheet added by lfparser: --> 
<style type="text/css">
<!--
 pre { font-familiy:monospace,Courier }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- 2pdaIgnoreStart -->
<MAP name="top">
  <AREA shape="rect" coords="367,9,418,30" alt="Hogar" href="../">
  <AREA shape="rect" coords="423,9,457,30" alt="Mapa" href="../map.html">
  <AREA shape="rect" coords="463,9,508,30" alt="Indice" href="../indice.html">
  <AREA shape="rect" coords="514,9,558,30" alt="Busqueda" href="../Search/">
</MAP>
<MAP name="bottom">
  <AREA shape="rect" coords="78,0,163,15" alt="Noticias" href="../News/">
  <AREA shape="rect" coords="189,0,284,15" alt="Arca" href="../Archives/">
  <AREA shape="rect" coords="319,0,395,15" alt="Enlaces" href="../Links/">
  <AREA shape="rect" coords="436,0,523,15" alt="Sobre LF" href="../aboutus.html">
</MAP>
<!-- IMAGE HEADER -->
<CENTER>
  <IMG src="../../common/images/Topbar-es.gif" width="600" height="40" border="0" alt="[Top bar]" ismap usemap="#top" ><BR>
  <IMG src="../../common/images/Bottombar-es.gif" width="600" height="21" border="0" alt="[Bottom bar]" ismap usemap="#bottom">
</CENTER>
<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0 hspace=4 vspace=4 WIDTH="30%" >
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<IMG src="../../common/images/WilbertBerendsen.png" width="108" height="118" alt="[Wilbert Berendsen]">
<BR>por  <A HREF="mailto:wbsoft@xs4all.nl">Wilbert Berendsen</A>
<BR><BR>
<I>Sobre el autor:</I><BR>
<P>
Wilbert Berendsen es m&uacute;sico profesional y un entusiata usuario de Linux. En un tiempo,
hacke&oacute; el ensamblador del Z80 intensamente. Actualmente, utiliza Linux para todo el trabajo
de su producci&oacute;n. En su tiempo libre, escribe art&iacute;culos introductorios y mantiene
un peque&ntilde;o website en
<a href="http://www.xs4all.nl/~wbsoft/">http://www.xs4all.nl/~wbsoft/</a>.
Viva open source!
</P>
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#lfindex0">Introducci&oacute;n</A></LI>
  <LI><A HREF="#lfindex1">Ejemplo: construyendo un website</A></LI>
  <LI><A HREF="#lfindex2">Primer encuentro con make</A></LI>
  <LI><A HREF="#lfindex3">Sintaxis del Makefile</A></LI>
  <LI><A HREF="#lfindex4">Un Makefile para nuestro ejemplo</A></LI>
  <LI><A HREF="#lfindex5">Simplificando el Makefile</A></LI>
  <LI><A HREF="#lfindex6">Variables</A></LI>
  <LI><A HREF="#lfindex7">Reglas Patr&oacute;n</A></LI>
  <LI><A HREF="#lfindex8">Variables autom&aacute;ticas</A></LI>
  <LI><A HREF="#lfindex9">Peque&ntilde;as optimizaciones finales</A></LI>
  <LI><A HREF="#lfindex10">Observaciones finales</A></LI>
  <LI><A HREF="#lfindex11">Consejos</A></LI>
  <LI><A HREF="#lfindex12">Un ejemplo</A></LI>
  <LI><A HREF="#lfindex13">M&aacute;s informaci&oacute;n</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=181&lang=es">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<H2>&iexcl;Trabaja con make!</H2>
 <IMG src="../../common/images/illustration181.gif" width="200" height="60" alt="[Illustration]">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<P>
Este art&iacute;culo muestra el funcionamiento de <i>make</i> y c&oacute;mo puede ser
aprovechado para m&aacute;s usos que el simple desarrollo de software.
</P></P>
<HR size="2" noshade align="right"><BR>
<!-- BODY OF THE ARTICLE -->


<A NAME="lfindex0">&nbsp;</A>
<H2>Introducci&oacute;n</H2>


<p>  Pr&aacute;cticamente cualquier usuario de Linux ha utilizado el programa make varias veces.
Su uso habitual es construir un programa o kernel a partir del c&oacute;digo fuente, instalar un paquete,
etc. 'Make' es una herramienta importante en el desarrollo de software.

Sin embargo, &iexcl;make tiene muchas m&aacute;s posibilidades!

<P>  En este documento, se ver&aacute; que make puede ser una potente herramienta en tareas cotidianas,
como escribir art&iacute;culos, libros o construir un buen website.
A lo largo de esta introducci&oacute;n, se ver&aacute;n muchos otros 'trucos unix', y al final de esta historia, se presentar&aacute;n algunos consejos m&aacute;s sobre el uso de make.
  Hay que tener en cuenta que estamos hablando sobre Linux, pero en principio es posible utilizar
make en cualquier sistema operativo.

<A NAME="lfindex1">&nbsp;</A>
<H2>Ejemplo: construyendo un website</H2>


  Queremos construir un website mantenido por diferentes personas. Jan se ocupa de dos
p&aacute;ginas y las mantiene. Piet se ocupa de la composici&oacute;n.

<p>  Necesitamos un sistema simple que separe el dise&ntilde;o del contenido.
  Una soluci&oacute;n eficiente podr&iacute;a ser leer el contenido de una base de datos cada
vez que se pide una p&aacute;gina. Por ejemplo, PHP y Active Server de Microsoft trabajan
de esta manera. De todas formas, s&oacute;lo tenemos la posibilidad de almacenar c&oacute;digo plano
HTML (HyperText Markup Language). Adem&aacute;s, el contenido no cambia con tanta frecuencia como para
mantener una base de datos.

<p>  Utilizando algunos comandos muy simples, se puede construir un sitio web.

<ul>
<li>Elementos del ejemplo<br>
Jan tiene algunos art&iacute;culos almacenados en su directorio home: <i>offer.html</i> y
<i>index.html</i>. Ambos ficheros est&aacute;n localizados en el directorio <i>/home/jan/Docs/website/</i>.
<i>index.html</i> contiene algunas noticias y un mensaje de bienvenida. <i>offer.html</i>
contiene tareas para llevar a cabo de la semana.
<BR>
Piet es responsable de la composici&oacute;n y construye el website. Al final, las paginas son
publicadas en el directorio <i>/home/piet/public_html</i>.

<li> Una 'plantilla'<br>

  Piet pidi&oacute; a Jan que escribiera sus p&aacute;ginas en HTML plano. &Eacute;l se encargar&iacute;a del dise&ntilde;o de
la p&aacute;gina.
 </ul>

<p> Por ejemplo, Piet pone la cabecera del site en <i>header.html</i> y el pie del site en <i>footer.html</i>.
<i>header.html</i> podr&iacute;a tener el aspecto siguiente:
<pre>
&lt;html>&lt;!-- la cabecera -->
&lt;head>
&lt;title>Piet and Jan productions&lt;/title>
&lt;/head>
&lt;body bgcolor="white">
&lt;table border="0" width="100%">&lt;tr>
&lt;td bgcolor="#c040ff" valign="top">
This is our website&lt;br>
Some rubbish is written down here.&lt;br>
We are very interactive&lt;br>
so this is our telephone number:&lt;br>
&lt;b>0123-456789&lt;/b>
&lt;/td>&lt;td valign="top">
&lt;!-- Los contenidos se ponen aqu&iacute; -->
</pre>

  y este es el pie <i>footer.html</i>:

<pre>
&lt;!-- el pie -->
&lt;/td>&lt;/tr>&lt;/table>
&lt;/body>&lt;/html>
</pre>

Por ejemplo, los comandos unix para construir la p&aacute;gina definitiva a partir del index.html de Jan son:
<pre>
cat header.html  /home/jan/Docs/website/index.html
echo -n '&lt;hr>Last modification: '
date '+%A %e %B'
cat footer.html
</pre>

Por favor, dir&iacute;janse a las p&aacute;ginas del manual de estos comandos. El fichero final, como resultado
de los comandos anteriores, se redirecciona a la salida est&aacute;ndar, y se recoge en un fichero:
<pre>
{
  cat header.html  /home/jan/Docs/website/index.html
  echo -n '&lt;hr>Last modification: '
  date '+%A %e %B'
  cat footer.html
} > /home/piet/public_html/index.html
</pre>

  Este procedimiento se puede repetir con el otro fichero, <i>offer.html</i>. De hecho,
nosotros creamos un peque&ntilde;o script que permite la construcci&oacute;n de nuestro website.


<p>  Sin embargo, ejecutar este comando a mano no es factible. Es posible crear un script de shell
que se ejecute cada vez que Jan actualiza su index. De todas maneras, si Piet decide cambiar la
cabecera o el pie, &iexcl;este script tambi&eacute;n deber&iacute;a ser ejecutado! Por otro lado, si Jan no cambia nada
un d&iacute;a, el script no deber&iacute;a ejecutarse. Estamos utilizando Linux, por lo que queremos una soluci&oacute;n
elegante (es decir: &iexcl;autom&aacute;tica!).
<p>  Es el momento de recurrir a make.

<A NAME="lfindex2">&nbsp;</A>
<H2>Primer encuentro con make</H2>


El manual de GNU para make es un documento estupendo. Sin embargo, desde el principio se orienta
hacia un entorno de programaci&oacute;n. Por esta raz&oacute;n, yo intento mostrar las funciones de make en un
sentido m&aacute;s amplio:

<pre>
    make determina si un conjunto de ficheros debe ser ejecutado,
    bas&aacute;ndose en las fechas de &uacute;ltima modificaci&oacute;n de los ficheros destino y en
    las de los ficheros fuente.
</pre>

En otras palabras: si uno de los ficheros fuente, necesario para crear un fichero destino, es m&aacute;s
reciente que el fichero destino, un conjunto de comandos ser&aacute;n ejecutados. El prop&oacute;sito de estos
comandos es actualizar el fichero destino.

<p> El fichero destino es el "objetivo y los ficheros fuente son los "prerrequisitos"
Los comandos se ejecutan si uno de los 'prerrequisitos' es m&aacute;s reciente que el fichero destino (o
si el destino no existe).
Si todos los prerrequisitos son igual o m&aacute;s antiguos que el destino, entonces los comandos no se
ejecutan y el fichero destino se considera actualizado.

<P> En el directorio de trabajo actual, se deber&iacute;a crear un fichero con el nombre <i>Makefile</i>.
 Este fichero contiene la informaci&oacute;n que necesita make para realizar su trabajo de la manera adecuada.
Una vez que se tiene el Makefile (con 'M' may&uacute;scula), la &uacute;nica cosa que hay que hacer es: teclear
'make' y los comandos necesarios para crear un nuevo fichero destino se ejecutan autom&aacute;ticamente.

<p>  Make se invoca con el comando

<pre>
make target1 target2 ....
</pre>

<p> El par&aacute;metro destino es opcional (si no se indica nada, se utiliza el primer destino del Makefile).
Make siempre busca el Makefile en el directorio actual. Es posible proporcionar m&aacute;s de un destino.

<A NAME="lfindex3">&nbsp;</A>
<H2>Sintaxis del Makefile</H2>


El Makefile se puede crear con un editor de texto y tiene el siguiente aspecto:

<pre>
# Esto es un ejemplo de Makefile.
# Se pueden poner comentarios tras un car&aacute;cter hash (#).

destino1: prerrequisitos1
	comando

destino2: prerrequisitos2
	comando

# Etc&eacute;tera.
</pre>

Se comienza con un destino, seguido de dos puntos (:) y los prerrequisitos necesarios.
Si existen muchos prerrequisitos, se puede finalizar la l&iacute;nea con un backslash (\) y continuar
 en la siguiente l&iacute;nea.

<p> En la/s l&iacute;nea/s siguiente/s se escriben uno o m&aacute;s comandos. Cada l&iacute;nea se considera como un comando
independiente. Si se desea utilizar m&uacute;ltiples l&iacute;neas para un comando, se deber&iacute;a poner un backslash (\)
al final de cada l&iacute;nea del comando. Make conectar&aacute; las l&iacute;neas como si hubieran sido escritas en
una &uacute;nica l&iacute;nea. En esta situaci&oacute;n, se deben separar los comandos con un punto y coma (;) para
prevenir errores en la ejecuci&oacute;n de la shell.

<table bgcolor="#ff8c00">
<tr><td>
<p><b>Importante:</b> &iexcl;Los comandos deben ser indentados con un tabulador, no con 8 espacios!
</td></tr></table>

<p>  Make lee el Makefile y determina para cada fichero destino (empezando por el primero)
si los comandos deben ser ejecutados. Cada destino, junto con los prerrequisitos y reglas,
es denominado una 'regla'.

<p>  Si make se ejecuta sin argumentos, s&oacute;lo se ejecutar&aacute; el primer destino.

<A NAME="lfindex4">&nbsp;</A>
<H2>Un Makefile para nuestro ejemplo</H2>


En nuestro ejemplo, el Makefile deber&iacute;a tener el siguiente aspecto:

<pre>
<small>
# Este Makefile construye el website de Piet y Jan.

all: /home/piet/public_html/index.html /home/piet/public_html/offer.html

/home/piet/public_html/index.html:  header.html footer.html \
                                    /home/jan/Docs/website/index.html
	{ \
          cat header.html  /home/jan/Docs/website/index.html ;\
          echo -n '&lt;hr>Last modification: '                 ;\
          date '+%A %e %B'                                   ;\
          cat footer.html                                    ;\
        } > /home/piet/public_html/index.html

/home/piet/public_html/offer.html:  header.html footer.html \
                                    /home/jan/Docs/website/offer.html
	{ \
          cat header.html  /home/jan/Docs/website/index.html ;\
          echo -n '&lt;hr>Last modification: '                 ;\
          date '+%A %e %B'                                   ;\
          cat footer.html                                    ;\
        } > /home/piet/public_html/offer.html

# fin
</small>
</pre>

<p> Ahora tenemos 3 destinos, "all" y los ficheros <i>index.html</i> y
<i>offer.html</i> del website. La &uacute;nica funci&oacute;n del destino "all"
es tener los otros dos prerrequisitos. Los dos son testeados. Debido a que "all"
por s&iacute; mismo no es un nombre de fichero, el destino "all" siempre se ejecutar&aacute;. (M&aacute;s tarde,
se introducir&aacute; una forma m&aacute;s elegante de definir destinos que no son un fichero).

<p>  Si la cabecera y el pie fueran modificados, ambas p&aacute;ginas ser&iacute;an actualizadas. Si Jan modifica
una de sus p&aacute;ginas, s&oacute;lo la p&aacute;gina modificada ser&aacute; actualizada. &iexcl;Ejecutar el comando 'make' hace
todo el trabajo!

<p>  Por supuesto, el Makefile tiene una desventaja: no es sencillo de revisar.
Afortunadamente, &iexcl;hay muchas formas de hacer las cosas m&aacute;s sencillas!


<A NAME="lfindex5">&nbsp;</A>
<H2>Simplificando el Makefile</H2>


<A NAME="lfindex6">&nbsp;</A>
<H3>Variables</H3>


Gracias a las variables, un Makefile se puede simplificar significativamente. Las variables se definen de
la siguiente manera:

<pre>
variable = valor
</pre>
Nos referiremos a la variable con la expresi&oacute;n <i>$(variable)</i>. Si incorporamos esto dentro del
Makefile, tendr&aacute; mucho mejor aspecto:

<pre>
# Este Makefile construye el website de Piet y Jan.

# Directorio sonde se almacena el website:
TARGETDIR = /home/piet/public_html

# Directorio de Jans:
JANSDIR = /home/jan/Docs/website

# Ficheros necesarios para el dise&ntilde;o:
LAYOUT = header.html footer.html

all: $(TARGETDIR)/index.html $(TARGETDIR)/offer.html

$(TARGETDIR)/index.html:  $(LAYOUT) $(JANSDIR)/index.html
	{ \
          cat header.html $(JANSDIR)/index.html     ;\
          echo -n '&lt;hr>Last modification: '        ;\
          date '+%A %e %B'                          ;\
          cat footer.html                           ;\
        } > $(TARGETDIR)/index.html

$(TARGETDIR)/offer.html:  $(LAYOUT) $(JANSDIR)/offer.html
	{ \
          cat header.html  $(JANSDIR)/index.html    ;\
          echo -n '&lt;hr>Last modification: '        ;\
          date '+%A %e %B'                          ;\
          cat footer.html                           ;\
        } > $(TARGETDIR)/offer.html

# fin

</pre>
Es una buena costumbre utilizar letras may&uacute;sculas para las variables. Ahora es mucho m&aacute;s sencillo
cambiar, por ejemplo, el directorio de destino.

<p> Si se desea, es posible definir otro m&eacute;todo para cada documento que se quiere formatear con el
mismo dise&ntilde;o. &iquest;Qu&eacute; se deber&iacute;a hacer para ello? El Makefile aumentar&iacute;a mucho su tama&ntilde;o, debido a la
gran cantidad del repeticiones que aparecer&iacute;an.

&iexcl;Esto tambi&eacute;n se puede simplificar!

<A NAME="lfindex7">&nbsp;</A>
<H3>Reglas Patr&oacute;n</H3>


  Las 'Reglas Patr&oacute;n' permiten utilizar el mismo conjunto de comandos en cualquier tipo de destinos diferentes.

<p>  Si se utilizan reglas patr&oacute;n, la sintaxis de la l&iacute;nea cambia; se a&ntilde;ade un campo de patr&oacute;n adicional:

<pre>
destinos m&uacute;ltiples: patr&oacute;n : prerrequisito prerrequisito ...
	comando
</pre>
El patr&oacute;n es una expresi&oacute;n que deber&iacute;a ser aplicable a todos los destinos. Un signo de porcentaje
se utiliza para incorporar partes de variables de un nombre de destino.

<p>  Un ejemplo:

<pre>
/home/bla/target1.html /home/bla/target2.html: /home/bla/% : %
	comandos
</pre>
Si make lee esto, la l&iacute;nea se expande a dos l&iacute;neas, Aqu&iacute;, el patr&oacute;n determina qu&eacute; parte del nombre
destino es incorporado en el signo de porcentaje.

<p>  El signo de porcentaje en los prerrequisitos representa la parte que es copiada con este
signo de porcentaje.

<p>  Make expande lo enterior de la forma:

<pre>
/home/bla/target1.html:	target1.html
	comandos

/home/bla/target2.html: target2.html
	comandos
</pre>

El signo de porcentaje en el patr&oacute;n `<i>/home/bla/%</i>' toma en el destino
`<i>/home/bla/target1.html</i>' el valor `<i>target1.html</i>', de modo que el
prerrequisito `<i>%</i>' se expande a `<i>target1.html</i>'.

<p>  Para el website, se incorporar&aacute; la siguiente regla:

<pre>
$(TARGETDIR)/index.html $(TARGETDIR)/offer.html: \
                   $(TARGETDIR)/% : $(JANSDIR)/% \
                                         $(LAYOUT)
</pre>

Ya s&oacute;lo falta resolver un problema: &iquest;C&oacute;mo utilizar estas variables en los comandos?
&iquest;Los comandos variar&iacute;an algo para ambos destinos?

<A NAME="lfindex8">&nbsp;</A>
<H3>Variables autom&aacute;ticas</H3>


Afortunadamente, make define algunas variables para s&iacute; mismo. Algunas de esas variables son
llamadas variables autom&aacute;ticas. Estas vaiables contienen, durante la ejecuci&oacute;n de los comandos
(mejor: justo antes de ejecutar esos comandos), el valos del destino y/o prerrequisito.

<p>  La variable especial <i>$&lt;</i> se utiliza para indicar el primer prerrequisito y la
variable <i>$@</i> se expande siempre al destino actual.

<p>  Utilizando estas variables, es posible generalizae la regala completa de la siguiente manera:

<pre>
$(TARGETDIR)/index.html $(TARGETDIR)/offer.html: $(TARGETDIR)/% : \
                                                     $(JANSDIR)/% \
                                                          $(LAYOUT)
	{ \
          cat header.html  $<                       ;\
          echo -n '&lt;hr>Last modification: '        ;\
          date '+%A %e %B'                          ;\
          cat footer.html                           ;\
        } > $@
</pre>

  Voil&agrave;! &iexcl;Esta &uacute;nica l&iacute;nea funciona ahora para ambos ficheros!

<p>  Para finalizar, se muesta el Makefile completo, incluyendo algunas optimizaciones:

<pre>
# Este Makefile construye el website de Piet y Jan.

# Directorio donde el website es publicado:
TARGETDIR = /home/piet/public_html

# Directorio de Jan:
JANSDIR = /home/jan/Docs/website

# Ficheros necesarios para el dise&ntilde;o:
LAYOUT = header.html footer.html

# Estas son las p&aacute;ginas web:
DOCS = $(TARGETDIR)/index.html $(TARGETDIR)/offer.html


# Por favor no cambiar nada bajo esta l&iacute;nea ;-)
# -------------------------------------------------------------

all: $(DOCS)

$(DOCS): $(TARGETDIR)/% : $(JANSDIR)/% $(LAYOUT)
	{ \
          cat header.html  $<                       ;\
          echo -n '&lt;hr>Last modification: '         ;\
          date '+%A %e %B'                          ;\
          cat footer.html                           ;\
        } > $@

# fin
</pre>

Esto empieza a tomar la forma que deber&iacute;a tener. Si se a&ntilde;aden m&aacute;s documentos, es bastante f&aacute;cil
incorporarlos al Makefile, utilizando la variable DOCS, y sin teclear demasiado.

<p>  Al final, la persona que mantiene el Makefile deber&iacute;a ver f&aacute;cilmente c&oacute;mo funciona, sin
romperse la cabeza inetentando adivinar sun funcionamiento.

<A NAME="lfindex9">&nbsp;</A>
<H3>Peque&ntilde;as optimizaciones finales</H3>


A lo mejor se prefiere mencionar los documentos en DOCS, sin incluir el directorio completo. Esto
puede hacerse de la siguiente manera (cambiamos DOCS al principio del Makefile por TEXTS):

<pre>
TEXTS = index.html  offer.html  yetanotherfile.html

# Por favor, no cambiar nada bajo esta l&iacute;nea ;-)
# -------------------------------------------------------------
DOCS =  $(addprefix $(TARGETDIR)/,$(TEXTS))

all: $(DOCS)

# etc&eacute;tera
</pre>

Lo que vemos aqu&iacute; es una funci&oacute;n make especial: en lugar del nombre de una variable, es posible usar
una expresi&oacute;n completa entre par&eacute;ntesis. De esta manera es posible modificar textos de muchas maneras.

<p>  El comando especial <i>$(addprefix prefix,list)</i> a&ntilde;ade un prefijo a cada elemento de la
lista. En el ejemplo, es el contenido de TARGETDIR m&aacute;s un slash (/).

<p>  Los elementos listados se separan por espacios. Por esta raz&oacute;n, no es una buena idea procesar
nombres de fichero que contengan espacios con el comando make.

<p>  Para concluir: al comienzo, ya se mencion&oacute; que el destino "all" no crear&iacute;a un fichero con el
nombre "all" (esta l&iacute;nea no contiene ning&uacute;n comando) y en consecuencia, este destino es ejecutado
siempre. Pero, &iquest;c&oacute;mo manejarlo si, accidentalmente, s&iacute; que existe un fichero con ese
nombre, y es m&aacute;s reciente que los otros ficheros ...?

<p>  Hay una forma sencilla de decirle a make que un determinado destino siempre debe ejecutarse
y que este destino no hace referencia a ning&uacute;n fichero en el disco duro. Para lograr esto, el
destino es markado como 'phony' (no real). Se hace de la siguiente forma:

<pre>
.PHONY: all
</pre>

ahora, el Makefile completo tendr&aacute; el siguiente aspecto:

<pre>
# Este makefile construye el website de Piet y Jan.

# Directorio donde se publica el website:
TARGETDIR = /home/piet/public_html

# Directorio de Jan:
JANSDIR = /home/jan/Docs/website

# Ficheros necesarios para el dise&ntilde;o:
LAYOUT = header.html footer.html

# Estos son los nombres de las p&aacute;ginas web:
TEXTS = index.html  offer.html  yetanotherfile.html

# Por favor, no realizar cambios bajo esta l&iacute;nea;-)
# ------------------------------------------------------
DOCS =  $(addprefix $(TARGETDIR)/,$(TEXTS))
.PHONY: all

all: $(DOCS)

$(DOCS): $(TARGETDIR)/% : $(JANSDIR)/% $(LAYOUT)
	{ \
          cat header.html  $<                       ;\
          echo -n '&lt;hr>Last modification: '         ;\
          date '+%A %e %B'                          ;\
          cat footer.html                           ;\
        } > $@

# fin
</pre>

&iexcl;Guarden este archivo y olv&iacute;denlo! &iexcl;De ahora en adelante, es posible mantener sus p&aacute;ginas web,
quiz&aacute; utilizando su crontab, y separar el dise&ntilde;o del contenido!

<A NAME="lfindex10">&nbsp;</A>
<H2>Observaciones finales</H2>


Obviamente, es posible modificar este ejemplo para adaptarlo a otras situaciones.

<p>  Por ejemplo, simplemente la manera en que se genera un documento no est&aacute; exenta de errores:
si Jan finaliza accidentalmente sus art&iacute;culos con <i>&lt;/body&gt;&lt;/html></i>, la mayor&iacute;a de navegadores
no visualizar&aacute;n el pie creado por Piet. Si se recurre a grep, perl o tcl, es posible colocar de forma
inteligente algunos t&iacute;tulos de los documentos de Jan en la cabecera del site.

<p>  Por supuesto, Jan simplemente puede escribir texto plano y utilizar el comando sed para
sustituir todas las l&iacute;neas en blanco (retornos de carro) por &lt;P>:

<pre>
sed -e 's/^\s*$/&lt;p>/g'
</pre>

Adem&aacute;s, Jan puede escribir sus textos en <a href="http://www.lyx.org/">LyX</a> y utilizar un programa
como lyx2html para convertirlo a html. &iexcl;Existen miles de posibilidades!

<p>  Tambi&eacute;n es posible realizar otra construcci&oacute;n variable.

<p>  No se ha considerado cu&aacute;ntas im&aacute;genes se han transportado (a escala, convertidas o
comprimidas) al directorio web. &iexcl;Tambi&eacute;n es posible automatizar este proceso!

<p> En este ejemplo, Piet deber&iacute;a tener permiso de lectura en el directorio de Jan en el website.
Lo interesante de separar estas tareas es que se pueden aplicar a organizaciones muy grandes. Piet
puede incluso logearse desde la otra punta del mundo, o montar su directorio home sobre NFS. Los
ejemplos tambi&eacute;n se pueden utilizar en trabajos realizados por un &uacute;nico usuario.

<p>  Espero que hayan quedado claros los principios de funcionamiento de Makefile y lo f&aacute;cil que
puede resultar el trabajo diario cuando se ha escrito un buen Makfile.

<A NAME="lfindex11">&nbsp;</A>
<H2>Consejos</H2>


<ul>
  <li>Make como interfaz de usuario<br>

Una colecci&oacute;n de ficheros tambi&eacute;n puede funcionar como una fuente para construir un producto final
o comportarse de diferentes maneras.

  <p>Utilizando destinos 'phony' (. PHONY: destino), resulta sencillo agrupar funciones simples. Un
ejemplo es configurar el kernel de Linux.

  <p>Tecleando <i>make menuconfig</i> comienza la configuraci&oacute;n con un men&uacute; interactivo. Tecleando
<i>make xconfig</i> comienza la configuraci&oacute;n con un interfaz Tcl/Tk bajo X.

  <P>Los dos destinos mencionados anteriormente no tienen nada que ver con la construcci&oacute;n read del
kernel. Constituyen un simple interfaz para las funciones necesarias (como configurar el kernel).

  <A NAME="lfindex12">&nbsp;</A>
<H3>Un ejemplo</H3>


Imag&iacute;nense: tienen una gran colecci&oacute;n de documentos que se almacenan, mantienen y distribuyen como
una unidad. Quieren realizar res&uacute;menes e imprimir en borrador, con alta calidad, publicar en la web,
etc. Todo esto desde una &uacute;nica fuente (por ejemplo con LaTeX!).

  <p>Podr&iacute;an crear un Makefile con los siguientes destinos PHONY:

  <dl>
    <dd>[help:] Imprimir un resumen de las funciones (destinos) que se incorporan en este Makefile.

    <dd>[print-draft:]  Imprimir, por ejemplo, una versi&oacute;n zoomed-out del documento (utilizando las
    utilidades ps) en una impresora de baja resoluci&oacute;n.

    <dd>[print-full:] Imprimir el documento completo.

    <dd>[ps:] Exportar el documento completo a un fichero PostScript.

    <dd>[report:] Resumir el t&iacute;tulo, abstracto y resumen de un documento y envi&aacute;rselo por correo
electr&oacute;nico a quien supervise su trabajo.

    <dd>[html:] Actualizar autom&aacute;ticamente la versi&oacute;n html de su trabajo.
  </dl>

etc&eacute;tera, etc&eacute;tera. De esta manera, es posible definir acciones complejas en un Makefile. Simplemente,
estas acciones complejas pueden ser invocadas desde un interfaz f&aacute;ci de mantener.<p>

  <li>Los prerrequisitos tambi&eacute;n pueden ser destinos.<br>

Ficheros que son prerrequisitos para un determinado destino, se pueden convertir en destinos en
el siguiente paso.
  <p>De esta forma, es posible generar HTML desde un fichero de texto y mejorar el dise&ntilde;o del
fichero HTML recientemente obtenido. Un ejemplo:

<pre>

TEMPLATE = layout1/Template1.txt

/home/httpd/sales/sales.html: sales.html $(TEMPLATE)
	perl Scripts/BuildPage.pl -template $(TEMPLATE) $< > $@-new
        mv -f $@-new $@

sales.html:	sales.txt
	aptconvert -toc $@ $<

</pre>

Observar c&oacute;mo el fichero ser&iacute;a actualizado cuando Template1.txt hubiera combiado.<p>

<li>Comandos echo, mensajes de error y tests.<p>

Si un comando va precedido por '@', el comando make no lo visualiza:

<pre>
destino: prerrequisito
	@cc -o destino prerrequisito
</pre>

Si un comando comienza por '-' el proceso make no terminar&aacute; si esta comando genera un error (por
ejemplo, borrando un fichero que no existe):

<pre>
.PHONY: clean

clean:
	-rm -r $(tempdir)
</pre>

Si se desea ver lo que hace un determinado comando, por ejemplo <i>make install</i>, pero realmente
no se desea ejecutar el comando, utilizar la opci&oacute;n -n en el prompt:

<pre>
wilbert@nutnix:~ > make -n install
install -m 755 program /usr/local/bin
install -m 644 program.1 /usr/local/man/man1
wilbert@nutnix:~ >
</pre>

<li>Evitar la sustituci&oacute;n de variables make.<p>

Si necesita el signo de d&oacute;lar ($) como parte, por ejemplo, de un nombre de fichero o comando shell .
util&iacute;celo duplicado ($$):

<pre>
# Un makefile
# &iexcl;No lo intenten en casa! :-)
source = menu.txt help.txt

target: $(source)
	for i in $(source)             ;\
        do                              \
          if [ "$$i" = "menu.txt" ]    ;\
          then                          \
            doThis $$i                 ;\
          else                          \
            doThat $$i                 ;\
          fi                           ;\
        done > target
</pre>

Antes de enviar el comando a la shell para su ejecuci&oacute;n, make sustituir&aacute; sus propias variables y
cambiar&aacute; los dobles signos de d&oacute;lar por un s&oacute;lo signo.

</ul>

<A NAME="lfindex13">&nbsp;</A>
<H2>M&aacute;s informaci&oacute;n</H2>


M&aacute;s informaci&oacute;n sobre el funcionamiento de make y todas sus otras posibilidades se pueden
encontrar en el 'GNU Make Manual'. Pueden leer este manual en su sistema linux con el siguiente comando:

<pre>
info make
</pre>

Por supuesto, es posible leer el GNU Make Manual con los browsers de ayuda de GNOME y KDE o el
pr&aacute;ctico programa tkinfo.

<p>Enlaces a m&aacute;s informaci&oacute;n sobre make:

<ul>
<li>Una <a href="http://nl.linux.org/boeken/lees.php?recensie_id=25">revisi&oacute;n</a>
de Armijn Hemel sobre el libro titulado `Managing your projects with make'
(En Holandes!!).

<li>Una
<a href="http://www.google.com/search?q=make%2Btutorial">b&uacute;squeda en google</a>
de "tutorial".
</ul>


  <p>&iexcl;Diviertanse!

<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=181&lang=es"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="95%">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Wilbert Berendsen, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
<BR><a href="http://cgi.linuxfocus.org/cgi-bin/lfcomment?lang=es&article=article181.html" target="_TOP">Pinchar aqu&iacute; para informar de alg&uacute;n problema o enviar comentarios a LinuxFocus</A><BR></TD>
<TD BGCOLOR="#9999AA"><!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font><TABLE>
<tr><td><font size=2>nl</font></td>
    <td><font size=2>-&gt;</font></td>
    <td><font size=2>--</font></td>
    <td><font size=2><a href="mailto:wbsoft@xs4all.nl"><FONT COLOR="#FFFFFF">Wilbert Berendsen</FONT></a></font></td>
</tr>
<tr><td><font size=2>nl</font></td>
    <td><font size=2>-&gt;</font></td>
    <td><font size=2>en</font></td>
    <td><font size=2><a href="mailto:philipg@authors.linuxfocus.org"><FONT COLOR="#FFFFFF">Philip de Groot</FONT></a></font></td>
</tr>
<tr><td><font size=2>en</font></td>
    <td><font size=2>-&gt;</font></td>
    <td><font size=2>es</font></td>
    <td><font size=2><a href="mailto:bblanco@crvasca.com"><FONT COLOR="#FFFFFF">Bego&ntilde;a Blanco</FONT></a></font></td>
</tr>
</TABLE></TD>
</TR></TABLE></CENTER>
<p><font size=1>2001-07-02, generated by lfparser version 2.9</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
