<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//ES">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.9">
 <META NAME="LFCATEGORY" CONTENT="Applications">
 <TITLE>lf156, Applications: Introducci&oacute;n al m&oacute;dulo XML::XSLT para perl</TITLE>
<!-- stylesheet added by lfparser: --> 
<style type="text/css">
<!--
 pre { font-familiy:monospace,Courier }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- 2pdaIgnoreStart -->
<MAP name="top">
  <AREA shape="rect" coords="367,9,418,30" alt="Hogar" href="../">
  <AREA shape="rect" coords="423,9,457,30" alt="Mapa" href="../map.html">
  <AREA shape="rect" coords="463,9,508,30" alt="Indice" href="../indice.html">
  <AREA shape="rect" coords="514,9,558,30" alt="Busqueda" href="../Search/">
</MAP>
<MAP name="bottom">
  <AREA shape="rect" coords="78,0,163,15" alt="Noticias" href="../News/">
  <AREA shape="rect" coords="189,0,284,15" alt="Arca" href="../Archives/">
  <AREA shape="rect" coords="319,0,395,15" alt="Enlaces" href="../Links/">
  <AREA shape="rect" coords="436,0,523,15" alt="Sobre LF" href="../aboutus.html">
</MAP>
<!-- IMAGE HEADER -->
<CENTER>
  <IMG src="../../common/images/Topbar-es.gif" width="600" height="40" border="0" alt="[Top bar]" ismap usemap="#top" ><BR>
  <IMG src="../../common/images/Bottombar-es.gif" width="600" height="21" border="0" alt="[Bottom bar]" ismap usemap="#bottom">
</CENTER>
<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0 hspace=4 vspace=4 WIDTH="30%" >
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<IMG SRC="../../common/images/EgonWillighagen.jpg" ALT="[Photo of the Author]" HEIGHT=102 WIDTH=79>
<BR>por  <A HREF="mailto:egon.w@linuxfocus.org">Egon Willighagen</A>
<BR><BR>
<I>Sobre el autor:</I><BR>
<P>Se uni&oacute; al equipo holand&eacute;s de Linux<font color="#FF0000">Focus</font> en 1999, y a principios de
este a&ntilde;o ha pasado a ser el segundo editor del mismo. Estudia
<em>informational chemistry</em> Universidad de Nijmegen. Le gusta
jugar al baloncesto y disfruta caminando.


<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#lfindex0">Introducci&oacute;n</A></LI>
  <LI><A HREF="#lfindex1">XML::XSLT module</A></LI>
  <LI><A HREF="#lfindex2">El est&aacute;ndar de transformaci&oacute;n XSL</A></LI>
  <LI><A HREF="#lfindex3">El comando for-each</A></LI>
  <LI><A HREF="#lfindex4">El comando if</A></LI>
  <LI><A HREF="#lfindex5">Conclusi&oacute;n</A></LI>
  <LI><A HREF="#lfindex6">Referencias</A></LI>
  <LI><A HREF="#lfindex7">Glosario</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=156&lang=es">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<H2>Introducci&oacute;n al m&oacute;dulo XML::XSLT para perl</H2>
 <IMG SRC="../../common/images/illustration114.gif" ALT="[Illustration]" HSPACE=10 HEIGHT=100 WIDTH=100>
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>

En este art&iacute;culo se presenta el m&oacute;dulo XML::XSLT para perl.
Muestra las capacidades del estandar XSLT del W3C y  como puede
ser utilizado para administrar y publicar documentos XML en la web.

</P>
<HR size="2" noshade align="right"><BR>
<!-- BODY OF THE ARTICLE -->


<A NAME="lfindex0">&nbsp;</A>
<H2>Introducci&oacute;n</H2>


<p>
Transformaciones XSL (XSLT, XSL Transformations) es una recomendacion
del W3C, por lo que puede considerarse un est&aacute;ndar. XSLT es parte de XSL,
que significa Lenguaje de Hojas de estilo para XML. Su prop&oacute;sito es,
como indica su nombre, organizar la estructura de un documento XML.
El formateo de objetos juega un papel principal en XSL a la hora de mostar
la informaci&oacute;n, pero a lo largo de ese proceso la transformaci&oacute;n de los
datos se hace a menudo necesaria. Y ah&iacute; es donde entra XSLT.
</P>

<p>
Al contrario de lo que sucede con el propioo XSL, XSLT es ya una recomendaci&oacute;n
estable. Varios procesadores XSLT se encuentran en desarrollo, usando varios
lenguajes de programaci&oacute;n. Los m&aacute;s maduros est&aacute;n escritos en C (XT, de James
Clark) y java (Xalan, inicialmente de Lotus Inc. y actualmente por la fundaci&oacute;n
Apache). Pero tambi&eacute;n existen dos proyectos que usan perl: XML::XSLT y
XML::Sabotron. El primero es el m&aacute;s antiguo, y est&aacute; completamente escrito en
perl, mientras que el segundo es un interfaz para un procesador XSLT en C++.
</P>

<A NAME="lfindex1">&nbsp;</A>
<H2>XML::XSLT module</H2>


<p>
La versi&oacute;n actual es 0.21 y se puede descargar del
<a href="http://www.archive.de.uu.net/pub/CPAN/">CPAN</a>. Recientemente
el proceso se ha convertido en SourceForge, por lo que est&aacute; disponible el &aacute;rbol
CVS. A pesar de ello, &eacute;ste art&iacute;culo est&aacute; basado en la versi&oacute;n 0.21. El m&oacute;dulo
de perl es desarrollado por Geert Josten, un estudiante de qu&iacute;mica en la
Universidad de Nijmegen, pero en estos momentos mucha otra gente contribuye
al desarrollo. Con la aparici&oacute;n del &aacute;rbol CVS, se espera que el desarrollo
de XML::XSLT se vea lanzado. Lo m&aacute;s importante es acelerar la implementaci&oacute;n del
borrador de trabajo del W3C sobre XSLT.
</P>

<p>
Este c&oacute;digo de perl muestra c&oacute;mo se usa el m&oacute;dulo:
<pre>
#!/usr/bin/perl
use XML::XSLT;

my $xmlfile = "example.xml";
my $xslfile = "example.xsl";

my $parser = XML::XSLT->new ($xslfile, "FILE");

$parser->transform_document ($xmlfile, "FILE");
$parser->print_result();
</pre>
</P>

<p>
El ejemplo muestra c&oacute;mo un documento XML (example.xml) se transforma bas&aacute;ndose
en un fichero XSLT (example.xsl). Pero las hojas de estilo tambi&eacute;n pueden basarse
en un arbol DOM:
<pre>
#!/usr/bin/perl
use XML::XSLT;
use XML::DOM;

my $domparser = new XML::DOM::Parser;
my $doc = $domparser->parsefile ("file.xml");

my $parser = XML::XSLT->new ($doc, "DOM");
</pre>
</P>

<p>
o una simple cadena:
<pre>
#!/usr/bin/perl
use XML::XSLT;

my $xsl_string = qq{
&lt;?xml version="1.0"?>
&lt;xsl:stylesheet>
  &lt;xsl:template match="/">
    &lt;html><body>
      &lt;xsl:apply-templates/>
    &lt;/body>
  &lt;/xsl:template>
&lt;/xsl:stylesheet>
};

my $parser = XML::XSLT->new ($xsl_string, "STRING");
</pre>
</P>

<p>
Estos tres tipos est&aacute;n disponibles para la funci&oacute;n transform_document()
mostrada en el primer ejemplo.
</P>

<p>
<a href="../../common/src/article156/xml2any_pl">Aqu&iacute; est&aacute;</a> un script que
transforma un fichero XML bas&aacute;ndose en uns hoja de estilo XSLT. Necesita
dos argumentos en la l&iacute;nea de comandos, que son los nombres del fichero XSLT y
el XML. El script hace uso del mecanismo "FILE".
</P>

<p>
Ahora que sabemos c&oacute;mo usar un procesador XSLT bajo perl para convertir documentos
XML, podemos echar un vistazo al est&aacute;ndar XSLT.
</P>

<A NAME="lfindex2">&nbsp;</A>
<H2>El est&aacute;ndar de transformaci&oacute;n XSL</H2>


<p>
Las transformaciones XSL fueron dise&ntilde;adas para facilitar la publicaci&oacute;n de la
informaci&oacute;n almacenada en XML. Mientras que el formateo XSL se usa para

<em> layout and design</em>,

 XSLT se usa para realizar transformaciones b&aacute;sicas de los datos XML, como puede
se ordenarlos, seleccionar informaci&oacute;n, o combinar informaci&oacute;n de varias fuentes.
Sin embargo, en la vida real, se hace patente que XSLT por s&iacute; mismo es tambi&eacute;n
adecuado para

<em> layout and design</em>.
</P>

<p>
XML::XSLT no abarca a&uacute;n todos los comandos XSLT, pero s&iacute; los que usaremos en
&eacute;ste art&iacute;culo.
</P>

<p>
Los documentos XSLT definen c&oacute;mo se debe transformar un documento XML. Lo hace
definiendo un <em>template</em> para cada elemento. Debajo hay varios ejemplos
de documentos XSLT que se usan con un documento XML que contiene una
<a href="../../common/src/article156/financial">hoja de c&aacute;lculo de Gnumeric</a>
(la aplicaci&oacute;n GNOME para hojas de c&aacute;lculo). De modo que ahora ya sabes que el
formato de archivado que usa Gnumeric es XML. Usualmente est&aacute;n comprimidas:
prueba a descomprimir un fichero *.gnumeric y ver&aacute;s.
</P>

<p>
Si observas la hoja de c&aacute;lculo, ver&aacute;s que adem&aacute;s de los datos puros, tambi&eacute;n
almacenan informaci&oacute;n sobre <em>layout</em>. Por ejemplo, el <em>layout</em> de
la p&aacute;gina, y la altura y anchura de la celda. Construiremos varias hojas de
estilo XSLT para hacer tareas espec&iacute;ficas como:
<ul>
  <li>Hacer un sumario de cada fichero
  <li>Hacer una p&aacute;gina web con el contenido
</ul>
</P>

<p>
Presentaremos los fundamentos del XSLT escribiendo una hoja XSLT para hacer un
sumario muy simple
(<a href="../../common/src/article156/verysimple.xsl">verysimple.xsl</a>):
<pre>
&lt;?xml version="1.0"?>
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  &lt;xsl:template match="*">
    &lt;xsl:apply-templates/>
  &lt;/xsl:template>

  &lt;xsl:template match="text()"/>

  &lt;xsl:template match="Item">
    &lt;xsl:value-of select="./name"/> : &lt;xsl:value-of select="./val-string"/>
  &lt;/xsl:template>

&lt;/xsl:stylesheet>
</pre>
</P>

<p>
El primer <em>template</em> encaja con todos los elementos del documento XML. El
segundo encaja con todos los CDATA del documento XML. Y el &uacute;ltimo es el que de
hecho hace lo que queremos: da a cada Item en el Sumario del documento Gnumeric
el valor (CDATA) de sus elementos hijos <i>name</i> y <i>val-string</i>.
&iexcl;Comprob&eacute;moslo! Comparemos la salida y lo que veamos si es lo que esperar&iacute;as
en base al documento XML.
</P>

<p>
Pero Item ya encaja con el primer <em>template</em>, &iquest;no es as&iacute;? Entonces,
&iquest;por qu&eacute; aplica el tercer <em>template</em> y no el primero? Lo hace porque
el &uacute;ltimo sobreescribe al primero. Los <em>templates</em> quedan de esta forma
ordenados de generales a espec&iacute;ficos.
</P>

<p>
Notemos que XML::XSLT imprime montones de espacios en blanco que se originan desde
la hoja XSLT. No creo que exista ning&uacute;n mecanismo en la versi&oacute;n actual capaz de
solventar esto. Pero dado que la salida ser&aacute; XHTML, no nos preocuparemos demasiado
por ello en estos momentos. El siguiente ejemplo tiene la misma funcionalidad, pero
a&ntilde;ade partes de HTML para que podamos visulizarlo con un navegador convencional
(<a href="../../common/src/article156/simple.xsl">simple.xsl</a>):
<pre>
&lt;?xml version="1.0"?>
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  &lt;xsl:template match="*">
    &lt;xsl:apply-templates/>
  &lt;/xsl:template>

  &lt;xsl:template match="text()"/>

  &lt;xsl:template match="Item">
    &lt;b>&lt;xsl:value-of select="./name"/>&lt;/b>: &lt;i>&lt;xsl:value-of select="./val-string"/>&lt;/i>&lt;br />
  &lt;/xsl:template>

  &lt;xsl:template match="/">
    &lt;html>
      &lt;head>
        &lt;title>Summary Gnumeric File&lt;/title>
      &lt;/head>
      &lt;body bgcolor="white">
        &lt;xsl:apply-templates/>
      &lt;/body>
    &lt;/html>
  &lt;/xsl:template>

&lt;/xsl:stylesheet>
</pre>
</P>

<p>
Disponemos ahora de un <em>template</em> adicional para el elemento ra&iacute;z (/). Esto
hace posible colocar c&oacute;digo XHTML alrededor del resto de la salida; la salida
que obtuvimos en el primer ejemplo se coloca ahora en el cuerpo. &iquest;Por qu&eacute;? Cuando
XML::XSLT empieza a procesar, busca un <em>template</em> que encaje con el elemento
ra&iacute;z. Entonces imprime el c&oacute;digo XHTML hasta la apertura con la etiqueta <i>body</i>.
Entonces sigue aplicando <em>templates</em> a todos los elementos hijos. Cuando
se han acabado contin&uacute;a con el <em>template</em> ra&iacute;z de nuevo, imprimiendo las
etiquetas <i>body</i> y <i>html</i> de cierre.
</P>

<p>
Tambi&eacute;n hay algo de c&oacute;digo XHTML adicional en el <em>template</em> Item. Notemos
que se pueden mezclar comandos XSLT con la salida de datos. Un procesador de XSLT
toma como salida cada elemento que no se encuentra en el espacio de nombres
<i>xsl</i>.
</P>

<p>
A partir de ahora los ejemplos s&oacute;lo contendr&aacute;n los <em>templates</em> nuevos o
modificados. En la hoja de estilo final deberemos enlazarlos todos. Para finalizar
nuestro primer ejemplo, a&ntilde;adiremos una cabecera mediante una segunda instancia
del comando apply-templates
(<a href="../../common/src/article156/finalsimple.xsl">finalsimple.xsl</a>):
<pre>
  &lt;xsl:template match="Summary">
    &lt;h2>Summary&lt;/h2>
    &lt;ul>
      &lt;xsl:apply-templates/>
    &lt;/ul>
  &lt;/xsl:template>
</pre>
</P>

<A NAME="lfindex3">&nbsp;</A>
<H2>El comando for-each</H2>


<p>
El comando xsl:for-each nos da mayor control sobre el procesado del documento
XML, especialmente en combinaci&oacute;n con xsl:sort, aunque ese comando a&uacute;n no est&aacute;
implementado en XML::XSLT.
</P>

<p>
Para a&ntilde;adir informaci&oacute;n sobre las hojas de c&aacute;lculo de Gnumeric, usaremos
xsl:for-each (<a href="../../common/src/article156/foreach.xsl">foreach.xsl</a>):
<pre>
  &lt;xsl:template match="Sheets">
    &lt;xsl:for-each select="Sheet">
      &lt;h2>&lt;xsl:value-of select="Name"/>&lt;/h2>
      &lt;ul>
        Rows: &lt;xsl:value-of select="MaxRow"/>&lt;br />
        Cols: &lt;xsl:value-of select="MaxCol"/>&lt;br />
      &lt;/ul>
    &lt;/xsl:for-each>
  &lt;/xsl:template>
</pre>
</P>

<p>
El documento XML consta de una s&oacute;la hoja de c&aacute;lculo. Puedes intentar probar con
un fichero de Gnumeric con m&aacute;s de una hoja de c&aacute;lculo.
</P>

<p>
Como mencionamos m&aacute;s arriba, no podemos ordenar elementos con XML::XSLT en el
momento actual. Lo que es una pena, dado que los datos XML en el fichero Gnumeric
no est&aacute;n ordenados. Si podemos ordenarlos, seremos capaces de generar una tabla
XHTML que nos de el contenido exacto de la hoja de c&aacute;lculo, pero eso no es posible
a&uacute;n. A pesar de ello, lo que s&iacute; podemos hacer es listar toda la informaci&oacute;n de
una cierta fila o columna, tal y como se hace en el siguiente ejemplo.
</P>

<A NAME="lfindex4">&nbsp;</A>
<H2>El comando if</H2>


<p>
Para listar los datos de la tercera columna (que contiene los sueldos de los
estudiantes en Holanda), podemos hacer uso del comando xsl:if
(<a href="../../common/src/article156/if.xsl">if.xsl</a>):
<pre>
  &lt;xsl:template match="Sheets">
    &lt;xsl:for-each select="Sheet">
      &lt;h2>&lt;xsl:value-of select="Name"/>&lt;/h2>
      &lt;ul>
        Rows: &lt;xsl:value-of select="MaxRow"/>&lt;br />
        Cols: &lt;xsl:value-of select="MaxCol"/>&lt;br />
        &lt;xsl:apply-templates select="Cells"/>&lt;br />
      &lt;/ul>
    &lt;/xsl:for-each>
  &lt;/xsl:template>

  &lt;xsl:template match="Cells">
    Content of Col 3:
    &lt;xsl:for-each select="Cell">
      &lt;xsl:if test="@Col='3'">
        &lt;xsl:value-of select="Content"/>&lt;xsl:text>, &lt;/xsl:text>
      &lt;/xsl:if>
    &lt;/xsl:for-each>
  &lt;/xsl:template>
</pre>
</P>

<p>
Dado que Sheets no es capaz, tendremos que decirle que use
el <em>template</em> Cells sobre sus hijos. Usando el par&aacute;metro select en
combinaci&oacute;n con el comando xsl:apply-templates, podemos forzarle a aplicar tan
s&oacute;lo el <em>template</em> Cells.
</P>

<p>
El <em>template</em> Cells act&uacute;a sobre todos los elementos Cell hijos
(nuevamente, hay que asegurarse de esto en la fuente XML!), pero s&oacute;lo imprime
el valor si la propiedad Col tiene el valor "3". Hay que notar the el signo "@"
ser refiere a las propiedades, mientras que la omisi&oacute;n del mismo se refiere a
los elementos.
</P>

<p>
Seg&uacute;n se van complicando los <em>templates</em>, se va complicando averiguar
cual es el elemento actual. Dentro del documento no existe ning&uacute;n foco, pero
una vez que se aplica un <em>template</em> aparece un foco. Por ejemplo, al
aplicar el <em>template</em> Cells el procesador focaliza en una instancia de
dicho elemento. Al seleccionar informaci&oacute;n se
utiliza este foco: select="." dentro del <em>template</em> Cells ser refiere
al elemento Cells. El select="Cell" del comando xsl:for-each seleccionar&iacute;a todos
los elementos Cell, pero una vez dentro del bucle, el foco quedar&iacute;a cada vez
en uno de esos elementos Cell. Notemos que test="@Col" se refiere a la propiedad
de Cell y no de Cells. Desde dentro del bucle podemos referirnos a las propiedades
de Cells con select="../@name", si dejamos de lado el hecho de que
Cells no tiene propiedades.
</P>

<p>
El comando xsl:text se asegura de que el texto es enviado &iacute;ntegro a la salida.
Normalmente el espacio de la secuencia ", " ser&iacute;a tomado como un espacio en
blanco y por tanto una parte poco importante de la salida. Usando xsl:text
podemos asegurarnos de que todo el texto ser&aacute; enviado correctamente.
</P>

<A NAME="lfindex5">&nbsp;</A>
<H2>Conclusi&oacute;n</H2>


<p>
A&uacute;n queda mucho m&aacute;s sobre XSLT y el m&oacute;dulo XML::XSLT. Este breve art&iacute;culo
trata de ser simplemente una introducci&oacute;n al m&oacute;dulo. Posiblemente plantea
m&aacute;s preguntas de las que responde, pero eso es bueno. Podemos probar con la
p&aacute;gina de talkback o las listas de correo del sitio web de XML::XSLT.
</P>

<A NAME="lfindex6">&nbsp;</A>
<H2>Referencias</H2>

<ul>
  <li><a href="http://www.w3.org/TR/xslt">Transformaciones XSL</a>
  <li><a href="http://xmlxslt.sourceforge.net">Sitio web de XML::XSLT</a>
  <li><a href="http://www.gnumeric.org/apps/gnumeric.php3">Sitio web de Gnumeric</a>
</ul>

<A NAME="lfindex7">&nbsp;</A>
<H2>Glosario</H2>


<p><b>CDATA</b><br>
CDATA es un dato tipo car&aacute;cter y puede ser cualquier secuencia de caracteres
que no contengan "]]>". Se puede ver en la
<a href="http://www.w3.org/TR/1998/REC-xml-19980210">recomendaci&oacute;n
XML</a>.
</P>

<p><b>DOM (Document Object Model)</b><br>
Un interface que puede usarse para acceder a documentos,
por ejemplo, documentos XML. Se puede mirar en el
<a href="http://www.w3.org/DOM/">sitio web de DOM</a>.
</P>

<p><b>Gnumeric</b><br>
Un programa de hoja de c&aacute;lculo para Gnome.
</P>




<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=156&lang=es"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="95%">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Egon Willighagen, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
<BR><a href="http://cgi.linuxfocus.org/cgi-bin/lfcomment?lang=es&article=article156.html" target="_TOP">Pinchar aqu&iacute; para informar de alg&uacute;n problema o enviar comentarios a LinuxFocus</A><BR></TD>
<TD BGCOLOR="#9999AA"><!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font><TABLE>
<tr><td><font size=2>en</font></td>
    <td><font size=2>-&gt;</font></td>
    <td><font size=2>--</font></td>
    <td><font size=2><a href="mailto:egon.w@linuxfocus.org"><FONT COLOR="#FFFFFF">Egon Willighagen</FONT></a></font></td>
</tr>
<tr><td><font size=2>en</font></td>
    <td><font size=2>-&gt;</font></td>
    <td><font size=2>es</font></td>
    <td><font size=2><a href="mailto:javier.pb@linuxfocus.org"><FONT COLOR="#FFFFFF">Javier Palacios</FONT></a></font></td>
</tr>
</TABLE></TD>
</TR></TABLE></CENTER>
<p><font size=1>2001-03-30, generated by lfparser version 2.9</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
