<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//ES">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.9">
 <META NAME="LFCATEGORY" CONTENT="Software Development">
 <TITLE>lf160, Software Development: Desarrolando aplicaciones Gnome con Python (Parte I)</TITLE>
<!-- stylesheet added by lfparser: --> 
<style type="text/css">
<!--
 pre { font-familiy:monospace,Courier }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- 2pdaIgnoreStart -->
<MAP name="top">
  <AREA shape="rect" coords="367,9,418,30" alt="Hogar" href="../">
  <AREA shape="rect" coords="423,9,457,30" alt="Mapa" href="../map.html">
  <AREA shape="rect" coords="463,9,508,30" alt="Indice" href="../indice.html">
  <AREA shape="rect" coords="514,9,558,30" alt="Busqueda" href="../Search/">
</MAP>
<MAP name="bottom">
  <AREA shape="rect" coords="78,0,163,15" alt="Noticias" href="../News/">
  <AREA shape="rect" coords="189,0,284,15" alt="Arca" href="../Archives/">
  <AREA shape="rect" coords="319,0,395,15" alt="Enlaces" href="../Links/">
  <AREA shape="rect" coords="436,0,523,15" alt="Sobre LF" href="../aboutus.html">
</MAP>
<!-- IMAGE HEADER -->
<CENTER>
  <IMG src="../../common/images/Topbar-es.gif" width="600" height="40" border="0" alt="[Top bar]" ismap usemap="#top" ><BR>
  <IMG src="../../common/images/Bottombar-es.gif" width="600" height="21" border="0" alt="[Bottom bar]" ismap usemap="#bottom">
</CENTER>
<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0 hspace=4 vspace=4 WIDTH="30%" >
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<img src="../../common/images/HilaireFernandes.png" width=124 height=185 alt="Hilaire Fernandes">
<BR>por  <a href="mailto:hfernandes@april.org">Hilaire Fernandes</a>
<BR><BR>
<I>Sobre el autor:</I><BR>
<p>Hilaire Fernandes es el vice-presidente de
<a href="http://www.ofset.org">OFSET</a>, una organizaci&oacute;n dedicada a
promover el desarrollo de software educacional libre para el escritorio
Gnome. Tambi&eacute;n es el autor de Dr.Geo, un programa interactivo de
geometr&iacute;a que ha ganado algunos premios, y se encuentra en estos momentos
trabajando en Dr.Genius, otro programa educativo sobre Matem&aacute;ticas
para el escritorio Gnome.</p>
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#lfindex0">Herramientas necesarias</A></LI>
  <LI><A HREF="#lfindex1">Glade, LibGlade &amp; y la interacci&oacute;n con Python</A></LI>
  <LI><A HREF="#lfindex2">Un ejemplo llamado couleur</A></LI>
  <LI><A HREF="#lfindex3">Creando un interfaz con Glade</A></LI>
  <LI><A HREF="#lfindex4">El c&oacute;digo Python</A></LI>
  <LI><A HREF="#lfindex5">Inclusi&oacute;n de los m&oacute;dulos necesarios</A></LI>
  <LI><A HREF="#lfindex6">Cargando el interfaz con Libglade</A></LI>
  <LI><A HREF="#lfindex7">Definiendo los handlers</A></LI>
  <LI><A HREF="#lfindex8">El GnomeCanvasItem</A></LI>
  <LI><A HREF="#lfindex9">Los eventos de las piezas</A></LI>
  <LI><A HREF="#lfindex10">Unas palabras finales</A></LI>
  <LI><A HREF="#lfindex11">Ap&eacute;ndice: Las fuentes completas</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=160&lang=es">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<H2>Desarrolando aplicaciones Gnome con Python (Parte I)</H2>
 <img src="../../common/images/article160/gnome.png" width=48 height=48 alt="Gnome" hspace="10">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<p>Esta serie de art&iacute;culos est&aacute; escrita pensada en principiantes a
GNU/Linux y a la programaci&oacute;n en Gnome. El lenguaje de programaci&oacute;n
escogido, Python, evita la sobrecarga habitual en lenguajes compilados
como C. Es necesario cierto conocimiento previo de la programaci&oacute;n en
Python.</p></P>
<HR size="2" noshade align="right"><BR>
<!-- BODY OF THE ARTICLE -->



<A NAME="lfindex0">&nbsp;</A>
<H2>Herramientas necesarias</H2>

<p>
Para poder ejecutar el programa que se describe en este art&iacute;culo es
necesario disponer, por lo menos, de:
<ul>
<li><b>Python 1.52</b>
<br>
[&nbsp;<a href="http://www.python.org/download/download_linux.html">http://www.python.org/download/download_linux.html</a>&nbsp;]
<br>
Las versiones m&aacute;s antiguas hacen el desarrollo con Gnome-Python inestable.
Si usas rpm puedes encontrar los paquetes para tu sistema
<br>
[&nbsp;<a href="http://rpmfind.net/linux/RPM/PByName.html">http://rpmfind.net/linux/RPM/PByName.html</a>&nbsp;]
</li>
<li><b>Gnome Python 1.0.53</b>
[&nbsp;<a href="http://www.daa.com.au/~james/pygtk/">http://www.daa.com.au/~james/pygtk/</a>&nbsp;]
</li>
<li><b>October Gnome</b>
</li>
<li><b>Glade 0.5.7</b>
[&nbsp;<a href="http://glade.pn.org">http://glade.pn.org</a>&nbsp;]
</li>
<li><b>LibGlade 0.12</b>
[&nbsp;<a href="http://www.daa.com.au/~james/gnome/#libglade">http://www.daa.com.au/~james/gnome/#libglade</a>&nbsp;]
</li>
<li>Un editor adecuado, como <b>GNU Emacs</b>. En este caso, preferir&aacute;s
instalar el modo Python
<br>
[&nbsp;<a href="http://www.python.org/emacs/python-mode/">http://www.python.org/emacs/python-mode/</a>&nbsp;]
<br>
para emacs. En la localizaci&oacute;n anterior encontrar&aacute;s tambi&eacute;n las instrucciones
para hacerlo.
</li>
<li>Tambi&eacute;n necesitaras el .glade original
<br>
[&nbsp;<a href="../../common/src/article160/color_glade.txt">color.glade</a>&nbsp;]
<br>
y el c&oacute;digo fuente de Python.
<br>
[&nbsp;<a href="../../common/src/article160/couleur_py.txt">couleur.py</a>&nbsp;]
</li>
</ul>
</p>

<p>Para instalar Pyhton-Gnome y LibGlade a partir de las fuentes:<table width="50%" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
./configure
make
make install
</pre></td></tr>
</table>
ser&aacute; suficiente. Encontrar&aacute;s una explicaci&oacute;n m&aacute;s detallada en
<br>
[&nbsp;<a href= "http://www.linuxgazette.com/issue38/pollman.html">http://www.linuxgazette.com/issue38/pollman.html</a>&nbsp;].
</p>

<p>
Debes verificar que la variable de entorno <tt>PYTHONPATH</tt> apunta
hacia el lugar donde est&aacute;n instalados los m&oacute;dulos de Python-Gnome.
T&iacute;picamente son <tt>/usr/local/lib/python1.5/site-packages</tt> o
<tt>/usr/lib/python1.5/site-packages/</tt>. En estos lugares encontrar&aacute;s
todos los enlaces necesarios para Gnome y LibGlade, como puede ser el
m&oacute;dulo <tt>libglade.py</tt>. Puedes fijar <tt>PYTHONPATH</tt> por el
simple m&eacute;todo de a&ntilde;adirla en tu <tt>.bash_profile</tt>:
<table width="50%" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
PYTHONPATH=/usr/local/lib/python1.5/site-packages
export PYTHONPATH
</pre></td></tr>
</table>
No olvides que debes arrancar tu c&oacute;digo Python desde un terminal
para que esta variable est&eacute; fijada.</p>

<br clear=all>

<A NAME="lfindex1">&nbsp;</A>
<H2>Glade, LibGlade &amp; y la interacci&oacute;n con Python</H2>


<p>
Glade es un desarrollador de interfaces creado por <tt>Damon Chaplin</tt>.
Permite construir de forma gr&aacute;fica e interactiva interfaces de usuario
gr&aacute;ficos para Gnome/Gtk. Desde Glade, el interfaz generado se puede
archivar en formato xml o directamente como c&oacute;digo C para ser incluido
en un programa C convencional. Glade tambi&eacute;n permite definir los nombres
de los <em>handler</em> (funciones) que se asociar&aacute;n a cada uno de los
eventos del interfaz. Por ejemplo, la funci&oacute;n (name) que se llamar&aacute; cuando
se seleccione un determinado elemento del men&uacute;.
</p>

<p>
LibGlade es una librer&iacute;a escrita por <tt>James Henstridge</tt> para
generar sobre la marcha un interfaz almacenado en un fighero xml de Glade.
La aplicaci&oacute;n necesita tan s&oacute;lo el nombre del fichero xml, generalmente
terminado con la extensi&oacute;n .glade, para generar el interfaz a partir de
&eacute;l. James Henstridge tambi&eacute;n ha escrito el enlance LibGlade Pyhton (entre
otros) que est&aacute; presente en el paquete Gnome-Python. LibGlade tambi&eacute;n
permite auto-conexi&oacute;n de los <em>handler</em> definidos en el fichero
.glade con funciones definidas en el c&oacute;digo Python.
</p>

<p>
El gr&aacute;fico adjunto muestra este mecanismo de forma general. Para entender
c&oacute;mo est&aacute; implementado el enlace a Python, a veces es necesario echar un
vistazo a los m&oacute;dulos de Gtk, Gnome, LibGlade y Python que se encuentran
en <tt>PYTHONPATH</tt> para compararlos con la documentaci&oacute;n de desarrollo
en C sobre Gtk/Gnome.
<center>
<img src="../../common/images/article160/python1-1.png" width=399 height=202>
</center>
</p>

<A NAME="lfindex2">&nbsp;</A>
<H2>Un ejemplo llamado couleur</H2>


<p>
Como primera aproximaci&oacute;n a la programaci&oacute;n bajo Gnome-Python, proponemos
un juego en color, donde los ni&ntilde;os tienen que reconocer piezas de un
mismo color. Este ejemplo est&aacute; directamente orientado a los gr&aacute;ficos
y sirve para introducir varias caracter&iacute;sticas y elementos de programaci&oacute;n
como el Canvas Gnome y la ventana de aplicaciones Gnome. Las reglas
del juego son  sumamente simples: el tablero est&aacute; formado por 16 piezas
diferentes (c&iacute;rculos, estrellas y cuadrados) de diferentes colores. Estas
16 piezas se dividen en 8 pares de id&eacute;ntico color. El juego acaba cuando
se seleccionan de forma sucesiva estos 8 pares. Tal vez quieras echar un
vistazo al c&oacute;digo que se encuentra al final del art&iacute;culo para tener una
idea general, y luego retomar el art&iacute;culo desde aqu&iacute;.
</p>

<center>
<img src="../../common/images/article160/python1-0.png" width=426 height=542>
</center>

<A NAME="lfindex3">&nbsp;</A>
<H3>Creando un interfaz con Glade</H3>


<p><b>Los <em>widgets</em></b></p>

<p>
<img align="right" src="../../common/images/article160/python1-2.png" width=131 height=362>
Tras arrancar Glade, nos aparecer&aacute;n dos ventanas. Una de ellas, llamada
<tt>Palette</tt> (paleta), contiene las herramientas para <em>widgets</em>. Con ella
podemos seleccionar la categor&iacute;a del <em>widget</em> entre
<tt>GTK+ Basic</tt>, <tt>GTK+ Additional</tt> y <tt>Gnome</tt>.
Si no te aparece el tipo Gnome, Glade se habr&aacute; compilado sin soporte
para Gnome. Consulta el <tt>configure</tt> del paquete con las fuentes
de Glade, <tt>configure --help</tt> explica las opciones de configuraci&oacute;n.
</p>

<p>
La otra ventana contiene una lista de los <em>widgets</em> creados.
</p>

<p>
Lo primero que haremos con Glade ser&aacute; crear una ventana de aplicaci&oacute;n
Gnome. Este <em>widget</em> es una ventana con una barra de men&uacute; y una
barra de herramientas. Ambas gestionadas por el <em>handler</em> dock.
Debajo de la ventana de aplicaci&oacute;n Gnome encontramos una barra de
estatus. Tras crear la ventana de aplicaci&oacute;n Gnome, podemos abrir el
di&aacute;logo <tt>Widget Tree</tt> (que encontrar&aacute;s en el men&uacute; de vistas bajo
Glade). Ahora puedes mirar qu&eacute; hay dentro de este <em>widget</em>.
</p>

<p>
<img src="../../common/images/article160/python1-4.png" width=410 height=394>
</p>

<p>
A&ntilde;adimos un canvas al &aacute;rea principal del <em>widget</em> de aplicaci&oacute;n
Gnome. Desde el di&aacute;logo de <tt>propiedades</tt>, fijamos sus coordenadas
m&aacute;ximas a 400, y su altura y anchura m&aacute;ximas a 400.
</p>

<center>
<img src="../../common/images/article160/python1-5.png" width=242 height=394>
<img src="../../common/images/article160/python1-6.png" width=242 height=394>
</center>

<p>
Y ya podemos crear el di&aacute;logo <em>Gnome About</em>. Podemos cambiar
su contenido con el di&aacute;logo <tt>propiedades</tt> en la hoja de
<em>widgets</em>.
</p>

<p>
Todos estos <em>widgets</em> son de la categor&iacute;a Gnome mostrada en la
<tt>Paleta</tt>.
</p>

<p>
Ahora borramos los botones y entradas del men&uacute; que no usamos. En la
barra de herramientas, quitamos los botones de <tt>Abrir</tt> y
<tt>Salvar</tt>. Seguidamente, editamos la barra de men&uacute; (click
derecho sobre ella, y seleccionamos <tt>edit menu</tt>) y borramos
todos los men&uacute;s y entradas de men&uacute; excepto <tt>File-&gt;New</tt>,
<tt>File-&gt;Exit</tt>, <tt>Setting-&gt;Preferences</tt> y <tt>
Help-&gt;About</tt>.
</p>

<p>
<b>Fijando los <em>widget</em> y los nombres de <em>handler</em></b>
</p>

<p>
Para poder usarlos en Python, debemos aplicar ciertos nombres a
los <em>handler</em> de los <em>widgets</em>:
<dl id="widgetname">
<dt><b>Gnome Application Window:</b></dt>
<dd><tt>colorApp</tt></dd>
<dt><b>Gnome About Dialog:</b></dt>
<dd><tt>about</tt></dd>
</dl>
</p>

<p>
Los <em>handler</em> son funciones especiales a las que se llama cuando
ocurre alg&uacute;n evento particular. Esto quiere decir que definiremos las
funciones en Python usando estos nombres, como veremos m&aacute;s adelante.
Por ejemplo, cuando el usuario pulsa sobre el icono de "Nuevo",
queremos llamar a una funci&oacute;n que resetee el juego. Para hacer esto
desde Glade, primero necesitamos seleccionar el <en>widget</em>, y luego
ajustar su hoja de se&ntilde;ales con el di&aacute;logo <tt>propiedades</tt>.
</p>

<p>
En nuestro ejemplo la se&ntilde;al es <tt>clicked</tt> y el <em>handler</em>
es el nombre de la funci&oacute;n. La siguiente tabla muestra todas las
se&ntilde;ales y <em>handler</em> usados:
</p>

<p>
En el di&aacute;logo <tt>about</tt>:
<center>
<img src="../../common/images/article160/python1-3.png" width=410 height=394>
<table border="1" cellpadding="8">
<tr>
<th>Nombre del <em>widget</em></th>
<th>Se&ntilde;al</th>
<th>Handler</th>
</tr>
<tr>
<td>about</td>
<td>clicked</td>
<td>gtk_widget_destroy</td>
</tr>
<tr>
<td>about</td>
<td>close</td>
<td>gtk_widget_destroy</td>
</tr>
<tr>
<td>about</td>
<td>destroy</td>
<td>gtk_widget_destroy</td>
</tr>
</table>
</center>
</p>

<p>
El <em>handler</em> <tt>gtk_widget_destroy</tt> est&aacute; predefinido en GTK.
Simplemente, destruye el <em>widget</em>.
</p>

<p>
En la ventana <tt>colorApp</tt> lo que sucede es que Glade selecciona
de forma autom&aacute;tica las se&ntilde;ales y <em>handler</em> para los elementos
del men&uacute;. Puedes comprobar sus nombres, que se incluyen en la siguiente
tabla. Observar&aacute;s que el bot&oacute;n "Nuevo" y el elemento de men&uacute; "Nuevo"
comparte un mismo <em>handler</em>, ya que tienen prop&oacute;sitos similares.
<center>
<table border="1" cellpadding="8">
<tr>
<th>Nombre del <em>widget</em></th>
<th>Se&ntilde;al</th>
<th>Handler</th>
</tr>
<tr>
<td>button1 (bot&oacute;n "Nuevo" de la barra de herramientas)</td>
<td>clicked</td>
<td>on_new_activate</td>
</tr>
<tr>
<td>new</td>
<td>activate</td>
<td>on_new_activate</td>
</tr>
<tr>
<td>colorApp</td>
<td>destroy</td>
<td>on_exit1_activate</td>
</tr>
<tr>
<td>exit1</td>
<td>activate</td>
<td>on_exit1_activate</td>
</tr>
<tr>
<td>about1</td>
<td>activate</td>
<td>on_about_activate</td>
</tr>
</table>
</center>
</p>


<p>
<b>El toque final</b>
</p>

<p>
Invocamos las <tt>Opciones de Proyecto</tt> desde el bot&oacute;n de
<tt>Opciones</tt> en la barra de herramientas de Glade. EN la hoja
<tt>General</tt>, ajustamos las entradas del proyecto como se describe
debajo:
<center>
<img src="../../common/images/article160/python1-7.png" width=474 height=379>
</center>
</p>


<p>
El fichero que representa a los <em>widgets</em> es <tt>color.glade</tt>.
Cambiamos el path a nuestro propio directorio ra&iacute;z.
</p>

<p>
Ahora salvamos el fichero desde el men&uacute; de <tt>Archivos</tt>. No compilamos
el c&oacute;digo fuente, ya que no usaremos esa caracter&iacute;stica.
<br>
Ahora, debemos cerrar Glade, y podemos empezar a trabajar con Python.
</p>

<A NAME="lfindex4">&nbsp;</A>
<H3>El c&oacute;digo Python</H3>


<p>
Hemos inclu&iacute;do el c&oacute;digo completo al final del art&iacute;culo. Se deber&iacute;a
almacenar en la misma localizaci&oacute;n que el fichero <tt>color.glade</tt>.
</p>

<A NAME="lfindex5">&nbsp;</A>
<H3>Inclusi&oacute;n de los m&oacute;dulos necesarios</H3>


<table width="650" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
from math import cos, sin, pi
from whrandom import randint
from gtk import *
from gnome.ui import *
from GDK import *
from libglade import *
</pre></td></tr>
</table>

<p>
Con los m&oacute;dulos <tt>math</tt> y <tt>whrandom</tt>, inclu&iacute;mos
las funciones <tt>cos</tt>, <tt>sin</tt>, <tt>randint</tt> y la constante
<tt>pi</tt>, no espec&iacute;ficos de Gnome. Los m&oacute;dulos espec&iacute;ficos d Gnome son
<tt>gtk</tt>, <tt>GDK</tt> y <tt>gnome.ui</tt>. En C, al incluir
<tt>gnome.h</tt> tendremos todas las cabeceras de Gnome. En Python,
has de averiguar en qu&eacute; modulo se encuentra el enlace a la funci&oacute;n Gnome
que quieres usar. Puedes, desde un terminal de texto con el shell,
buscar el m&oacute;dulo que contenga la cadena &quot;canvas&quot; con el
comando:
<table width="650" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
cd /usr/local/lib/python1.5/site-packages/gnome
grep canvas *.py
</pre></td></tr>
</table>
asumiendo que los enlaces Gnome se encuentran en el directorio
/usr/local/lib/python1.5/site-packages.
</p>

<A NAME="lfindex6">&nbsp;</A>
<H3>Cargando el interfaz con Libglade</H3>


<p>
En este ejempleo usamos el Canvas Gnome para manipular las piezas
(en este caso estrellas, c&iacute;rculos y cuadrados). Un canvas es un dep&oacute;sito
para objetos gr&aacute;ficos (elipses, puntos, l&iacute;neas, rect&aacute;ngulos , ...),
objetos de texto e incluso widgets. De hecho, un canvas puede contener
a su vez varios grupos de canvas. En estos &uacute;ltimos colocaremos nuestros
elementos del canvas (nuestras piezas). Por defecto, un canvas contiene
un grupo de canvas, llamado el grupo ra&iacute;z, que es el que usaremos para
colocar nuestras piezas.
</p>

<p>
En primer lugar definimos algunas variables globales:
<ul>
<li><tt>canvas</tt>: para contener la referencia al canvas,es un objeto
<tt>GnomeCanvas</tt>
<li><tt>rootGroup</tt>: para la referencia al grupo ra&iacute;z del canvas. Es
un objeto <tt>GnomeCanvasGroup</tt>
<li><tt>selectedItem</tt>: para la forma actualmente seleccionada (estrella,
c&iacute;rculo o cuadrado). Estas formas son objetos del tipo <tt>GnomeCanvasItem</tt>
<li><tt>colorShape</tt>: una lista para las referencias a las piezas (esto
es a los <tt>GnomeCanvasItem</tt>)
</ul>
</p>

<p>
La primera funci&oacute;n que invocaremos (<tt>initColor</tt>) construye los
<em>widgets</em> a partir del fichero <tt>color.glade</tt> y auto-conecta
los <em>handlers</em> los <em>widgets</em> creados.
<table width="650" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
def initColor ():
    global rootGroup, canvas
    wTree = GladeXML ("color.glade",
                      "colorApp")
    dic = {"on_about_activate": on_about_activate,
           "on_exit1_activate": mainquit,
           "on_new_activate":on_new_activate}
    wTree.signal_autoconnect (dic)
    canvas = wTree.get_widget ("canvas")
    rootGroup = canvas.root ()
</pre></td></tr>
</table>
</p>

<p>
La construcci&oacute;n de los <em>widgets</em> se hace con la funci&oacute;n
<tt>GladeXML</tt>, aunque hay que ajustar la ruta hacial el fichero
<tt>color.glade</tt>. Esta funci&oacute;n construye y muestra la ventana
de aplicaci&oacute;n Gnome <tt>colorApp</tt> que definimos con Glade.
Devuelve un objeto (en realidad una clase) con multitud de m&eacute;todos
&uacute;tiles.
</p>

<p>
Seguidamente conectamos los <em>handlers</em> que hemos definido
en Python (mas sobre ello luego) a los <em>widgets</em> definidos en
el fichero <tt>color.glade</tt>. Para ello, debemos construir un
diccionario que contenga entradas para los nombres de <em>handler</em>
definidos en el fichero <tt>color.glade</tt>: <tt>on_about_activate</tt>,
<tt>on_exit1_activate</tt> y <tt>on_new_activate</tt>. Los valores
as&iacute; obtenidos ser&aacute;n los nombres de las funciones definidas en Python.
<br>
Finalmente el m&eacute;todo <tt>signal_autoconnect</tt> har&aacute; el resto del
trabajo por nosotros.
</p>

<p>
Lo &uacute;ltimo que haremos ser&aacute; recuperar la referencia al canvas que
se ha creado con la llamada a <tt>GladeXML</tt> (un objeto
<tt>GnomeCanvas</tt> en Python) y el grupo de canvas raiz (el objeto
<tt>GnomeCanvasGroup</tt>).
</p>

<p><b>Consejos &uacute;tiles</b></p>

<p>
No existe ning&uacute;n manual de referencia que cubra los enlaces de Gnome
con Python. Sin embargo, existen un mont&oacute;n de documentaci&oacute;n sobre
programaci&oacute;n en C para Gnome disponible en el sitio web de Gnome.
Echar un vistazo a esta documentaci&oacute;n puede ser &uacute;til, pero tambi&eacute;n
necesitar&aacute;s echar un vistazo al enlace de Gnome con Python para poder
explotarlo:
</p>

<p>
El enlace est&aacute; localizado en
<tt>/usr/local/lib/python1.5/site-packages/gnome/</tt> o
<tt>/usr/lib/python1.5/site-packages/gnome/</tt> y al
hojear el enlace podemos observar varias cosas
<ol>
<li>en el enlace <tt>libglade.py</tt>:
<ul>
<li><tt>GladeXML</tt> es de hecho un objeto, de modo que simplemente
llam&aacute;bamos al constructor <tt>__init__</tt>.  Su primer argumento, como
pod&iacute;amos esperar, es el nombre del fichero <tt>filename</tt>
(<tt>self</tt> es un argumento autom&aacute;tico representando una referencia
al objeto actual). El segundo argumento (<tt>root</tt>) el el
<em>widget</em> del nivel m&aacute;s alto, donde constru&iacute;mos el GUI. Este
m&eacute;todo llama a la funci&oacute;n C <tt>glade_xml_new_with_domain</tt>.
Ahora podemos mirar la documentaci&oacute;n en C de LibGlade para obtener m&aacute;s
informaci&oacute;n sobre la funci&oacute;n <tt>glade_xml_new_with_domain</tt>.
<li>Dentro del objeto <tt>GladeXML</tt> hay un m&eacute;todo
<tt>get_widget</tt> que llama a la funci&oacute;n C
<tt>glade_xml_get_widget</tt>.
<br>
De modo que cuando Python ejecuta
<tt>canvas&nbsp;=&nbsp;wTree.get_widget ("canvas")</tt>,
en realidad llama a la funci&oacute;n C <tt>glade_xml_get_widget</tt>.
</ul>
<li>En el enlace<tt>gnome/ui.py</tt>:
<ul>
<li>El objeto <tt>GnomeCanvas</tt> contiene el m&eacute;todo <tt>root</tt>
de nuestro c&oacute;digo Python. Est&aacute; conectado a la funci&oacute;n C
<tt>gnome_canvas_root</tt>.
</ul>
</ol>
</p>

<p>
Para cada uso de Gnome con Python podemos hacer lo mismo con la
documentaci&oacute;n relacionada. Dejaremos al lector interesado bucear en
la documentaci&oacute;n de Gnome para aprender m&aacute;s sobre estas funciones.
</p>

<A NAME="lfindex7">&nbsp;</A>
<H3>Definiendo los <em>handlers</em></H3>


<p>
Hay tres <em>handlers</em> para auto-conectar con el GUI. Son
<tt>on_about_activate</tt>, <tt>on_new_activate</tt> y
<tt>mainquit</tt>. El &uacute;ltimo de ellos es, de hecho, la funci&oacute;n Python
que para y sale de Python.
</p>

<table width="650" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
def on_about_activate(obj):
    "display the about dialog"
    about = GladeXML ("color.glade", "about").get_widget ("about")
    about.show ()
</pre></td></tr>
</table>

<p>
Este <em>handler</em> abre el di&aacute;logo <tt>about</tt>. Primero definimos
una referencia al di&aacute;logo <tt>about</tt> (que construy&oacute; LibGlade a trav&eacute;s
de un objeto <tt>GladeXML</tt>). Recordemos que <tt>GladeXML</tt> es
un objeto Python con un m&eacute;todo (entre muchos otros) llamado <tt>get_widget</tt>.
Este m&eacute;todo devuelve un objeto <tt>GtkWidget</tt> que contiene al m&eacute;todo
<tt>show</tt>.
</p>

<p><b>Pistas</b></p>

<p>
Echemos un vistazo al objeto <tt>GtkWidget</tt> del enlace <tt>gtk.py</tt>.
Veremos que este objeto tiene un m&eacute;todo <tt>show</tt>. El <em>handler</em>
anterior se podr&iacute;a haber escrito como:<br>
<tt>GladeXML("color.glade","about").get_widget("about").show()</tt>.
</p>

<table width="650" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
def on_new_activate (obj):
    global rootGroup, colorShape
    for item in colorShape:
        item.destroy ()
    del colorShape[0:]
    buildGameArea (rootGroup)
</pre></td></tr>
</table>

<p>Este <em>handler</em> rehace el &aacute;rea de juego. En primer lugar,
destruye las piezas existentes. Las piezas son objetos
<tt>GnomeCanvasItem</tt> derivados de objetos <tt>GtkObject</tt>, que
contienen un m&eacute;doto <tt>destroy</tt>. Acto seguido, crea una nueva
&aacute;rea de juego.
</p>

<A NAME="lfindex8">&nbsp;</A>
<H3>El GnomeCanvasItem</H3>


<p><b>Definici&oacute;n de la forma</b></p>

<p>
La funci&oacute;n <tt>buildGameArea</tt> coordina la creaci&oacute;n del &aacute;rea de juego
en el grupo <tt>GnomeCanvasGroup</tt>. Las piezas (<tt>GnomeCanvasItem</tt>)
se construyen con llamadas a la funci&oacute;n <tt>buildShape</tt>.
Las piezas pueden ser c&iacute;rculos, cuadrados o estrellas.
</p>

<p>
La creaci&oacute;n de la pieza se hace con el siguiente c&oacute;digo, seg&uacute;n el tipo:
<table width="650" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
item = group.add ("ellipse", x1 = x - r, y1 = y - r,
                  x2 = x + r, y2 = y + r, fill_color = color,
                  outline_color = "black", width_units = 2.5)

[...]

item = group.add ("rect", x1 = x - a, y1 = y - a,
                  x2 = x + a, y2 = y + a, fill_color = color,
                  outline_color = "black", width_units = 2.5)

[...]

item = group.add ("polygon", points = pts, fill_color = color,
                  outline_color = "black", width_units = 2.5)
</pre></td></tr>
</table>
</p>


<p>
La variable <tt>group</tt> contiene la referencia al objeto
<tt>GnomeCanvasGroup</tt>. Si miramos en el enlace <tt>ui.py</tt>,
veremos que posee un m&eacute;todo <tt>add</tt>. Su primer argumento, <tt>tp</tt>
es una cadena que indica qu&eacute; tipo de elemento hay que a&ntilde;adir. Los siguientes
argumentos son pares de nombres y valores, que se contrastan con un
diccionario. Para obtener una lista de posibles nombres, es necesario
consultar la definici&oacute;n de los objetos <tt>GnomeCanvasRect</tt>,
<tt>GnomeCanvasEllipse</tt> y <tt>GnomeCanvasPolygon</tt> dentro de
<tt>ui.py</tt>.
</p>

<p>Las definiciones de <tt>ellipse</tt> y <tt>rectangle</tt> son bastante
similares, con dos pares de coordenadas que definen los puntos extremos
de su caja (<tt>top-left (superior-izquierdo)</tt> y <tt>bottom-right
(inferior-derecho)</tt>). El origen del canvas est&aacute; colocado por defecto
en su esquina superior-izquierda. El <tt>polygon</tt> espera como valor
la palabra <tt>points</tt>, con una lista de pares de coordenadas que
definen los puntos del pol&iacute;gono. El significado de los restantes
argumentos es bastante f&aacute;cil de entender.
</p>

<p><b>Fijando eventos a las piezas</b></p>

<p>
Ahor conectaremos un evento a cada una de las piezas que creemos.
Esto se hace al final de la funci&oacute;n <tt>buildShape</tt>
<table width="650" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
item.connect (&eacute;vent', shapeEvent)
colorShape.append (item)
</pre></td></tr>
</table>
</p>

<p>
Nos limitamos a usar el m&eacute;todo <tt>connect</tt> del objeto<tt>GtkObject</tt>,
que es el originador del objeto <tt>GnomeCanvasItem</tt>. Su primer
argumento es la se&ntilde;al. Como un objeto <tt>GnomeCanvasItem</tt> tiene una
&uacute;nica se&ntilde;al <tt>event</tt> para cubrir todos los eventos posibles, nos
limitamos a fijarlo a <tt>event</tt>. El segundo argumento es el nombre
del <em>handler</em> que hemos escrito, en este caso <tt>shapeEvent</tt>.
Opcionalmente, se le puede pasar un tercer argumento, pero nosotros no
lo necesitaremos. &iexcl;Y eso es todo!
</p>

<A NAME="lfindex9">&nbsp;</A>
<H3>Los eventos de las piezas</H3>


<p>Y ahora la creaci&oacute;n de los <em>handler</em> para las piezas:
<table width="650" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
def shapeEvent (item, event):
    global selectedItem, itemToSelect, colorShape
    if event.type == ENTER_NOTIFY and selectedItem != item:
        #highligh outline
        item.set(outline_color = 'white')
    elif event.type == LEAVE_NOTIFY and selectedItem != item:
        #unlight outline
        item.set(outline_color = 'black')
    elif event.type == BUTTON_PRESS:
        #select the item
        if not selectedItem:
            item.set (outline_color = 'white')
            selectedItem = item
        elif item['fill_color_gdk'] == selectedItem['fill_color_gdk'] \
             and item != selectedItem:
            #destroy both item
            item.destroy ()
            selectedItem.destroy ()
            colorShape.remove (item)
            colorShape.remove (selectedItem)
            selectedItem, itemToSelect = None, itemToSelect - 1
            if itemToSelect == 0:
                buildGameArea (rootGroup)
    return 1
</pre></td></tr>
</table>
</p>

<p>
Cuando se invoca este <em>handler</em>, la variable <tt>item</tt> debe
contener una referencia a la pieza en la que se ha producido el evento,
y <tt>event</tt> contendr&aacute; el evento. De entre todos los eventos
contemplados en <tt>GdkEvent</tt> s&oacute;lo nos interesan tres tipos:
<ul>
<li><tt>ENTER_NOTIFY</tt>: cuando el puntero del rat&oacute;n entra en una
pieza (sin que est&eacute; seleccionada con anterioridad) destacamos su borde
en blanco
<li><tt>LEAVE_NOTIFY</tt>: cuando el puntero del rat&oacute;n abandona una
pieza (si que est&eacute; seleccionada con anterioridad) apagamos su borde
pint&aacute;ndolo en negro
<li><tt>BUTTON_PRESS</tt>: cuando se presiona alg&uacute;n bot&oacute;n del rat&oacute;n,
con lo que la pieza queda seleccionada, eliminada, o indiferente:
<ol>
<li>Si ninguna pieza est&aacute; seleccionada en este momento, la pieza queda
seleccionada, y una referencia a la misma pasa a estar en la variable
global <tt>selectedItem</tt>
<li>Si hay una pieza seleccionada, chequeamos si sus colores coinciden.
Para hacer eso, obtenemos sus atributos por medio del operador de
sobrecarga [] sobre <tt>item</tt> y <tt>selectedItem</tt>. El atributo
<tt>fill_color_gdk</tt> est&aacute; definido en
<tt>/usr/include/libgnomeui/gnome-canvas-rect-ellipse.h</tt> o un
equivalente.
<br>
Cuando <tt>selectedItem</tt> y el <tt>item</tt> donde se produce el evento
coinciden, eliminamos ambos usando el m&eacute;todo <tt>destroy</tt> de
<tt>GtkObject</tt>. Si no existen m&aacute;s piezas, construimos una nueva
&aacute;rea de juego.
</ol>
</ul>
Por &uacute;ltimo, el <em>handler</em> siempre devuelve TRUE (1). Esto quiere
decir que la se&ntilde;al del evento no ha sido propagada a ning&uacute;n otro elemento.
No necesitamos hacer esto porque nuestras piezas nunca llegan a solaparse.
</p>

<A NAME="lfindex10">&nbsp;</A>
<H3>Unas palabras finales</H3>


<p>
He dejado de lado todo el c&oacute;digo Python que no est&aacute; relacionado con Gnome,
aunque no deber&iacute;a ser dif&iacute;cil entenderlo. Mi principal objetivo en este
simple tutorial es mostrar c&oacute;mo puede uno deducir por s&iacute; mismo c&oacute;mo
funcionan las cosas: mirando en los enlaces para Python de Gnome, o en
las cabeceras C de Gnome, o leyendo la documentaci&oacute;n de Gnome para
programaci&oacute;n en C. Y por supuesto, mostrar c&oacute;mo de sencillos y potentes
son el canvas Gnome y Glade/LibGlade. A partir de ahora, hay muchas
cosas que se pueden hacer con simples extensiones del c&oacute;digo. (Las
fuentes del art&iacute;culo pueden encontrarse
<a href="../../common/src/article160/">aqu&iacute;</a>)
</p>

<A NAME="lfindex11">&nbsp;</A>
<H3>Ap&eacute;ndice: Las fuentes completas</H3>


<table width="650" bgcolor="#f4ee9c" border="0">
<tr><td><pre>
#!/usr/bin/python
# Couleur - Teo Serie
# Copyright Hilaire Fernandes 2000
# Release under the terms of the GPL licence version 2
# You can get a copy of the license at http://www.gnu.org
#
# Select shapes with same color
#
from math import cos, sin, pi
from whrandom import randint
from gtk import *
from gnome.ui import *
from GDK import *
from libglade import *

width, itemToSelect = 400, 8
selectedItem = rootGroup = canvas = None
# to keep trace of the canvas item
colorShape =[];

def on_about_activate(obj):
    "display the about dialog"
    about = GladeXML ("color.glade", "about").get_widget ("about")
    about.show ()

def on_new_activate (obj):
    global rootGroup, colorShape
    for item in colorShape:
        item.destroy ()
    del colorShape[0:]
    buildGameArea (rootGroup)

def shapeEvent (item, event):
    global selectedItem, itemToSelect, colorShape
    if event.type == ENTER_NOTIFY and selectedItem != item:
        #highligh outline
        item.set(outline_color = 'white')
    elif event.type == LEAVE_NOTIFY and selectedItem != item:
        #unlight outline
        item.set(outline_color = 'black')
    elif event.type == BUTTON_PRESS:
        #select the item
        if not selectedItem:
            item.set (outline_color = 'white')
            selectedItem = item
        elif item['fill_color_gdk'] == selectedItem['fill_color_gdk'] \
             and item != selectedItem:
            #destroy both item
            item.destroy ()
            selectedItem.destroy ()
            colorShape.remove (item)
            colorShape.remove (selectedItem)
            selectedItem, itemToSelect = None, itemToSelect - 1
            if itemToSelect == 0:
                buildGameArea (rootGroup)
    return 1

def buildShape (group, number, type, color):
    "build a shape of 'type' and 'color'"
    global colorShape
    w = width / 4
    x, y, r = (number % 4) * w + w / 2, (number / 4) * w + w / 2, w / 2 - 2
    if type == 'circle':
        item = buildCircle (group, x, y, r, color)
    elif type == 'squarre':
        item = buildSquare (group, x, y, r, color)
    elif type == 'star':
        item = buildStar (group, x, y, r, 0.4, randint (3, 15), color)
    elif type == 'star2':
        item = buildStar (group, x, y, r, 0.6, randint (3, 15), color)
    item.connect (&eacute;vent', shapeEvent)
    colorShape.append (item)

def buildCircle (group, x, y, r, color):
    item = group.add ("ellipse", x1 = x - r, y1 = y - r,
                      x2 = x + r, y2 = y + r, fill_color = color,
                      outline_color = "black", width_units = 2.5)
    return item

def buildSquare (group, x, y, a, color):
    item = group.add ("rect", x1 = x - a, y1 = y - a,
                      x2 = x + a, y2 = y + a, fill_color = color,
                      outline_color = "black", width_units = 2.5)
    return item

def buildStar (group, x, y, r, k, n, color):
    "k: factor to get the internal radius"
    "n: number of branch"
    angleCenter = 2 * pi / n
    pts = []
    for i in range (n):
        #external points of the star
        pts.append (x + r * cos (i * angleCenter))
        pts.append (y + r * sin (i * angleCenter))
        #internal points of the star
        pts.append (x + r * k * cos (i * angleCenter + angleCenter / 2))
        pts.append (y + r * k * sin (i * angleCenter + angleCenter / 2))
    pts.append (pts[0])
    pts.append (pts[1])
    item = group.add ("polygon", points = pts, fill_color = color,
                      outline_color = "black", width_units = 2.5)
    return item

def getEmptyCell (l, n):
    "get the n-th non null element of l"
    length, i = len (l), 0
    while i &lt; length:
        if l[i] == 0:
            n = n - 1
        if n &lt; 0:
            return i
        i = i + 1
    return i

def buildGameArea (group):
    global itemToSelect, selectedItem
    itemColor = ['red', 'yellow', 'green', 'brown', 'blue', 'magenta',
                 'darkgreen', 'bisque1']
    itemShape = ['circle', 'squarre', 'star', 'star2']
    emptyCell = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    itemToSelect, i, selectedItem = 8, 15, None
    for color in itemColor:
        # two items of same color
        n = 2
        while n &gt; 0:
            cellRandom = randint (0, i)
            cellNumber = getEmptyCell (emptyCell, cellRandom)
            emptyCell[cellNumber] = 1
            buildShape (group, cellNumber, itemShape[randint (0, 3)], color)
            i, n = i - 1, n - 1

def initColor ():
    global rootGroup, canvas
    wTree = GladeXML ("color.glade",
                      "colorApp")
    dic = {"on_about_activate": on_about_activate,
           "on_exit1_activate": mainquit,
           "on_new_activate":on_new_activate}
    wTree.signal_autoconnect (dic)
    canvas = wTree.get_widget ("canvas")
    rootGroup = canvas.root ()

initColor ()
buildGameArea (rootGroup)
mainloop ()
</pre></td></tr>
</table>



<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=160&lang=es"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="95%">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Hilaire Fernandes, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
<BR><a href="http://cgi.linuxfocus.org/cgi-bin/lfcomment?lang=es&article=article160.html" target="_TOP">Pinchar aqu&iacute; para informar de alg&uacute;n problema o enviar comentarios a LinuxFocus</A><BR></TD>
<TD BGCOLOR="#9999AA"><!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font><TABLE>
<tr><td><font size=2>fr</font></td>
    <td><font size=2>-&gt;</font></td>
    <td><font size=2>--</font></td>
    <td><font size=2><a href="mailto:hfernandes@april.org"><FONT COLOR="#FFFFFF">Hilaire Fernandes</FONT></a></font></td>
</tr>
<tr><td><font size=2>en</font></td>
    <td><font size=2>-&gt;</font></td>
    <td><font size=2>es</font></td>
    <td><font size=2><a href="mailto:javier.pb@linuxfocus.org"><FONT COLOR="#FFFFFF">Javier Palacios</FONT></a></font></td>
</tr>
</TABLE></TD>
</TR></TABLE></CENTER>
<p><font size=1>2001-03-30, generated by lfparser version 2.9</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
