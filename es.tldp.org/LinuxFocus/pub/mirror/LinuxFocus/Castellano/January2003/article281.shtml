<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.34">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf281, SoftwareDevelopment: Programaci&oacute;n concurrente - comunicaci&oacute;n entre procesos</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 .mark  { background-color:#e6e6ff }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Leonardo Giordani
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: Programaci&oacute;n concurrente - comunicaci&oacute;n entre procesos
 =LF=NUMBER: 281
 =LF=ANAME_: article281.html
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top"><A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="2">Hogar</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Mapa</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Indice</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="2">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="190" summary="about the author">
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4 summary="pda download"> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<img src="../../common/images/LeonardoGiordani.jpg" width="85" height="109" alt="[Leonardo]">
<BR>por  Leonardo Giordani <br> <small>&lt;leo.giordani(at)libero.it&gt;</small>
<BR><BR>
<I>Sobre el autor:</I><BR>
<!-- aboutauthor_start -->
<P> Estudiante en la Facultad de Ingenier&iacute;a de Telecomunicaciones en la
Politecnica de Mil&aacute;n, trabaja como administrador de redes y est&aacute;
interesado en la programaci&oacute;n (mayormente en ensamblador y C/C++).
Desde 1999 trabaja casi &uacute;nicamente con Linux/Unix.


<!-- aboutauthor_stop -->
<!-- TRANSLATED TO es -->
<BR><BR><I>Taducido al espa&ntilde;ol por:</I><BR>
Miguel Alfageme S&aacute;nchez <small>&lt;malfageme(at)terra.es&gt;</small>
<br>
<!--
 =LF=TRANSTO=es: Miguel Alfageme S&aacute;nchez
-->
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#281lfindex0">Introducci&oacute;n</A></LI>
  <LI><A HREF="#281lfindex1">SysV keys</A></LI>
  <LI><A HREF="#281lfindex2">Sem&aacute;foros</A></LI>
  <LI><A HREF="#281lfindex3">Lecturas recomendadas</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=281">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>Programaci&oacute;n concurrente - comunicaci&oacute;n entre procesos</H2>
 <img src="../../common/images/illustration272.jpg" width="300" height="180" alt="[run in paralell]">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<!-- articleabstract_start -->

Esta serie de art&iacute;culos tiene el prop&oacute;sito de introducir
al lector al concepto de multitarea y a sus implementaciones en el sistema
operativo Linux. Empezando por los conceptos te&oacute;ricos que componen la
base de la multitarea, terminaremos escribiendo una aplicaci&oacute;n
completa demostrando la comunicaci&oacute;n entre procesos, con un protocolo
de comunicaciones simple pero eficiente
<p>
Los prerrequisitos para la comprensi&oacute;n del art&iacute;culo son:
<ul><li>Un m&iacute;nimo conocimiento de la shell
<li>Un conocimiento b&aacute;sico del lenguaje C (sintaxis, bucles, librer&iacute;as)
</ul>

Se deber&iacute;a leer el primer art&iacute;culo de esta serie porque
se trata de una base para este: <a href="../November2002/article272.shtml">Noviembre 2002, art&iacute;culo 272</a>.


<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- BODY OF THE ARTICLE -->


<A NAME="281lfindex0">&nbsp;</A>
<H3>Introducci&oacute;n</H3>


Aqu&iacute; nos encontramos de nuevo lidiando con la multitarea en Linux. Tal
y como vimos en el art&iacute;culo anterior, dividir la ejecuci&oacute;n de un
programa necesita &uacute;nicamente unas pocas l&iacute;neas de c&oacute;digo,
porque el sistema operativo se encarga de la inicializaci&oacute;n, gesti&oacute;n
y temporizaci&oacute;n de los procesos que creamos.

<p>
Este servicio proporcionado por el sistema operativo es fundamentel,
es la ejecuci&oacute;n de la 'supervisi&oacute;n de los procesos';
as&iacute;, los procesos son ejecutados en un entorno dedicado.
El hecho de perder el control de la ejecuci&oacute;n de los procesos
le conlleva al desarrollador un problema de sincronizaci&oacute;n,
resumido en esta pregunta: &iquest;c&oacute;mo es posible hacer que dos
procesos independientes trabajen juntos?
<p>

El problema es m&aacute;s complejo de lo que parece: no es &uacute;nicamente una
cuesti&oacute;n de sincronizaci&oacute;n de la ejecuci&oacute;n de los procesos,
sino tambi&eacute;n de compartici&oacute;n de datos, tanto en modo lectura como en
escritura.

<p>
Hablemos sobre algunos problemas cl&aacute;sicos de acceso concurrente
de datos; si dos procesos leen el mismo conjunto de datos esto obviamente
no es un problema, y la ejecuci&oacute;n es CONSISTENTE. Ahora si dejamos
a uno de los dos procesos modificar el conjunto de datos: el otro
devolver&aacute; resultados diferentes de acuerdo al momento en el cual lee
el conjunto de datos, antes o despu&eacute;s de la escritura por parte del
primer proceso. Por ejemplo: tenemos dos procesos "A" y "B" y un entero
"d". El proceso A encrementa d en 1, el proceso B lo muestra.
Escribi&eacute;ndolo con un metalenguaje, podemos expresarlo de esta forma

<p class="code">
A { d-&gt;d+1 } &amp; B { d-&gt;salida }
</p>

donde el "&amp;" identifica una ejecuci&oacute;n concurrente. Una primera posible
ejecuci&oacute;n es

<p class="code">
(-) d = 5
(A) d = 6
(B) salida = 6
</p>

Pero si el proceso B es ejecutado primero, obtendremos

<p class="code">
(-) d = 5
(B) salida = 5
(A) d = 6
</p>

Entendemos inmediatamente c&oacute;mo es de importante gestionar correctamente
estas situaciones: el riesgo de INCONSISTENCIA de datos es grande e inaceptable.
Intentemos pensar que los conjuntos de datos representan nuestra cuenta
bancaria y nunca subestimaremos este problema.

<p>
En el art&iacute;culo precedente ya hemos hablado sobre la primera forma
de sincronizaci&oacute;n a trav&eacute;s del uso de la funci&oacute;n
waitpid(2), que permite a un proceso esperar la finalizaci&oacute;n de
otro antes de continuar. De hecho, esto nos permite solucionar algunos
de los conflictos producidos por la lectura y escritura: una vez que el
conjunto de datos en el cual trabajar&aacute; un proceso P1 ha sido
definido, un proceso P2 que trabaja en el mismo conjunto de datos o en
un subconjunto de &eacute;l deber&aacute; esperar por la finalizaci&oacute;
de P1 antes de que pueda proceder con su propia ejecuci&oacute;.

<p>
Claramente este m&eacute;todo representa una primera soluci&oacute;n,
pero est&aacute; muy lejos de la mejor, porque P2 tiene que permanecer
inactivo durante un tiempo que puede ser muy largo, esperando que P1
termine su ejecuci&oacute;n, incluso si no va a haber ya m&aacute;s
procesamiento con los datos comunes. As&iacute;, debemos incrementar
la granularidad de nuestro control, i.e. regular el aceso a los datos
individuales o al conjunto. La soluci&oacute;n a este problema viene
dada por un conjunto de primitivas de la librer&iacute;a est&aacute;ndar
conocida como SysV IPC (System V InterProcess Communication).

<A NAME="281lfindex1">&nbsp;</A>
<H3>SysV keys</H3>


Antes de encarar los argumentos estrictamente relacionados con la
teor&iacute;a de la concurrencia y su implementaci&oacute;n
introduciremos una estructura SysV t&iacute;pica: las claves IPCS.
Una clave IPC es un n&uacute;mero utilizado para identificar
un&iacute;vocamente una estructura de control IPC (descrita m&aacute;s
adelante), pero tambi&eacute;n puede ser utilizada para generar
identificadores gen&eacute;ricos, p.e. para organizar estructuras no
IPC. Una clave se puede crear con la funci&oacute;n ftok(3)

<p class="code">
key_t ftok(const char *pathname, int proj_id);
</p>

que utiliza el nombre de un fichero existente (pathname) y un entero.
No se puede asegurar que la clave sea &uacute;nica, porque los
par&aacute;metros tomados del fichero (n&uacute;mero de i-nodo y
n&uacute;mero de dispositivo) pueden dar lugar a combinaciones
id&eacute;nticas. Una buena soluci&oacute;n consiste en crear una
peque&ntilde;a librer&iacute;a que revise las claves asignadas y evite
los duplicados.

<A NAME="281lfindex2">&nbsp;</A>
<H3>Sem&aacute;foros</H3>


La idea de un sem&aacute;foro para el contro del tr&aacute;fico de coches
se puede emplear sin grandes modificaciones para el control de acceso a
datos. Un sem&aacute;foro es una estructura particular que contiene un
valor mayor o igual a cera y que maneja una cola de procesos esperando por
unas condiciones particulares en el propio sem&aacute;foro. Aunque parezcan
sencillos, los sem&aacute;foros son muy potentes, lo que incrementa
consecuentemente las complicaciones. Empecemos (como siempre) dejando fuera
el control de errores: lo meteremos en nuestro c&oacute;digo cuando encaremos
un programa m&aacute;s complejo.

<p>
Los sem&aacute;foros pueden utilizarse para controlar el acceso a recursos:
el valor del sem&aacute;foro representa el n&uacute;mero de procesos que
pueden acceder al recurso; cada vez que un proceso accede al recurso el valor
del sem&aacute;foro debe ser decrementado e incrementado de nuevo cuando el
recurso sea liberado. Si el recurso es exclusivo (p.e. s&oacute;lo un proceso
puede acceder) el valor inicial del sem&aacute;foro ser&aacute; 1.

<p>
Con un sem&aacute;foro se puede realizar una tarea diferente, el contador de
recursos: el valor que tiene representa, en este caso, el n&uacute;mero de
recursos disponibles (por ejemplo el n&uacute;mero de celdas de memoria
disponibles).

<p>
Consideremos un caso pr&aacute;ctico, en el que el se utilizar&aacute; el
tipo del sem&aacute;foro: imaginemos que tenemos un buffer en el cual varios
procesos S1,...,Sn pueden escribir pero del cual &uacute;nicamente un proceso
L puede leer; adem&aacute;s, las operaciones no se pueden realizar al mismo
tiempo (i.e. en un momento dado s&oacute;lo un proceso est&aacute; operando
con el buffer). Obviamente los procesos S pueden escribir siempre excepto
cuando el buffer est&aacute; lleno, mientras que el proceso L puede leer
s&oacute;lo si el buffer no est&aacute; vac&iacute;o. As&iacute;, necesitamos
tres sem&aacute;foros: el primero gestionar&aacute; el acceso al recurso, el
segundo y el tercero seguir&aacute; la pista de cu&aacute;ntos elementos hay
en el buffer (veremos m&aacute;s adelante por qu&eacute; dos sem&aacute;foros
no son suficientes).

<p>
Considerando que el acceso al buffer es exclusivo el primer
sem&aacute;foro ser&aacute; uno binario (su valor ser&aacute; 0 o 1),
mientras que el segundo y el tercero reflejar&aacute; valores
relacionados a la dimensi&oacute;n del buffer.

<p>
Aprendamos c&oacute;mo se implementan los sem&aacute;foros en C
utilizando las primitivas SysV. La funci&oacute;n que crea un
sem&aacute;foro es semget(2)

<p class="code">
int semget(key_t key, int nsems, int semflg);
</p>

donde key es la clave IPC, nsems es el n&uacute;mero de sem&aacute;foros
que queremos crear y semflg es el control de acceso implemenado con 12
bits, los 3 primeros relacionados con las pol&iacute;ticas de
creaci&oacute;n y los otros 9 con los accesos de lectura y escritura del
usuario, grupo y otros (n&oacute;tese la similitud con el sistema de
ficheros Unix); para una descripci&oacute;n completa l&eacute;ase la
p&aacute;gina del manual ipc(5). Tal y como notamos SysV gestiona conjuntos
de sem&aacute;foros en vez de sem&aacute;foros &uacute;nicos, resultando un
c&oacute;digo m&aacute;s compacto.

<p>
Creemos nuestro primer sem&aacute;foro

<pre class="code">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;linux/types.h&gt;
#include &lt;linux/ipc.h&gt;
#include &lt;linux/sem.h&gt;

int main(void)
{
key_t key;
int semid;

key = ftok("/etc/fstab", getpid());

/* creamos un conjunto de semaforos con un solo semaforo: */
semid = semget(key, 1, 0666 | IPC_CREAT);

return 0;
}
</pre>

Avanzando un poco m&aacute;s, tenemos que aprender c&oacute;mo gestionar
y eliminar sem&aacute;foros; la gesti&oacute;n del sem&aacute;foro se
realiza mediante la primitiva semctl(2)

<p class="code">
int semctl(int semid, int semnum, int cmd, ...)
</p>

que realiza la operaci&oacute;n identificada por cmd en el conjunto semid y
(si la acci&oacute;n lo requiere) en el sem&aacute;foro semnum. Introduciremos
algunas opciones cuando las necesitemos, pero en la p&aacute;gina del man se
puede encontrar una lista completa. Dependiendo de la acci&oacute;n cmd puede
ser necesario especificar otro argumento para la funci&oacute;n, cuyo tipo es

<pre class="code">
union semun {
int val;                  /* valor para SETVAL */
struct semid_ds *buf;     /* buffer para IPC_STAT, IPC_SET */
unsigned short *array;    /* array para GETALL, SETALL */
/* parte especifica Linux: */
struct seminfo *__buf;    /* buffer para IPC_INFO */
};
</pre>

Para establecer el valor del sem&aacute;foro se debe utilizar la directiva
SETVAL y el valor se tiene que especificar en la union semun; modifiquemos
el programa anterior estableciendo el valor del sem&aacute;foro a 1

<pre class="code">
[...]

/* creamos un conjunto de semaforos con un solo semaforo: */
semid = semget(key, 1, 0666 | IPC_CREAT);

/* establecemos el valor del semaforo de 0 a 1 */
arg.val = 1;
semctl(semid, 0, SETVAL, arg);

[...]
</pre>

Entonces tenemos que liberar el sem&aacute;foro liberando las estructuras
utilizadas para su gesti&oacute;n; esta tarea se realiza con la directiva
IPC_RMID de semctl. Esta directiva elimina el sem&aacute;foro y
env&iacute;a un mensaje a todos los procesos esperando para conseguir el
acceso al recurso. Una &uacute;ltima modificaci&oacute;n al programa es

<pre class="code">
[...]

/* establecemos el valor del semaforo de 0 a 1 */
arg.val = 1;
semctl(semid, 0, SETVAL, arg);

/* liberamos el semaforo */
semctl(semid, 0, IPC_RMID);

[...]
</pre>

Tal y como hemos visto antes, cear y gestionar una estructura para
controlar una ejecuci&oacute;n concurrente no es dif&iacute;l; cuando
introduzcamos gesti&oacute;n de errores las cosas se volver&aacute;n
m&aacute;s complicadas, pero s&oacute;lo desde el punto de vista de
la complejidad del c&oacute;digo.
<p>
El sem&aacute;foro se puede utilizar a trav&eacute;s de la funci&oacute;n
semop(2)

<p class="code">
int semop(int semid, struct sembuf *sops, unsigned nsops);
</p>

donde semid es el identificador del conjunto, sops un array que
contiene las operaciones a realizar y nsops el n&uacute;mero de
estas operaciones. Cada operaci&oacute;n est&aacute; representada
por una estructura sembuf.

<p class="code">
unsigned short sem_num;
short sem_op;
short sem_flg;
</p>

i.e. por el n&uacute;mero de sem&aacute;foro en el conjunto (sem_num),
la operaci&oacute;n (sem_op) y un flag estableciendo la pol&iacute;tica
de espera; por ahora dejemos sem_flg a 0. Las operaciones que podemos
especificar son n&uacute;meros enteros y siguen estas reglas:

<ol>
<li> sem_op &lt; 0<br>
Si el valor absoluto del sem&aacute;foro es mayor o igual que el de sem_op
la operaci&oacute;n contin&uacute;a y se a&ntilde;ade sem_op al valor del
sem&aacute;foro (realmente se resta, n&uacute;mero negativo). Si el valor
absoluto de sem_op es menor que el valor del sem&aacute;foro el proceso
se duerme hasta que est&eacute; disponible tal n&uacute;mero de recursos.

<li> sem_op = 0<br>
El proceso se duerme hasta que el valor del sem&aacute;foro alcance 0.

<li> sem_op &gt; 0<br>
El valor de sem_op se a&ntilde;ade al valor del sem&aacute;foro, liberando
los recursos obtenidos previamente.
</ol>

El siguiente programa intenta mostrar c&oacute;mo utilizar sem&aacute;foros
implementando el ejemplo del buffer anterior: crearemos 5 procesos
denominados W (escritores) y un proceso R (lector). Cada proceso W intenta
obtener el control del recurso (el buffer) bloque&aacute;ndolo a trav&eacute;s
de un sem&aacute;foro y, si el buffer no est&aacute; vac&iacute;o, inserta
un elemento en &eacute;l y libera el recurso. El proceso R intenta bloquear
el recurso, toma un elemento del buffer si no est&aacute; vac&iacute;o y
desbloquea el recurso.
<p>

La lectura y escritura del buffer es s&oacute;lo virtual: esto sucede
porque, tal y como se vi&oacute; en el art&iacute;culo anterior, cada
proceso tiene su propio espacio de memoria y no puede acceder al de
otro proceso. Esto hace imposible la correcta gesti&oacute;n del buffer
con 5 procesos, porque cada uno ver&aacute; su propia copia del buffer.
Esto cambiar&aacute; cuando hablemos sobre la memoria compartida, pero
mejor aprendamos las cosas paso a paso.

<p>
&iquest;Por qu&eacute; necesitamos 3 sem&aacute;foros? El primero (n&uacute;mero
0) act&uacute;a como un bloqueo de acceso al buffer, y tiene un valor
m&aacute;ximo de 1, mientras que los otros dos gestionan las condiciones
de desbordamiento, tanto por arriba como por abajo. Un &uacute;nico
sem&aacute;foro no puede gestionar ambas situaciones, debido a que
semop act&uacute;a en un &uacute;nico sentido.
<p>

Aclaremos un poco esto: con un sem&aacute;foro (llamado O), cuyo valor
representa el n&uacute;mero de espacios vac&iacute;os en el buffer.
Cada vez que un proceso W inserta algo en el buffer, decrementa el valor
del sam&aacute;foro en una unidad, hasta que el valor llegue a 0, i.e.
el buffer est&eacute; lleno. Este sem&aacute;foro no puede gestionar la
condici&oacute;n de desbordamiento por abajo: el proceso R, de hecho,
puede incrementar su valor sin l&iacute;mites. Necesitamos, por tanto,
un sem&aacute;foro especial (llamado U), cuyo valor represente el
n&uacute;mero de elementos en el buffer. Cada vez que un proceso W inserte
un elemento en el buffer tambi&eacute;n incrementar&aacute; el valor del
sem&aacute;foro U y decrementar&aacute; el del sem&aacute;foro O. Por
el contrario, el proceso R decrementar&aacute; el valor del
sem&aacute;foro U e incrementar&aacute; el del sem&aacute;foro O.
<p>

As&iacute;, la condici&oacute;n de desbordamiento por arriba estar&aacute;
identificada por la imposibilidad de decrementar el sem&aacute;foro O, y
la condici&oacute;n de desbordamiento por abajo por la imposibilidad de
decrementar el sem&aacute;foro U.

<pre class="code">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;errno.h&gt;
#include &lt;linux/types.h&gt;
#include &lt;linux/ipc.h&gt;
#include &lt;linux/sem.h&gt;

int main(int argc, char *argv[])
{
/* IPC */
pid_t pid;
key_t key;
int semid;
union semun arg;
struct sembuf lock_res = {0, -1, 0};
struct sembuf rel_res = {0, 1, 0};
struct sembuf push[2] = {1, -1, IPC_NOWAIT, 2, 1, IPC_NOWAIT};
struct sembuf pop[2] = {1, 1, IPC_NOWAIT, 2, -1, IPC_NOWAIT};

/* Other */
int i;

if(argc &lt; 2){
printf("Usage: bufdemo [dimensione]\n");
exit(0);
}

/* Semaphores */
key = ftok("/etc/fstab", getpid());

/* Create a semaphore set with 3 semaphore */
semid = semget(key, 3, 0666 | IPC_CREAT);

/* Initialize semaphore #0 to 1 - Resource controller */
arg.val = 1;
semctl(semid, 0, SETVAL, arg);

/* Initialize semaphore #1 to buf_length - Overflow controller */
/* Sem value is 'free space in buffer' */
arg.val = atol(argv[1]);
semctl(semid, 1, SETVAL, arg);

/* Initialize semaphore #2 to buf_length - Underflow controller */
/* Sem value is &eacute;lements in buffer' */
arg.val = 0;
semctl(semid, 2, SETVAL, arg);

/* Fork */
for (i = 0; i &lt; 5; i++){
pid = fork();
if (!pid){
for (i = 0; i &lt; 20; i++){
sleep(rand()%6);
/* Try to lock resource - sem #0 */
if (semop(semid, &amp;lock_res, 1) == -1){
perror("semop:lock_res");
}
/* Lock a free space - sem #1 / Put an element - sem #2*/
if (semop(semid, &amp;push, 2) != -1){
printf("---&gt; Process:%d\n", getpid());
}
else{
printf("---&gt; Process:%d  BUFFER FULL\n", getpid());
}
/* Release resource */
semop(semid, &amp;rel_res, 1);
}
exit(0);
}
}

for (i = 0;i &lt; 100; i++){
sleep(rand()%3);
/* Try to lock resource - sem #0 */
if (semop(semid, &amp;lock_res, 1) == -1){
perror("semop:lock_res");
}
/* Unlock a free space - sem #1 / Get an element - sem #2 */
if (semop(semid, &amp;pop, 2) != -1){
printf("&lt;--- Process:%d\n", getpid());
}
else printf("&lt;--- Process:%d  BUFFER EMPTY\n", getpid());
/* Release resource */
semop(semid, &amp;rel_res, 1);
}

/* Destroy semaphores */
semctl(semid, 0, IPC_RMID);

return 0;
}
</pre>

Comentemos las partes m&aacute;s interesantes del c&oacute;digo:

<pre class="code">
struct sembuf lock_res = {0, -1, 0};
struct sembuf rel_res = {0, 1, 0};
struct sembuf push[2] = {1, -1, IPC_NOWAIT, 2, 1, IPC_NOWAIT};
struct sembuf pop[2] = {1, 1, IPC_NOWAIT, 2, -1, IPC_NOWAIT};
</pre>

Estas 4 l&iacute;neas son las acciones que podemos realizar en nuestro
conjunto de sem&aacute;foros: las dos primeras son acciones individuales,
mientras que las otras son dobles. La primera acci&oacute;n, lock_res,
intenta bloquear el recurso: decrementa el valor del primer
sem&aacute;foro (n&uacute;mero 0) en una unidad (si el valor no es cero)
y la pol&iacute;tica adoptada si el recurso est&aacute; ocupado es
ninguna (i.e. el proceso espera). La acci&oacute;n rel_res es
id&eacute;ntica a lock_res, pero el recurso se libera (el valor es
positivo).

<p>
Las acciones push y pop son un poco especiales. Son arrays de dos acciones,
la primera sobre el sem&aacute;foro n&uacute;mero 1 y la segunda sobre el
sem&aacute;foro n&uacute;mero 2; mientras que el primero se incrementa el
segundo se decrementa y viceversa, pero la pol&iacute;tica ya no es de
espera: IPC_NOWAIT fuerza al proceso a continuar la ejecuci&oacute;n si
el recurso est&aacute; ocupado.

<pre class="code">
/* Initialize semaphore #0 to 1 - Resource controller */
arg.val = 1;
semctl(semid, 0, SETVAL, arg);

/* Initialize semaphore #1 to buf_length - Overflow controller */
/* Sem value is 'free space in buffer' */
arg.val = atol(argv[1]);
semctl(semid, 1, SETVAL, arg);

/* Initialize semaphore #2 to buf_length - Underflow controller */
/* Sem value is &eacute;lements in buffer' */
arg.val = 0;
semctl(semid, 2, SETVAL, arg);
</pre>

Aqu&iacute; inicializamos el valor de los sem&aacute;foros: el primero
a 1 porque controla el acceso en exclusiva a un recurso, el segundo a la
longitud del buffer (dado en la l&iacute;nea de comando) y el tercero a 0,
tal y como comentamos antes acerca del desbordamiento por arriba y por
abajo.

<pre class="code">
/* Try to lock resource - sem #0 */
if (semop(semid, &amp;lock_res, 1) == -1){
perror("semop:lock_res");
}
/* Lock a free space - sem #1 / Put an element - sem #2*/
if (semop(semid, &amp;push, 2) != -1){
printf("---&gt; Process:%d\n", getpid());
}
else{
printf("---&gt; Process:%d  BUFFER FULL\n", getpid());
}
/* Release resource */
semop(semid, &amp;rel_res, 1);
</pre>

El proceso W intenta bloquear el recurso a trav&eacute;s de la
acci&oacute;n lock_res; una vez hecho esto, realiza un push y lo
avisa por la salida est&aacute;ndar: si la operaci&oacute;n no se
puede realizar avisa de que el buffer est&aacute; lleno. Despu&eacute;s
de esto libera el recurso.
<pre class="code">
/* Try to lock resource - sem #0 */
if (semop(semid, &amp;lock_res, 1) == -1){
perror("semop:lock_res");
}
/* Unlock a free space - sem #1 / Get an element - sem #2 */
if (semop(semid, &amp;pop, 2) != -1){
printf("&lt;--- Process:%d\n", getpid());
}
else printf("&lt;--- Process:%d  BUFFER EMPTY\n", getpid());
/* Release resource */
semop(semid, &amp;rel_res, 1);
</pre>

El proceso R act&uacute;a m&aacute;s o menos como el proceso W: bloquea
el recurso, realiza un pop y libera el recurso.

<p>
En el siguiente art&iacute;culo hablaremos acerca de las colas de mensajes,
otra estructura para la comunicaci&oacute;n entre procesos (InterProcess
Communication) y sincronizaci&oacute;n. Como siempre, si escribe algo
sencillo utilizando lo que ha aprendido de aqu&iacute; env&iacute;emelo
junto con su nombre y su direcci&oacute;n de e-mail. Estar&eacute; encantado
de leerlo. &iexcl;Buen trabajo!


<A NAME="281lfindex3">&nbsp;</A>
<H3>Lecturas recomendadas</H3>


<ul>
<li>Silberschatz, Galvin, Gagne, <b>Operating System Concepts -
Sixth Edition</b>, Wiley&amp;Sons, 2001
<li>Tanenbaum, WoodHull, <b>Operating Systems: Design and Implementation
- Second Edition</b>, Prentice Hall, 2000
<li>Stallings, <b>Operating Systems - Fourth Edition</b>, Prentice Hall, 2002
<li>Bovet, Cesati, <b>Understanding the Linux Kernel</b>, O'Reilly, 2000
<li>The Linux Programmer's Guide: <a href="http://www.tldp.org/LDP/lpg/index.html">http://www.tldp.org/LDP/lpg/index.html</a>
<li>Linux Kernel 2.4 Internals <a href="http://www.tldp.org/LDP/lki/lki-5.html">http://www.tldp.org/LDP/lki/lki-5.html</a>
</ul>



<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1" summary="tb-button-outerpart">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1" summary="tb-button">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=281"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Leonardo Giordani, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#9999AA">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE summary="translators">
  <tr><td><font size="2">it --&gt; -- : Leonardo Giordani <small>&lt;leo.giordani(at)libero.it&gt;</small></font></td></tr>
  <tr><td><font size="2">it --&gt; en: Leonardo Giordani &lt;leo.giordani(at)libero.it&gt;</font></td></tr>
  <tr><td><font size="2">en --&gt; es: Miguel Alfageme S&aacute;nchez &lt;malfageme(at)terra.es&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2003-04-25, generated by lfparser version 2.34</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
