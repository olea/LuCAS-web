<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.34">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf272, SoftwareDevelopment: Programaci&oacute;n concurrente - Principios e introducci&oacute;n a procesos</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 .mark  { background-color:#e6e6ff }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Leonardo Giordani
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: Programaci&oacute;n concurrente - Principios e introducci&oacute;n a procesos
 =LF=NUMBER: 272
 =LF=ANAME_: article272.html
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top"><A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="2">Hogar</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Mapa</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Indice</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="2">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="190" summary="about the author">
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4 summary="pda download"> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<img src="../../common/images/LeonardoGiordani.jpg" width="85" height="109" alt="[Leonardo]">
<BR>por  Leonardo Giordani <br> <small>&lt;leo.giordani(at)libero.it&gt;</small>
<BR><BR>
<I>Sobre el autor:</I><BR>
<!-- aboutauthor_start -->
<P> Estudiante de la Facultad de Ingenier&iacute;as Polit&eacute;cnicas
en Telecomunicaciones de Mil&aacute;n, trabaja como administrador de
red y le interesa la programaci&oacute;n (mayormente en ensamblador y
C/C++).
Desde 1999 trabaja solamente casi con Linux/Unix.


<!-- aboutauthor_stop -->
<!-- TRANSLATED TO es -->
<BR><BR><I>Taducido al espa&ntilde;ol por:</I><BR>
Carlos Mayo (<a href="http://www.carlosmayo.net"><font size="1">homepage</font></a>)
<br>
<!--
 =LF=TRANSTO=es: Carlos Mayo
-->
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#272lfindex0">Introducci&oacute;n</A></LI>
  <LI><A HREF="#272lfindex1">El concepto de proceso</A></LI>
  <LI><A HREF="#272lfindex2">Procesos en Linux y Unix</A></LI>
  <LI><A HREF="#272lfindex3">Multitarea en la libc</A></LI>
  <LI><A HREF="#272lfindex4">Lecturas recomendadas</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=272">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>Programaci&oacute;n concurrente - Principios e introducci&oacute;n a procesos</H2>
 <img src="../../common/images/illustration272.jpg" width="300" height="180" alt="[run in paralell]">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<!-- articleabstract_start -->

Esta serie de art&iacute;culos tiene el prop&oacute;sito de introducir
al lector el concepto de multitarea y a su implementaci&oacute;n en el sistema
operativo Linux. Comenzando por unos conceptos te&oacute;ricos de la
base de la multitarea, acabaremos escribiendo una aplicaci&oacute;n completa
demostrando la comunicaci&oacute;n entre procesos, mediante un protocolo
de comunicaciones simple pero eficiente.

Los pre-requisitos para entender el art&iacute;culo son:
<ul><li>M&iacute;nimo conocimiento del shell
<li>Conocimientos b&aacute;sicos del lenguaje C (sintaxis, bucles, librer&iacute;as)
</ul>

Todas las referencias a las p&aacute;ginas del manual est&aacute;n puestas entre
par&eacute;ntesis despu&eacute;s del nombre del comando. Todas las funciones de glibc
est&aacute;n documentadas en las p&aacute;ginas info gnu (info Libc, o escribe info:/libc/Top en konqueror).


<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- BODY OF THE ARTICLE -->


<A NAME="272lfindex0">&nbsp;</A>
<H3>Introducci&oacute;n</H3>


Uno de los momentos mas importantes de la historia de los sistemas
operativos fue el concepto de la multiprogramaci&oacute;n, una t&eacute;cnica
para entrelazar la ejecuci&oacute;n de varios programas y conseguir
un uso constante de los recursos del sistema. Pensemos en una estaci&oacute;n
de trabajo, donde un usuario puede ejecutar al mismo tiempo un procesador
de textos, un reproductor de sonido, una cola de impresi&oacute;n, un navegador
web, y algunos mas. Es un concepto importante en los sistemas operativos modernos.
Como descubriremos, esta peque&ntilde;a lista es solamente una m&iacute;nima
parte de todo el conjunto de programas que se est&aacute;n ejecutando actualmente
en nuestra m&aacute;quina.

<A NAME="272lfindex1">&nbsp;</A>
<H3>El concepto de proceso</H3>


<p>
Para entrelazar programas es necesaria una notable complicaci&oacute;n del
sistema operativo; para evitar conflictos entre los programas que se est&aacute;n
ejecutando, una opci&oacute;n inevitable es encapsular cada uno de ellos con
toda la informaci&oacute;n necesaria para su ejecuci&oacute;n.

<p>
Antes de explorar qu&eacute; ocurre en nuestra m&aacute;quina Linux, un poco
de vocabulario t&eacute;cnico: dado un <b>PROGRAMA</b> en ejecuci&oacute;n,
en un momento determinado, el <b>CODIGO</b> es el conjunto de instrucciones
que lo constituyen, el <b>ESPACIO DE MEMORIA</b> es la cantidad de memoria de
la m&aacute;quina ocupada por sus datos y el <b>ESTADO DEL PROCESADOR</b> es el
valor de los par&aacute;metros del microprocesador, como los flags o el Contador de Programa
(direcci&oacute;n de la siguiente instrucci&oacute;n a ejecutar).

<p>
Definimos el t&eacute;rmino <b>PROGRAMA EN EJECUCION</b> como un n&uacute;mero de
objetos constituidos de CODIGO, ESPACIO DE MEMORIA y ESTADO DEL PROCESADOR.
Si en un momento dado del funcionamiento de la m&aacute;quina, grabamos esta informaci&oacute;n
y la reemplazamos por el mismo conjunto de informaci&oacute;n obtenidos de otro programa en
ejecuci&oacute;n, el flujo de este &uacute;ltimo continuar&aacute; desde el punto en el que
se par&oacute;: haciendo esto una y otra vez con el primer y segundo programa, conseguiremos
el entrelazamiento descrito anteriormente. El t&eacute;rmino <b>PROCESO</b> (o <b>TAREA</b>)
se usa para describir a dicho programa en ejecuci&oacute;n.

<p>
Expliquemos qu&eacute; ocurr&iacute;a en la estaci&oacute;n de trabajo de la que hablamos en la
introducci&oacute;n: en cada momento solamente una tarea est&aacute; en ejecuci&oacute;n (s&oacute;lo hay un
microprocesador y no puede hacer dos cosas a la vez), y la m&aacute;quina ejecuta parte
de su c&oacute;digo; despu&eacute;s de una cierta cantidad de tiempo llamada QUANTUM, el proceso
en ejecuci&oacute;n se suspende, su informaci&oacute;n se guarda y se reemplaza por alg&uacute;n otro proceso en
espera, cuyo c&oacute;digo ser&aacute; ejecutado por un quantum de tiempo, y as&iacute; sucesivamente. Esto
esto lo que llamamos multitarea.

<p>
Como indiqu&eacute; anteriormente, la introducci&oacute;n de multitarea origina una serie de problemas,
la mayor&iacute;a de los cuales no son triviales, como el mantenimiento de la cola de procesos
en espera (PLANIFICACION); sin embargo se debe tener en cuenta la arquitectura de cada
sistema operativo: quiz&aacute;s sea el tema principal de otro art&iacute;culo, introduciendo quiz&aacute; algunas
partes del c&oacute;digo del n&uacute;cleo de Linux.

<A NAME="272lfindex2">&nbsp;</A>
<H3>Procesos en Linux y Unix</H3>


<p>
Descubramos algo sobre los procesos que se ejecutan en nuestra m&aacute;quina.
El comando que nos da tal informaci&oacute;n es <b>ps(1)</b> que son las siglas
de "estado de proceso". Abriendo un shell normal de texto y tecleando el comando
ps obtendremos una salida como esta

<pre>
  PID TTY          TIME CMD
 2241 ttyp4    00:00:00 bash
 2346 ttyp4    00:00:00 ps
</pre>

<p>
S&eacute; que esta lista no esta completa, pero concentr&eacute;mosno en &eacute;sta por el momento:
ps nos ha devuelto una lista de cada proceso en ejecuci&oacute;n en el terminal actual.
Reconocemos en la &uacute;ltima columna el nombre por el cual el proceso se ha ejecutado
(como "mozilla" para el Navegador Web Mozilla y "gcc" para el Compilador C GNU).
Evidentemente, "ps" aparece en la lista porque se estaba ejecutando cuando la lista
de procesos en ejecuci&oacute;n se imprimi&oacute;. El otro proceso listado es el Bourne Again
Shell, el shell que se ejecuta en mi terminal.

<p>
Dejemos (por el momento) la informaci&oacute;n acerca TIME y TTY y veamos PID, el IDentificador
de Proceso. El pid es un n&uacute;mero positivo (no cero) &uacute;nico que se le asigna
a cada proceso en ejecuci&oacute;n; una vez que el proceso ha terminado el pid puede
ser reutilizado, pero tenemos asegurado que durante la ejecuci&oacute;n de un
proceso su pid ser&aacute; el mismo. Todo esto  implica que la salida de cada uno de vosotros
del comando ps sea diferente a la del ejemplo de arriba. Para comprobar que esto diciendo
la verdad, abramos otra shell sin cerrar la primera y escribe el comado ps: esta vez
la salida da la misma lista de procesos pero con diferentes n&uacute;meros pid, demostrado
que son dos procesos diferentes incluso si el programa es el mismo.

<p>
Podemos obtener tambi&eacute;n una lista de todos los procesos en ejecuci&oacute;n de nuestro
Linux: la p&aacute;gina del manual del comando ps dice que la opcion -e significa "seleccionar
todos los procesos". Escribamos "ps -e" en una terminal y ps imprimir&aacute; una
larga lista como la vista arriba. Para analizar mas c&oacute;modamente esta
lista, podemos redirigir la salida de ps en el fichero ps.log:

<pre>
ps -e &gt; ps.log
</pre>

<p>
Ahora podemos leer este fichero edit&aacute;ndolo con nuestro editor
preferido (o simplemente con el comando less); como se dijo al comienzo
de este art&iacute;culo el n&uacute;mero de procesos en ejecuci&oacute;n es mayor del
que podemos esperar. Observamos que la lista no contiene solamente
los procesos comenzados por nosotros (a trav&eacute;s de la linea de comandos
o nuestro entorno gr&aacute;fico) sino tambi&eacute;n un conjunto de procesos, alguno
de los cuales con nombres extra&ntilde;os: el n&uacute;mero y la identidad de los
procesos listados dependen de la configuraci&oacute;n de vuestro sistema, pero
hay algunas cosas comunes.
Primeramente, no importa que tipo de configuraci&oacute;n tienes en el sistema,
el proceso cuyo pid es igual a 1 es siempre "init", el padre de todos los procesos;
posee el pid n&uacute;mero 1 porque es siempre el primer proceso ejecutado
por el sistema operativo.
Otra cosa que podemos ver es la presencia de muchos procesos, cuyos nombres
terminan con una "d": se llaman tambi&eacute;n "demonios" y son algunos de los procesos
mas importantes del sistema. Estudiaremos con mas detalles init y los demonios
en pr&oacute;ximos art&iacute;culos.

<A NAME="272lfindex3">&nbsp;</A>
<H3>Multitarea en la libc</H3>


<p>
Ya conocemos el concepto de proceso y cuanto de importante es para
nuestro sistema operativo: continuaremos y comenzaremos a escribir
c&oacute;digo multitarea; desde la trivial ejecuci&oacute;n simult&aacute;nea de procesos
nos trasladaremos a un nuevo problema: la comunicaci&oacute;n entre
procesos concurrentes y su sincronizaci&oacute;n; descubriremos dos soluciones
elegantes a este problema, mensajes y sem&aacute;foros, pero este &uacute;ltimo se abordar&aacute;
con mas profundidad un pr&oacute;ximo art&iacute;culo sobre hilos. Despu&eacute;s de los mensajes
va siendo hora de empezar a escribir nuestra aplicaci&oacute;n basada en todos
estos conceptos.

<p>
La librer&iacute;a est&aacute;ndar de C (libc, implementada en Linux con la glibc) usa
las facilidades de la multitarea de Unix System V; el Unix System V (desde
ahora SysV) es una implementaci&oacute;n comercial de Unix, es el fundador
de una de las dos familias mas importantes de Unix, la otra es Unix
BSD.

<p>
En la libc el tipo pid_t est&aacute; definido como un entero capaz de contener
un pid. Desde ahora lo usaremos para almacenar el valor de un pid, pero
solo por claridad: usar un entero es lo mismo.

<p>
Descubramos que funci&oacute;n nos dice cual es el pid del proceso que contiene
nuestro programa

<pre>
pid_t getpid (void)
</pre>

<p>
(la cual est&aacute; definida con pid_t en unistd.h y sus/types.h) y escriba un programa
cuyo objetivo sea imprimir por la salida est&aacute;ndar su pid. Con cualquier editor
escriba el siguiente c&oacute;digo

<pre>
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;

int main()
{
  pid_t pid;

  pid = getpid();
  printf("The pid assigned to the process is %d\n", pid);

  return 0;
}
</pre>

Guarde el programa como print_pid.c y comp&iacute;lalo

<pre>
gcc -Wall -o print_pid print_pid.c
</pre>

esto crear&aacute; un ejecutable llamado print_pid. Te recuerdo que si
el directorio actual no esta en el path es necesario ejecutar el programa
como "./print_pid". Al ejecutar el programa no nos llevaremos grandes
sorpresas: imprime un n&uacute;mero positivo y, si se ejecuta mas veces, se
puede ver que ese n&uacute;mero se incrementa uno a uno; esto no es obligatorio,
ya que se puede crear otro proceso entre una ejecuci&oacute;n de print_pid y la
siguiente. Intenta, por ejemplo, ejecutar ps entre dos ejecuciones de print_pd...

<p>
Ya es hora de aprender a crear procesos, pero debo a&ntilde;adir algunas palabras
sobre que ocurre realmente durante esta acci&oacute;n. Cuando un programa (contenido
en el proceso A) crea otro proceso (B) los dos son id&eacute;nticos, tienen el mismo
c&oacute;digo, la memoria llena de los mismos datos (no la misma memoria) y el mismo
estado del procesador. A partir de este punto los dos se ejecutar&aacute;n de manera
diferente, por ejemplo dependiendo de la entrada del usuario o alg&uacute;n dato
aleatorio. El proceso A es el "proceso padre" mientras que el B es el "proceso hijo";
ahora es mas f&aacute;cil de entender el concepto "padre de todos los procesos" dado
a init. La funci&oacute;n que crea un nuevo proceso es

<pre>
pid_t fork(void)
</pre>

y su nombre viene de la propiedad de bifurcar la ejecuci&oacute;n de procesos. El
n&uacute;mero devuelto es un pid, pero merece una atenci&oacute;n particular. Dijimos que
el actual proceso se duplica en un padre y un hijo, que se ejecutar&aacute;n
entrelaz&aacute;ndose con los otros procesos en ejecuci&oacute;n, haciendo diferentes
trabajos; pero inmedi&aacute;tamente despu&eacute;s de la duplicaci&oacute;n, &iquest;que proceso ser&aacute; ejecutado,
el padre o el hijo? Bueno, la respuesta es simple: uno de los dos. La decisi&oacute;n
de que proceso debe ser ejecutado la toma una parte del sistema operativo
llamado planificador, y no presta atenci&oacute;n si un proceso es padre o hijo,
sino que sigue un algoritmo basado en otros par&aacute;metros.

<p>
De todas formas, es importante conocer que proceso est&aacute; en ejecuci&oacute;n, ya que
el c&oacute;digo es el mismo. Ambos procesos contendr&aacute;n el c&oacute;digo del padre y del
hijo, pero cada uno de ellos debe ejecutar solo uno de los c&oacute;digos. Para
clarificar este concepto, veamos el siguiente algoritmo:

<pre>
- FORK
- IF YOU ARE THE SON EXECUTE (...)
- IF YOU ARE THE FATHER EXECUTE (...)
</pre>

que representa en un peque&ntilde;o pseudoc&oacute;digo el c&oacute;digo de nuestro programa.
Vamos a revelar el misterio: la funci&oacute;n fork devuelve '0' al proceso hijo
y el pid del hijo al padre. As&iacute; que es suficiente comprobar si el pid
devuelto es cero y sabremos que proceso esta ejecutando el c&oacute;digo.
En el lenguaje C obtendremos

<pre>
int main()
{
  pid_t pid;

  pid = fork();
  if (pid == 0)
  {
    CODE OF THE SON PROCESS
  }
  CODE OF THE FATHER PROCESS
}
</pre>

Es hora de escribir el primer ejemplo real de c&oacute;digo multitarea: puedes
grabarlo en un fichero fork_demo.c y compilarlo como se hizo anteriormente.
He puesto el n&uacute;mero de las lineas s&oacute;lo por claridad. El programa
se bifurcar&aacute; a si mismo y el padre y el hijo escribir&aacute;n algo en pantalla;
la salida final ser&aacute; el entrelazamiento de las dos salidas (si todo va bien).

<pre>
(01) #include &lt;unistd.h&gt;
(02) #include &lt;sys/types.h&gt;
(03) #include &lt;stdio.h&gt;

(04) int main()
(05) {
(05)   pid_t pid;
(06)   int i;

(07)   pid = fork();

(08)   if (pid == 0){
(09)     for (i = 0; i  &lt; 8; i++){
(10)       printf("-SON-\n");
(11)     }
(12)     return(0);
(13)   }

(14)   for (i = 0; i &lt; 8; i++){
(15)     printf("+FATHER+\n");
(16)   }

(17)   return(0);
(18) }
</pre>

<p>
Las lineas n&uacute;mero (01)-(03) contienen los includes de las librer&iacute;as
necesarias (E/S est&aacute;ndar, multitarea). <br>
El main (como siempre en GNU), devuelve un entero, que es normalmente
cero si el programa llega al final sin errores o un c&oacute;digo de error si va
algo mal; supondremos por ahora que todo marcha sin errores (a&ntilde;adiremos
control de errores cuando est&eacute;n claros los conceptos b&aacute;sicos). Luego
definimos un tipo de dato para contener un pid (05) y un entero para usarlo
como contador del bucle (06). Estos dos tipos, como se dijo antes, son
id&eacute;nticos, pero est&aacute;n ah&iacute; para mayor claridad.<br>
En la linea (07) llamamos a la funci&oacute;n fork, la cual devolver&aacute; cero al programa
ejecutado en el proceso hijo y el pid del proceso hijo al padre; la
comprobaci&oacute;n est&aacute; en la linea (08). Ahora el c&oacute;digo de las lineas (09)-(13)
se ejecutar&aacute;n en el proceso hijo, mientras que el resto (14)-(16) las
ejecutar&aacute; el padre.<br>
Las dos partes simplemente escriben 8 veces en la salida est&aacute;ndar la palabra
"-SON-" o "+FATHER+", dependiendo en que proceso se ejecuta, y luego
termina devolviendo 0. Esto es verdaderamente importante, ya que sin este
&uacute;ltimo "return" el proceso hijo, una vez que el bucle termine, seguir&aacute; ejecutando
el c&oacute;digo del padre (compru&eacute;balo, no da&ntilde;ar&aacute; tu m&aacute;quina, simplemente no har&aacute;
lo que queremos). Por eso, un error ser&aacute; realmente dif&iacute;cil de encontrar, desde
la ejecuci&oacute;n de un programa multitarea (especialmente uno complejo) se da
diferentes resultados en cada ejecuci&oacute;n, haciendo la depuraci&oacute;n basada
en los resultados simplemente imposible.

<p>
Ejecutando el programa quiz&aacute;s quedes insatisfecho: no puedo asegurar
de que el resultado ser&aacute; una mezcla real entre dos cadenas, y esto es debido
a la velocidad de ejecuci&oacute;n del peque&ntilde;o bucle. Probablemente tu
salida sea una sucesi&oacute;n de cadenas "+FATHER+" seguidas por unas
de "-SON-" o viceversa. Sin embargo, intenta ejecutar mas de una vez el
programa y el resultado podr&aacute; cambiar.

<p>
Insertando un retraso aleatorio antes de cada llamada a printf, obtendremos
un mejor efecto visual de la multitarea: lo hacemos con las funciones sleep y
rand.

<pre>
sleep(rand()%4)
</pre>

esto hace que el programa duerma durante un n&uacute;mero aleatorio de segundos
entre 0 y 3 (% devuelve el resto de una divisi&oacute;n entera). Ahora el c&oacute;digo es

<pre>
(09)  for (i = 0; i &lt; 8; i++){
(-&gt;)    sleep (rand()%4);
(10)    printf("-FIGLIO-\n");
(11)  }
</pre>

y lo mismo para el c&oacute;digo del padre. Gu&aacute;rdalo como fork_demo2.c, comp&iacute;lalo
y ejec&uacute;talo. Ahora es mas lento, pero notamos la diferencia en el orden de salida:

<pre>
[leo@mobile ipc2]$ ./fork_demo2
-SON-
+FATHER+
+FATHER+
-SON-
-SON-
+FATHER+
+FATHER+
-SON-
-FIGLIO-
+FATHER+
+FATHER+
-SON-
-SON-
-SON-
+FATHER+
+FATHER+
[leo@mobile ipc2]$
</pre>

<p>
Ahora miremos los problemas que tenemos que ahora hacer frente: podemos
crear un cierto n&uacute;mero de procesos hijo dado un proceso padre, de modo que
ejecuten operaciones diferentes a las que ejecute el proceso padre en un entorno
de procesamiento concurrente; a menudo, el padre necesita comunicarse con
sus hijos o al menos sincronizarse con ellos, para ejecutar operaciones
en el orden correcto. Un primer modo para obtener dicha sincronizaci&oacute;n entre
procesos es la funci&oacute;n wait

<pre>
pid_t waitpid (pid_t PID, int *STATUS_PTR, int OPTIONS)
</pre>

donde PID es el PID del proceso cuyo fin estamos esperando, STATUS_PTR
un puntero a un entero el cual contendr&aacute; el estado del proceso hijo (NULL si no
se necesita la informaci&oacute;n) y OPTIONS un conjunto de opciones que no debemos
tener en cuenta por ahora.

Este es un ejemplo de un programa en el cual el padre crea un proceso hijo
y espera a que acabe

<pre>
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;

int main()
{
  pid_t pid;
  int i;

  pid = fork();

  if (pid == 0){
    for (i = 0; i &lt; 14; i++){
      sleep (rand()%4);
      printf("-SON-\n");
    }
    return 0;
  }

  sleep (rand()%4);
  printf("+FATHER+ Waiting for son's termination...\n");
  waitpid (pid, NULL, 0);
  printf("+FATHER+ ...ended\n");

  return 0;
}
</pre>

La funci&oacute;n sleep en el c&oacute;digo del padre se ha insertado para diferenciar
las ejecuciones. Graba el c&oacute;digo como fork_demo3.c, comp&iacute;lalo y ejec&uacute;talo. &iexcl;Acabamos
de escribir nuestra primera aplicaci&oacute;n multitarea sincronizada!

<p>
En el pr&oacute;ximo art&iacute;culo aprenderemos m&aacute;s sobre sincronizaci&oacute;n y comunicaci&oacute;n
entre procesos; ahora escribe tus programas usando las funciones
descritas y env&iacute;amelas y as&iacute; podr&eacute; usar alguna de ellas para mostrar
soluciones buenas o errores. Env&iacute;ame el fichero .c con el c&oacute;digo comentado y un
peque&ntilde;o fichero de texto con la descripci&oacute;n del programa, tu nombre y tu direcci&oacute;n
de e-mail. &iexcl;Buen trabajo!

<A NAME="272lfindex4">&nbsp;</A>
<H3>Lecturas recomendadas</H3>


<ul>
<li>Silberschatz, Galvin, Gagne, <b>Operating System Concepts -
	Sixth Edition</b>, Wiley&amp;Sons, 2001
<li>Tanenbaum, WoodHull, <b>Operating Systems: Design and Implementation
	- Second Edition</b>, Prentice Hall, 2000
<li>Stallings, <b>Operating Systems - Fourth Edition</b>, Prentice Hall, 2002
<li>Bovet, Cesati, <b>Understanding the Linux Kernel</b>, O'Reilly, 2000
</ul>



<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1" summary="tb-button-outerpart">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1" summary="tb-button">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=272"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; Leonardo Giordani, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#9999AA">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE summary="translators">
  <tr><td><font size="2">it --&gt; -- : Leonardo Giordani <small>&lt;leo.giordani(at)libero.it&gt;</small></font></td></tr>
  <tr><td><font size="2">it --&gt; en: Leonardo Giordani &lt;leo.giordani(at)libero.it&gt;</font></td></tr>
  <tr><td><font size="2">en --&gt; es: Carlos Mayo (<a href="http://www.carlosmayo.net"><font size="1">homepage</font></a>)</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2002-12-09, generated by lfparser version 2.34</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
