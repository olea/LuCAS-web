<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.34">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf295, SoftwareDevelopment: Programar GUI con GTK</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 p.cl { color:#EE9500 }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 .mark  { background-color:#e6e6ff }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://www.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: &Ouml;zcan G&uuml;ng&ouml;r
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: Programar GUI con GTK
 =LF=NUMBER: 295
 =LF=ANAME_: article295.html
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top"><A class="nodec" href="../"><FONT color=
                 "#DDDDDD" size="2">Hogar</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Mapa</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Indice</FONT></A> &nbsp;|&nbsp; <A class=
                 "nodec" href="../Search/"><FONT color=
                 "#DDDDDD" size="2">Busqueda</FONT></A> </TD>
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!--#include virtual="../../dynahead.shtml" -->

<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT BIO ABOUT THE AUTHOR -->
<TABLE ALIGN=LEFT BORDER=0  WIDTH="190" summary="about the author">
<TR>
<TD>

<!-- 2pdaIgnoreStart -->
<!-- PALM DOC -->
<TABLE BORDER=0 hspace=4 vspace=4 summary="pda download"> <TR> <TD>
<font size=1> <img src="../../common/images/2doc.gif" width=34 align=left border=0 height=22 alt="convert to palm"><a href="http://cgi.linuxfocus.org/cgi-bin/2ztxt">Convert to GutenPalm</a><br>or <a href="http://cgi.linuxfocus.org/cgi-bin/2pda">to PalmDoc</a></font>
</TD> </TR> </TABLE>
<!-- END PALM DOC -->
<!-- 2pdaIgnoreStop -->
<br>
<img src="../../common/images/OzcanGungor.jpg" alt="Ozcan Gungor" width="114" height="147">
<BR>por  &Ouml;zcan G&uuml;ng&ouml;r <br> <small>&lt;ozcangungor%28at%29netscape.net&gt;</small>
<BR><BR>
<I>Sobre el autor:</I><BR>
<!-- aboutauthor_start -->

Utilizo Linux desde 1997. Libertad, flexibilidad y opensource.
Son las caracter&iacute;sticas que me gustan.

<!-- aboutauthor_stop -->
<!-- TRANSLATED TO es -->
<BR><BR><I>Taducido al espa&ntilde;ol por:</I><BR>
Luis F. D&iacute;az <small>&lt;luisfdd(at)yahoo.es&gt;</small>
<br>
<!--
 =LF=TRANSTO=es: Luis F. D&iacute;az
-->
<!-- TRANSLATED TO STOP -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#295lfindex0">&iquest;Qu&eacute; es GTK?</A></LI>
  <LI><A HREF="#295lfindex1">Compilaci&oacute;n</A></LI>
  <LI><A HREF="#295lfindex2">Un programa inicial</A></LI>
  <LI><A HREF="#295lfindex3">Se&ntilde;ales y Eventos</A></LI>
  <LI><A HREF="#295lfindex4">Un bot&oacute;n ordinario</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=295">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- HEAD OF THE ARTICLE -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>Programar GUI con GTK</H2>
 <img src="../../common/images/illustration295.jpg" alt="GTK"
width="195" height="172">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<!-- articleabstract_start -->
<p>En esta serie de art&iacute;culos aprenderemos c&oacute;mo escribir programas con
interfaz
de usuario gr&aacute;fica (GUI) utilizando GTK. No tengo ni idea de cuando
concluir&aacute;n.
Para entenderlos deber&iacute;as saber manejar los siguientes conceptos del
lenguaje
de  programaci&oacute;n C: </p><ul><li>Variables</li><li>Funciones</li><li>Punteros</li></ul><br>
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- BODY OF THE ARTICLE -->


<A NAME="295lfindex0">&nbsp;</A>
<H2>&iquest;Qu&eacute; es GTK?</H2>


<p>GTK (GIMP Toolkit) es una biblioteca que posibilita la creaci&oacute;n de
interfaces
de usuario gr&aacute;ficas (Graphical User Interfaces, GUI). Est&aacute; disponible
bajo
licencia GPL. Utilizando dicha biblioteca pueden crearse programas de
c&oacute;digo
abierto, tanto libres como comerciales.</p>

<p>La biblioteca se denomina GIMP toolkit (GTK) por haber sido creada
para
desarrollar el GIMP (General Image Manipulation Program). Sus autores
son:</p>

<ul>
<li><a href="mailto:petm%28at%29xcf.berkley.edu">Peter
Mattis</a></li>
<li><a href="mailto:spencer%28at%29xcf.berkley.edu">Spencer
Kimball</a></li>
<li><a href="mailto:jmacd%28at%29xcf.berkley.edu">Josh
MacDonald</a></li>

</ul>

<p>GTK es un interfaz de aplicaciones de usuario orientado a objetos.
Aunque
escrita en C, utiliza clases y llamada a funciones.</p>

<A NAME="295lfindex1">&nbsp;</A>
<H2>Compilaci&oacute;n</H2>


<p>Para compilar programas GTK se necesita decirle a gcc qu&eacute; bibliotecas
GTK
necesita y d&oacute;nde est&aacute;n. La orden <i>gtk-config</i> lo sabe:</p>
# gtk-config --cflags --libs
<p>La salida deber&iacute;a ser, dependiendo del sistema, algo as&iacute; como:</p>
-I/opt/gnome/include/gtk-1.2 -I/opt/gnome/include/glib-1.2
-I/opt/gnome/lib/glib
/include -I/usr/X11R6/include     -L/opt/gnome/lib -L/usr/X11R6/lib
-lgtk
-lgdk -rdynamic     -lgmodule -lglib -ldl -l Xext -lX11 -lm
<p>El significado de los par&aacute;metros anteriores es el siguiente:</p>
-l library: Busca una biblioteca seg&uacute;n el formato
lib<i>library</i>.a
en la ruta especificada. <br>
-L path: A&ntilde;ade una ruta de b&uacute;squeda de biliotecas. <br>
-I path: A&ntilde;ade una ruta para encontrar un archivo de cabecera
utilizado
en el programa.     <br>

<p>Para compilar un programa GTK llamado hello.c se puede utilizar la
siguiente
orden:</p>

<p class="code">gcc -o hello hello.c `gtk-config --cflags
--libs`</p>

<p>La entrada que aparece detr&aacute;s del par&aacute;metro -o es el nombre del
programa
compilado.</p>

<A NAME="295lfindex2">&nbsp;</A>
<H2>Un programa inicial</H2>


<p>Se supone que tu sistema tiene instalado GTK. Las &uacute;ltimas versiones
pueden
encontrarse en <a href="ftp://ftp.gtk.org">ftp.gtk.org</a>.</p>

<p>Vamos a escribir nuestro primer programa. Dicho c&oacute;digo crea una
ventana
vac&iacute;­a de 200x200 pixels de tama&ntilde;o:</p>

<pre class="code">#include &lt;gtk/gtk.h&gt;<br><br>int main( int
argc,<br>          char *argv[] )<br>{<br>    GtkWidget
*window;<br><br>    gtk_init (&amp;argc, &amp;argv);<br><br>    window =
gtk_window_new (GTK_WINDOW_TOPLEVEL);<br>    gtk_widget_show
(window);<br><br>    gtk_main ();<br><br>    return(0);<br>}<br></pre>

<p>GtkWidget es un tipo de variable para definir varios componentes como
window
(ventana), button (bot&oacute;n), label (etiqueta)... En este ejemplo, una
ventana
se define as&iacute;:</p>
GtkWidget *window;
<p>void gtk_init(int *argc,char ***argv) inicia el GTK y obtiene sus
par&aacute;metros
introducidos en la l&iacute;­nea de comandos. Dicha funci&oacute;n debe usarse
despu&eacute;s
de definir componentes.</p>

<p>GtkWidget *gtk_window_new(GtkWindowType windowtype) crea una ventana
nueva.
Una ventana puede ser de cualquiera de los siguientes tipos:</p>

<ul>
<li>GTK_WINDOW_TOPLEVEL</li>
<li>GTK_WINDOW_DIALOG</li>
<li>GTK_WINDOW_POPUP</li>

</ul>

<p>void gtk_widget_show(GtkWidget *widget) se utiliza para hacer
aparecer
un componente en una ventana. Esta funci&oacute;n se usa despu&eacute;s de haber
definido
el componente y cambiado sus atributos.</p>

<p>void gtk_main(void) prepara la ventana y sus componentes para
aparecer
en pantalla. Dicha funci&oacute;n debe usarse al final de un programa GTK.</p>

<p>Veamos ahora algunas propiedades de la ventana, como el t&iacute;tulo, el
tama&ntilde;o,
la posici&oacute;n...</p>

<p class="code">void gtk_window_set_title(GtkWindow *window,const
gchar     *title) <br>
</p>
<p>se  utiliza para poner o cambiar el t&iacute;tulo de un componente
<i>window</i>.
El primer par&aacute;metro en dicha funci&oacute;n es de tipo GtkWindow, pero la
variable
<i>window</i> es de tipo GtkWidget. Seremos advertidos durante la
compilaci&oacute;n
y, aunque el programa compilado funcione, es mejor corregirlo. Para eso
se
utiliza GTK_WINDOW(GtkWidget *widget). El segundo par&aacute;metro,
<i>title</i>
, es de tipo gchar. gchar     est&aacute; definido de la misma forma que un
tipo
char en la biblioteca glib.</p>

<p class="code">void gtk_window_set_default_size(GtkWindow *window,
gint     width, gint
height) </p> dispone el tama&ntilde;o de la ventana. Como gchar,     gint est&aacute;
definido
de la misma forma que int en la biblioteca glib.</p>
La funci&oacute;n
<p class="code">void gtk_window_set_position(GtkWindow *window,
GtkWindowPosition
position)</p>
fija la posici&oacute;n de la ventana. <i>position</i> puede ser:<br>
<br>

<ul>
<li>GTK_WIN_POS_NONE</li>
<li>GTK_WIN_POS_CENTER</li>
<li>GTK_WIN_POS_MOUSE</li>
<li>GTK_WIN_POS_CENTER_ALWAYS</li>

</ul>

<p>He aqu&iacute; un ejemplo:</p>

<pre class="code">#include &lt;gtk/gtk.h&gt;<br><br>int main( int
argc,<br>          char *argv[] )<br>{<br>    GtkWidget
*window;<br><br>    gtk_init (&amp;argc, &amp;argv);<br><br>    window =
gtk_window_new (GTK_WINDOW_TOPLEVEL);<br>
gtk_window_set_title(GTK_WINDOW(window),"&#221;lk Program");<br>
gtk_window_set_position(GTK_WINDOW(window),GTK_WIN_POS_CENTER);<br>
gtk_window_set_default_size(GTK_WINDOW(window),300,300);<br>
gtk_widget_show  (window);<br><br>    gtk_main ();<br><br>
return(0);<br>}<br></pre>

<A NAME="295lfindex3">&nbsp;</A>
<H2>Se&ntilde;ales y Eventos</H2>


<p>En GUIs se necesita usar rat&oacute;n y teclado, es decir, se puede apretar
en
un bot&oacute;n. Por eso se usa la funci&oacute;n GTK siguiente:</p>

<p class="code">guint gtk_signal_connect_object(GtkObject
*object,const
gchar *name,GtkSignalFu nc func,GtkObject     *slot_object);</p>

<p><i>object</i> es el componente que emite las se&ntilde;ales. Por ejemplo, si
quieres
saber si un bot&oacute;n ha sido pulsado,     <i>object</i> ser&aacute; button.
<i>name</i>
es el nombre del evento, que puede ser cualquiera de los siguientes:</p>

<ul>
<li>event</li>
<li>button_press_event</li>
<li>button_release_event</li>
<li>motion_notify_event</li>
<li>delete_event</li>
<li>destroy_event</li>
<li>expose_event</li>
<li>key_press_event</li>
<li>key_release_event</li>
<li>enter_notify_event</li>
<li>leave_notify_event</li>
<li>configure_event</li>
<li>focus_in_event</li>
<li>focus_out_event</li>
<li>map_event</li>
<li>unmap_event</li>
<li>property_notify_event</li>
<li>selection_clear_event</li>
<li>selection_request_event</li>
<li>selection_notify_event</li>
<li>proximity_in_event</li>
<li>proximity_out_event</li>
<li>drag_begin_event</li>
<li>drag_request_event</li>
<li>drag_end_event</li>
<li>drop_enter_event</li>
<li>drop_leave_event</li>
<li>drop_data_available_event</li>
<li>other_event</li>

</ul>

<p><i>func</i> es la funci&oacute;n que debe ser llamada cuando ocurra un
envento.
He aqu&iacute; un ejemplo:</p>

<pre class="code">#include &lt;gtk/gtk.h&gt;<br><br>void close(
GtkWidget *widget,gpointer *data)<br>{<br>
gtk_main_quit();<br>}<br><br>int main( int   argc,char *argv[]
)<br>{<br>    GtkWidget *window;<br><br>    gtk_init (&amp;argc,
&amp;argv);<br><br>    window = gtk_window_new
(GTK_WINDOW_TOPLEVEL);<br>    gtk_signal_connect (GTK_OBJECT (window),
"destroy",<br>                        GTK_SIGNAL_FUNC (close),
NULL);<br>    gtk_widget_show  (window);<br><br>    gtk_main
();<br><br>    return(0);<br>}<br><br></pre>
La funci&oacute;n
<p class="code">gtk_signal_connect (GTK_OBJECT (window),
"destroy",GTK_SIGNAL_FUNC
(close), NULL)</p>
escucha el evento de destrucci&oacute;n de la ventana. Cuando la
ventana
es  obligada a cerrarse, se llama a la funci&oacute;n <i>close</i>.  La funci&oacute;n
<i>close</i>
llama a gtk_main_quit() y el programa finaliza.<br>
<br>

<p>Los detalles sobre se&ntilde;ales y eventos ser&aacute;n explicados m&aacute;s
adelante...</p>

<A NAME="295lfindex4">&nbsp;</A>
<H2>Un bot&oacute;n ordinario</H2>


<p>Los botones usuales normalmente hacen algo cuando son pulsados. En la
biblioteca
GTK hay dos formas de crear un bot&oacute;n:</p>

<ol>
<li>GtkWidget* gtk_button_new (void);</li>
<li>GtkWidget* gtk_button_new_with_label (const gchar
*label);</li>

</ol>

<p>La primera funci&oacute;n crea un bot&oacute;n sin etiqueta (no lleva nada
escrito).
La segunda, crea un bot&oacute;n con etiqueta (<i>label</i> es la etiqueta
escrita
sobre el bot&oacute;n).</p>

<p>Ahora vamos a utilizar una funci&oacute;n nueva:</p>

<p class="code">void gtk_container_add(GtkContainer
*container,GtkWidget
*widget)</p>

<p>Mediante dicha funci&oacute;n es posible hacer que un bot&oacute;n (u otro
componente)
aparezca en una ventana (o en cualquier otro contenedor). En el
siguiente
ejemplo, el contenedor es una ventana y el componente que se a&ntilde;ade un
bot&oacute;n.
Aprenderemos sobre otro tipo de contenedores m&aacute;s adelante.</p>

<p>Lo m&aacute;s importante de un bot&oacute;n es saber si se pulsa o no. De nuevo se
utiliza
la funci&oacute;n gtk_signal_connect para saberlo. Mediante ella se llama a
otra,
que es la que realmente se "esconde" en el bot&oacute;n. He aqu&iacute; un
ejemplo:</p>

<pre class="code">#include &lt;gtk/gtk.h&gt;<br><br>void close(
GtkWidget *widget,gpointer *data)<br>{<br>
gtk_main_quit();<br>}<br><br>void clicked(GtkWidget *widget,gpointer
*data)<br>{<br>        g_print("Button Clicked\n");<br>}<br>int main(
int   argc,char *argv[] )<br>{<br>    GtkWidget
*window,*button;<br><br>    gtk_init (&amp;argc, &amp;argv);<br><br>
window = gtk_window_new (GTK_WINDOW_TOPLEVEL);<br>    gtk_signal_connect
(GTK_OBJECT (window), "destroy",<br>
GTK_SIGNAL_FUNC (close), NULL);<br><br>
button=gtk_button_new_with_label("Button");<br>
gtk_container_add(GTK_CONTAINER(window),button);<br>
gtk_signal_connect(GTK_OBJECT(button),"clicked",<br>                       GTK_SIGNAL_FUNC(clicked),NULL);<br>    gtk_widget_show(button);<br><br>    gtk_widget_show(window);<br><br>    gtk_main ();<br><br>    return(0);<br>}<br><br></pre>
<br>
<br>





<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
<table border="0"  CELLSPACING="2" CELLPADDING="1" summary="tb-button-outerpart">
 <tr BGCOLOR="#C2C2C2"><td align=center>
  <table border="3"  CELLSPACING="2" CELLPADDING="1" summary="tb-button">
   <tr BGCOLOR="#C2C2C2"><td align=center>
    <A href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=295"><b>&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</b></a>
   </td></tr></table>
</td></tr></table>
</center>

<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#9999AA" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#FFFFFF">&copy; &Ouml;zcan G&uuml;ng&ouml;r, <a href="../../common/copy.html">FDL</a> <BR><a href="http://www.linuxfocus.org">LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#9999AA">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE summary="translators">
  <tr><td><font size="2">tr --&gt; -- : &Ouml;zcan G&uuml;ng&ouml;r <small>&lt;ozcangungor%28at%29netscape.net&gt;</small></font></td></tr>
  <tr><td><font size="2">tr --&gt; en: &Ouml;zcan G&uuml;ng&ouml;r &lt;ozcangungor%28at%29netscape.net&gt;</font></td></tr>
  <tr><td><font size="2">en --&gt; es: Luis F. D&iacute;az &lt;luisfdd(at)yahoo.es&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2003-05-13, generated by lfparser version 2.34</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
