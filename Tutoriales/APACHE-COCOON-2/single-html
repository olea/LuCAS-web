<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>Apache Cocoon 2</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.76b+
"></HEAD
><BODY
CLASS="book"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="BOOK"
><A
NAME="ApacheCocoon2"><DIV
CLASS="TITLEPAGE"
><H1
CLASS="title"
><A
NAME="InformacionDelLibro">Apache Cocoon 2</H1
><H2
CLASS="subtitle"
>Motivación, Introducción y Explicación</H2
><H3
CLASS="author"
><A
NAME="AEN6">Saúl Zárrate Cárdenas</H3
><DIV
CLASS="legalnotice"
><A
NAME="AEN13"><P
></P
><P
>Este documento se cede al dominio público.</P
><P
></P
></DIV
><HR></DIV
><DIV
CLASS="TOC"
><DL
><DT
><B
>Tabla de contenidos</B
></DT
><DT
>1. <A
HREF="#PorQueCocoon"
>¿Por qué <SPAN
CLASS="application"
>Cocoon</SPAN
>?</A
></DT
><DD
><DL
><DT
>1.1. <A
HREF="#Motivacion"
>Motivación</A
></DT
><DT
>1.2. <A
HREF="#EntornosDePublicacionWeb"
>Entornos de publicación web (<I
CLASS="foreignphrase"
>Web Publishing Framework</I
>)</A
></DT
></DL
></DD
><DT
>2. <A
HREF="#Cocoon"
><SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DD
><DL
><DT
>2.1. <A
HREF="#QueEsCocoon"
>¿Qué es <SPAN
CLASS="application"
>Cocoon</SPAN
>?</A
></DT
><DD
><DL
><DT
>2.1.1. <A
HREF="#FuncionamientoANivelDeUsuario"
>Funcionamiento a nivel de usuario</A
></DT
></DL
></DD
><DT
>2.2. <A
HREF="#Cocoon1Y2"
><SPAN
CLASS="application"
>Cocoon 1</SPAN
>
	<I
CLASS="foreignphrase"
>Vs</I
> <SPAN
CLASS="application"
>Cocoon 2</SPAN
></A
></DT
></DL
></DD
><DT
>3. <A
HREF="#EstructuraYArquietectura"
>Estructura y arquitectura de <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DD
><DL
><DT
>3.1. <A
HREF="#ConceptosClavesArquitectura"
>Conceptos claves</A
></DT
><DD
><DL
><DT
>3.1.1. <A
HREF="#EstructuraCocoon"
>Estructura</A
></DT
><DT
>3.1.2. <A
HREF="#Arquitectura"
>Arquitectura</A
></DT
></DL
></DD
></DL
></DD
><DT
>4. <A
HREF="#CocoonYLasXsps"
><SPAN
CLASS="application"
>Cocoon</SPAN
> y las XSPs</A
></DT
><DD
><DL
><DT
>4.1. <A
HREF="#Introduccion"
>Introducción</A
></DT
><DT
>4.2. <A
HREF="#tiposDePaginasXSP"
>Tipos de páginas <SPAN
CLASS="acronym"
>XSP</SPAN
></A
></DT
><DD
><DL
><DT
>4.2.1. <A
HREF="#XSPConLaLogicaEmbebidaEnLaPresentacion"
><SPAN
CLASS="acronym"
>XSP</SPAN
> con la lógica embebida en la presentación</A
></DT
><DT
>4.2.2. <A
HREF="#XSPConHojasDeEstilos"
><SPAN
CLASS="acronym"
>XSP</SPAN
> con hojas de estilos</A
></DT
><DT
>4.2.3. <A
HREF="#XSPConLibreriasDeEtiquetas"
><SPAN
CLASS="acronym"
>XSP</SPAN
> con bibliotecas de
	etiquetas</A
></DT
></DL
></DD
><DT
>4.3. <A
HREF="#XSPConAccesoABasesDeDatos"
>Conectividad a bases de datos</A
></DT
></DL
></DD
><DT
>5. <A
HREF="#ParalelismoConCocoon"
>Paralelismo con <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DT
>6. <A
HREF="#InstalacionCocoon"
>Instalación de <SPAN
CLASS="application"
>Cocoon 2</SPAN
></A
></DT
><DD
><DL
><DT
>6.1. <A
HREF="#RequisitosParaLaInstalacion"
>Requisitos para la instalación</A
></DT
><DD
><DL
><DT
>6.1.1. <A
HREF="#InstalacionDeTomcat"
>Instalación de <SPAN
CLASS="application"
>Tomcat</SPAN
></A
></DT
><DT
>6.1.2. <A
HREF="#AmbienteJava"
>Ambiente Java</A
></DT
></DL
></DD
><DT
>6.2. <A
HREF="#Instalacion"
>Instalando <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DD
><DL
><DT
>6.2.1. <A
HREF="#InstalacionRapidaDeCocoon"
>Instalación Rápida De <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DT
>6.2.2. <A
HREF="#InstalacionAPartirDeLosFuentes"
>Instalación a partir de los fuentes</A
></DT
></DL
></DD
></DL
></DD
><DT
>7. <A
HREF="#CocoonYElSitemap"
>Configuración y personalización en <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DD
><DL
><DT
>7.1. <A
HREF="#ElSitemap"
>El <I
CLASS="foreignphrase"
>sitemap</I
></A
></DT
><DD
><DL
><DT
>7.1.1. <A
HREF="#selectoresYMatchers"
>Selección y match en <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DT
>7.1.2. <A
HREF="#FuncionalidadDelSitemap"
>Funcionalidad del  <I
CLASS="foreignphrase"
>sitemap</I
></A
></DT
><DT
>7.1.3. <A
HREF="#EstructuraBasicaDelSitemap"
>Estructura básica del  <TT
CLASS="filename"
>sitemap</TT
></A
></DT
></DL
></DD
></DL
></DD
><DT
>8. <A
HREF="#desarrolloEnCocoon"
>Desarrollo en <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DD
><DL
><DT
>8.1. <A
HREF="#contenidoEstatico"
>Contenido estático</A
></DT
><DT
>8.2. <A
HREF="#contenidoDinamico"
>Contenido Dinámico</A
></DT
><DD
><DL
><DT
>8.2.1. <A
HREF="#dandoLogicaConProgramacionEnJava"
>Dando lógica con programación en <SPAN
CLASS="application"
>Java</SPAN
></A
></DT
><DT
>8.2.2. <A
HREF="#accesoABasesDeDatos"
>Acceso a bases de datos</A
></DT
></DL
></DD
><DT
>8.3. <A
HREF="#deploymentEnCocoon"
><I
CLASS="foreignphrase"
>Deployment</I
> en
	<SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DD
><DL
><DT
>8.3.1. <A
HREF="#comoMinimo"
>Condiciones mínimas</A
></DT
><DT
>8.3.2. <A
HREF="#inclusionDeSubSitemapEnElSitemapDeCocoon"
>Inclusión de un <I
CLASS="foreignphrase"
>subsitemap</I
> en 
               el <I
CLASS="foreignphrase"
>sitemap</I
> de
               <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DT
>8.3.3. <A
HREF="#codigoDelSubSitemap"
>Código del <TT
CLASS="filename"
>subsitemap</TT
></A
></DT
></DL
></DD
></DL
></DD
><DT
>A. <A
HREF="#formatoDeReunionSemanal"
>Formato de reunión semanal</A
></DT
><DD
><DL
><DT
>A.1. <A
HREF="#AEN981"
>Introducción</A
></DT
><DT
>A.2. <A
HREF="#AEN999"
>Descripción formato de reunión semanal</A
></DT
><DD
><DL
><DT
>A.2.1. <A
HREF="#AEN1007"
>Elementos del formato de reunión semanal</A
></DT
></DL
></DD
><DT
>A.3. <A
HREF="#XML"
><SPAN
CLASS="acronym"
>XML</SPAN
></A
></DT
><DD
><DL
><DT
>A.3.1. <A
HREF="#AEN1022"
>¿Qué es?</A
></DT
><DT
>A.3.2. <A
HREF="#AEN1029"
>Ejemplo <SPAN
CLASS="acronym"
>XML</SPAN
> con el formato de reunión semanal de
   Ingeniería de Software</A
></DT
></DL
></DD
><DT
>A.4. <A
HREF="#XSL"
><SPAN
CLASS="acronym"
>XSL</SPAN
></A
></DT
><DD
><DL
><DT
>A.4.1. <A
HREF="#AEN1071"
>Algunos aspectos de <SPAN
CLASS="acronym"
>XSL</SPAN
></A
></DT
></DL
></DD
><DT
>A.5. <A
HREF="#AEN1115"
>Usando el formato de reunión semanal en <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
></DL
></DD
></DL
></DIV
><DIV
CLASS="LOT"
><DL
CLASS="LOT"
><DT
><B
>Tabla de figuras</B
></DT
><DT
>3-1. <A
HREF="#AEN283"
><SPAN
CLASS="application"
>Cocoon</SPAN
> desde
		  un punto de vista estructural</A
></DT
><DT
>3-2. <A
HREF="#AEN289"
>Arquitectura de <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DT
>4-1. <A
HREF="#AEN347"
>Flujo en <SPAN
CLASS="acronym"
>XSP</SPAN
></A
></DT
><DT
>5-1. <A
HREF="#AEN428"
>WorkFlow en <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DT
>6-1. <A
HREF="#AEN507"
>Ventana de bienvenida de <SPAN
CLASS="application"
>Tomcat</SPAN
></A
></DT
><DT
>6-2. <A
HREF="#AEN542"
>Ventana de bienvenida de <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
><DT
>A-1. <A
HREF="#AEN1144"
>Formato de reunión semanal en  <SPAN
CLASS="application"
>Cocoon</SPAN
></A
></DT
></DL
></DIV
><DIV
CLASS="LOT"
><DL
CLASS="LOT"
><DT
><B
>Tabla de ejemplos</B
></DT
><DT
>7-1. <A
HREF="#AEN645"
>Ejemplo de un sitemap básico</A
></DT
><DT
>8-1. <A
HREF="#AEN698"
>Código para funcionamiento de un solicitud de un 
	  fichero <SPAN
CLASS="acronym"
>XML</SPAN
> presentado como un <SPAN
CLASS="acronym"
>HTML</SPAN
></A
></DT
><DT
>8-2. <A
HREF="#AEN734"
>Código para definir un <I
CLASS="foreignphrase"
>Data Source</I
> para acceso a 
                     una base de datos</A
></DT
><DT
>8-3. <A
HREF="#AEN763"
>Código para cargar clases para acceso a bases de datos.</A
></DT
><DT
>8-4. <A
HREF="#AEN775"
>Ejemplo de Código de Base de Datos necesario a incluir con la 
	  Base de Datos <SPAN
CLASS="application"
>hsql</SPAN
></A
></DT
><DT
>8-5. <A
HREF="#AEN805"
><I
CLASS="foreignphrase"
>Pipeline</I
> necesario para 
	  una <SPAN
CLASS="acronym"
>XSP</SPAN
> con etiquetas <SPAN
CLASS="acronym"
>SQL</SPAN
> 
	  y acceso a una Base de Datos</A
></DT
><DT
>8-6. <A
HREF="#AEN817"
>Código de una <SPAN
CLASS="acronym"
>XSP</SPAN
> con conexión a Base
       de datos con etiqueta <SPAN
CLASS="acronym"
>SQL</SPAN
></A
></DT
><DT
>8-7. <A
HREF="#AEN830"
><I
CLASS="foreignphrase"
>Pipeline</I
> necesario para 
	  una <SPAN
CLASS="acronym"
>XSP</SPAN
> con etiquetas <SPAN
CLASS="acronym"
>ESQL</SPAN
> 
	  y acceso a una Base de Datos</A
></DT
><DT
>8-8. <A
HREF="#AEN841"
>Código de una <SPAN
CLASS="acronym"
>XSP</SPAN
> con conexión a Base
       de datos con etiqueta <SPAN
CLASS="acronym"
>ESQL</SPAN
></A
></DT
><DT
>8-9. <A
HREF="#AEN894"
>Código para incluir un <I
CLASS="foreignphrase"
>subsitemap</I
></A
></DT
><DT
>8-10. <A
HREF="#AEN946"
>Código básico de un <I
CLASS="foreignphrase"
>subsitemap</I
></A
></DT
><DT
>A-1. <A
HREF="#AEN1050"
>Ejemplo de una <SPAN
CLASS="acronym"
>DTD</SPAN
> para el formato de reunión semanal</A
></DT
><DT
>A-2. <A
HREF="#AEN1061"
>Ejemplo de un documento <SPAN
CLASS="acronym"
>XML</SPAN
> para el formato de reunión semanal</A
></DT
><DT
>A-3. <A
HREF="#AEN1111"
>Ejemplo de una <SPAN
CLASS="acronym"
>XSL</SPAN
> para el formato de reunión semanal</A
></DT
><DT
>A-4. <A
HREF="#AEN1135"
>Código para añadir un <I
CLASS="foreignphrase"
>pipeline</I
> que 
	  cargue el formato de reunión semanal</A
></DT
></DL
></DIV
><DIV
CLASS="chapter"
><HR><H1
><A
NAME="PorQueCocoon">Capítulo 1. ¿Por qué <SPAN
CLASS="application"
>Cocoon</SPAN
>?</H1
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
NAME="Motivacion">1.1. Motivación</H2
><P
>Hoy en día, la presencia en el Web es cada vez más
	relevante e importante para las empresas.  Día a día se
	demandan más servicios en Internet.  Por esto, son requeridos
	sistemas con gran capacidad de transformación y asimilación de
	las nuevas tendencias, de las nuevas tecnologías y del
	constante cambio del propio mercado.</P
><P
>Una característica importante de este tema es lo que atañe
	a la presentación de la información en múltiples formas y
	dispositivos.  Si tenemos en cuenta el manejo de la
	información como hasta actualmente se está haciendo y
	analizamos lo que significa para una empresa tener toda su
	presentación en páginas <SPAN
CLASS="acronym"
>HTML</SPAN
>, podemos notar
	que imponer un cambio de imagen en las propias páginas es una
	labor dispendiosa y debido a que se trata de "remendar" algo
	ya hecho, se torna en una tarea poco agradable.</P
><P
>Peor aún, si se trata de presentar la información de la
	empresa en un formato distinto al <SPAN
CLASS="acronym"
>HTML</SPAN
>, ya
	que además de crear la presentación se debe recolectar la
	información de la presentación en el formato que está
	manejando, es decir, el <SPAN
CLASS="acronym"
>HTML</SPAN
>.</P
><P
>Como usted ya se habrá dado cuenta, el tener la
	información en la misma capa en la que se presenta, genera
	inconvenientes grandes y desencadena una cantidad de factores
	negativos para las organizaciones tales como gastos en
	mantenimiento, mayor tiempo en los desarrollos, pérdida de
	tiempo y dinero en la capacitación de personas para que
	conozcan la estructura de presentación, etc. </P
><P
>Para las empresas en las cuáles los datos de
	presentación se generan de forma dinámica, el problema pasa
	del diseñador al programador.  En estos casos el programador
	tiene que ir al código y cambiar la presentación, pero
	pensemos que en realidad ésto no es el trabajo de un programador,
	es precisamente la presentación, trabajo del diseñador.  Es
	claro que el diseñador no puede hacerlo (y tampoco debe, por
	que no es su oficio) ya que su línea de trabajo no está
	pensada para esto.  Ésto se da mucho en generación dinámica de
	aplicaciones que utilizan tecnologías del estilo de
	<SPAN
CLASS="application"
>Servlets</SPAN
>.  Sin
	embargo nótese que el programador, al tener que modificar en
	su código fuente aspectos de presentación corre un riesgo alto
	de alterar el funcionamiento de la aplicación, lo cual cae en
	una solución peor e improductiva.</P
><P
>Una solución mejorada de los <SPAN
CLASS="application"
>Servlets</SPAN
> salió con la tecnología
	<SPAN
CLASS="application"
>J2EE</SPAN
>.  En los
	<SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>J2EE <I
CLASS="foreignphrase"
>Beans</I
></I
></SPAN
>
	(que son la forma de presentar la información) se debería
	tener el mínimo código, es decir, el necesario para las clases
	que contienen toda la lógica del negocio.  Por otro lado, con
	los
	<SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
><I
CLASS="foreignphrase"
>taglibs</I
></I
></SPAN
>
	(etiquetas <SPAN
CLASS="acronym"
>XML</SPAN
> para definir código) se
	posibilita crear páginas que no tienen una sola línea de
	código.</P
><P
>Bien, ésto mejora las cosas; sin embargo se siguen
	teniendo básicamente tres problemas:</P
><P
></P
><OL
TYPE="1"
><LI
><P
>Si se quieren obtener distintas presentaciones, es necesario
	    modificar el código <SPAN
CLASS="application"
>Java</SPAN
> que
	    se encarga de dar formato a los datos</P
></LI
><LI
><P
>El mantenimiento puede no ser tan transparente ya que un
	    diseñador puede alterar el código embebido en el <SPAN
CLASS="acronym"
>HTML</SPAN
>.</P
></LI
><LI
><P
>En ocasiones puede ocurrir que se incluya código
	    <SPAN
CLASS="application"
>Java</SPAN
> mas allá del
	    necesario para que puedan funcionar correctamente los 
	    <I
CLASS="foreignphrase"
>beans</I
>.</P
></LI
></OL
><P
>Sería óptimo poder tener productos de información que
	fueran independientes de las distintas formas de presentación
	y que si ese contenido se generara dinámicamente, ese
	dinamismo también fuera totalmente independiente.  En pocas
	palabras se quiere <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>separar Contenido, Lógica y
	Presentación.</I
></SPAN
></P
><P
>Si se tuviera en un repositorio toda la información sin
	ninguna característica que la atara a algún tipo de
	presentación, se podrían implantar cada una de las vistas que
	se desearan sin que se debiera tener en cuenta alguna de las
	otras.  Luego, el cambio o el mantenimiento de una de las
	vistas no le afectaría, sino a ella misma.</P
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="EntornosDePublicacionWeb">1.2. Entornos de publicación web (<I
CLASS="foreignphrase"
>Web Publishing Framework</I
>)</H2
><P
>Es aquí, donde surgen los <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>Entornos de Publicación
	  Web Basados en <SPAN
CLASS="acronym"
>XML</SPAN
> y
	  <SPAN
CLASS="acronym"
>XSL</SPAN
></I
></SPAN
>.  En este tipo de
	aplicación se tienen las ventajas de la tecnología
	<SPAN
CLASS="acronym"
>XML</SPAN
>, tales como ser un estándar, ser una
	meta común para las empresas de tecnología, facilidad en la
	transformación con el apoyo de la tecnología
	<SPAN
CLASS="acronym"
>XSL</SPAN
>, separación total entre datos y
	presentación de los mismos, separación entre el rol del
	programador y el rol del diseñador (y por lo tanto más
	productividad, menos costos y más paralelismo de trabajo),
	mejor y más fácil tratamiento al mantenimiento y ser
	compatible con el resto de tecnologías.</P
><P
>Hasta este punto un entorno de publicación web en xml
	resuelve el problema contenido-presentación.  ¿Pero y la
	lógica de la aplicación?</P
><P
>Bien, para esta parte existen varias propuestas, pero la
	más interesante es un proyecto del grupo
	<SPAN
CLASS="acronym"
>Apache</SPAN
> que denominan <SPAN
CLASS="acronym"
>XSP</SPAN
>
	(<SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>eXtensible Server Pages</I
></SPAN
>).  Para conocer
	un poco más de <SPAN
CLASS="acronym"
>XSP</SPAN
> vea el <A
HREF="#CocoonYLasXsps"
>Capítulo 4</A
>
      </P
><P
>Como vemos, ya se explicó a grandes rasgos que el entorno
	de publicación web basado en <SPAN
CLASS="acronym"
>XML</SPAN
> es la
	mejor solución al problema planteado: Separar Contenido,
	Lógica y Presentación.  Es aquí en donde entra el proyecto del
	grupo Apache llamado por ellos <A
HREF="http://xml.apache.org/cocoon"
TARGET="_top"
>Apache Cocoon</A
>.</P
><DIV
CLASS="important"
><P
></P
><TABLE
CLASS="important"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/important.gif"
HSPACE="5"
ALT="Importante"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Es importante resaltar que esta solución tiene un problema:
	  Es muy poco madura y aun anda en proceso de prueba lo cual
	  genera expectativas de todo tipo.
	  <SPAN
CLASS="application"
>Cocoon</SPAN
> es hasta el momento entre
	  este tipo de soluciones, la más desarrollada y cuenta con
	  gran credibilidad en este momento.</P
></TD
></TR
></TABLE
></DIV
></DIV
></DIV
><DIV
CLASS="chapter"
><HR><H1
><A
NAME="Cocoon">Capítulo 2. <SPAN
CLASS="application"
>Cocoon</SPAN
></H1
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
NAME="QueEsCocoon">2.1. ¿Qué es <SPAN
CLASS="application"
>Cocoon</SPAN
>?</H2
><P
>&#13;	<SPAN
CLASS="application"
>Cocoon</SPAN
> es un sistema de publicación
	Web, basado en <SPAN
CLASS="acronym"
>XML/XSL</SPAN
>.  Cuenta con
	desarrollo total en <SPAN
CLASS="application"
>Java</SPAN
> por lo
	cual se puede ejecutar desde cualquier servidor que pueda
	contener <SPAN
CLASS="application"
>Servlets</SPAN
>; y al ser un
	<SPAN
CLASS="application"
>Servlet</SPAN
> cuenta con las ventajas de
	éstos, es decir, se ejecutan como 
	<I
CLASS="foreignphrase"
>threads</I
> de forma simultánea en
	el mismo contexto y no tienen que llamar a métodos auxiliares
	como lo hacen tecnologías del estilo
	<SPAN
CLASS="application"
>CGI</SPAN
>.
      </P
><P
>&#13;	<SPAN
CLASS="application"
>Cocoon</SPAN
> es <I
CLASS="foreignphrase"
>Open
	Source</I
>.  Es bastante configurable y
	personalizable.  Además adopta características para escribir
	páginas de servidor en <SPAN
CLASS="acronym"
>XML</SPAN
>
	(<SPAN
CLASS="acronym"
>XSP</SPAN
>s).  Permite diferenciar el
	procesamiento del documento para tenerlo en distintos
	formatos, dependiendo del tipo de software que hace la
	petición y cuenta con un sistema de caché para tener un mejor
	rendimiento.  Un elemento adicional y clave para tener en
	cuenta es que es un producto gratuito y por lo tanto no tendrá
	que gastar dinero para su adquisición.
      </P
><P
>&#13;	Su usted desea separar contenido, presentación y lógica en su
	aplicación, una buena alternativa es adoptar
	<SPAN
CLASS="application"
>Cocoon</SPAN
>.</P
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="FuncionamientoANivelDeUsuario">2.1.1. Funcionamiento a nivel de usuario</H3
><P
>Cuando un usuario hace una solicitud, en
	  <SPAN
CLASS="application"
>Cocoon</SPAN
> ocurren una serie de fases
	  que consisten en:</P
><DIV
CLASS="procedure"
><OL
TYPE="1"
><LI
><P
>El usuario solicita un documento de cualquier tipo al servidor.</P
></LI
><LI
><P
>La solicitud se analiza para concluir si se puede atender o
	      no. Si no se puede atender se produce un mensaje de error.</P
></LI
><LI
><P
>Si se puede atender se analiza a qué productor <SPAN
CLASS="acronym"
>XML</SPAN
>
	      corresponde. Se genera un documento <SPAN
CLASS="acronym"
>XML</SPAN
> con el
	      cual se trabajará.</P
></LI
><LI
><P
>Se extraen las instrucciones del
	      <SPAN
CLASS="acronym"
>XML</SPAN
> generado en el paso anterior y
	      éstas se le pasan al procesador apropiado para que se le
	      apliquen al <SPAN
CLASS="acronym"
>XML</SPAN
>. Al procesar el
	      <SPAN
CLASS="acronym"
>XML</SPAN
> podría salir un
	      <SPAN
CLASS="acronym"
>XML</SPAN
> con más instrucciones que serán
	      tratadas en algún otro ciclo.</P
></LI
><LI
><P
>El <SPAN
CLASS="acronym"
>XML</SPAN
> procesado se le pasa al
	      elemento que aplica el formato. Si el documento es un
	      documento final,<SPAN
CLASS="acronym"
>XML</SPAN
> aplica el formato
	      y le envía el documento formateado al cliente.  En el
	      caso que el documento <SPAN
CLASS="acronym"
>XML</SPAN
> procesado,
	      sea código que deba ejecutarse (como en el caso de una
	      <SPAN
CLASS="acronym"
>XSP</SPAN
> ya compilada), éste se pasa como
	      productor de <SPAN
CLASS="acronym"
>XML</SPAN
> y se vuelve a
	      procesar hasta que se llega a un documento
	      <SPAN
CLASS="acronym"
>XML</SPAN
> final.</P
></LI
></OL
></DIV
></DIV
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="Cocoon1Y2">2.2. <SPAN
CLASS="application"
>Cocoon 1</SPAN
>
	<I
CLASS="foreignphrase"
>Vs</I
> <SPAN
CLASS="application"
>Cocoon 2</SPAN
></H2
><P
><SPAN
CLASS="application"
>Cocoon</SPAN
> está siendo
	desarrollado por una parte del equipo <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>Apache
	<SPAN
CLASS="acronym"
>XML</SPAN
></I
></SPAN
>. <SPAN
CLASS="application"
>Cocoon 2</SPAN
> tiene cambios tan
	significativos con respecto a <SPAN
CLASS="application"
>Cocoon 1</SPAN
>, que se podría decir
	casi que fue escrito de nuevo.
      </P
><P
>Los desarrolladores de <SPAN
CLASS="application"
>Cocoon
	  2</SPAN
> dicen que lo que han hecho es aprender 
	de lo que vivieron durante el desarrollo de <SPAN
CLASS="application"
>Cocoon 1</SPAN
>, y lo implementaron 
	para mejorar la eficiencia y la escalabilidad del proyecto.
      </P
><P
><SPAN
CLASS="application"
>Cocoon 1</SPAN
>
	trabajaba sobre <SPAN
CLASS="acronym"
>DOM</SPAN
> (<SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>Document
	Object Model</I
></SPAN
>) para poder pasar los documentos
	<SPAN
CLASS="acronym"
>XML</SPAN
> entre componentes.  El problema es que
	el trabajo con árboles <SPAN
CLASS="acronym"
>DOM</SPAN
> se torna
	ineficiente ya que el procesamiento de un árbol consume mucha
	más memoria que el documento <SPAN
CLASS="acronym"
>XML</SPAN
> original.
      </P
><P
><SPAN
CLASS="application"
>Cocoon 2</SPAN
> está
	construido sobre el <SPAN
CLASS="acronym"
>API</SPAN
>
	<SPAN
CLASS="acronym"
>SAX</SPAN
> que es mucho más eficaz cuando se trata de
	manipular documentos <SPAN
CLASS="acronym"
>XML</SPAN
>.</P
><P
>Por otro lado, el manejo de la aplicación cambia bastante
	de <SPAN
CLASS="application"
>Cocoon 1</SPAN
> a
	<SPAN
CLASS="application"
>Cocoon 2</SPAN
>.  Mientras
	que en <SPAN
CLASS="application"
>Cocoon 1</SPAN
>, en
	los documentos <SPAN
CLASS="acronym"
>XML</SPAN
> se debían incluir las
	instrucciones para hacer el procesamiento del documento
	(atando el documento <SPAN
CLASS="acronym"
>XML</SPAN
> a
	<SPAN
CLASS="application"
>Cocoon</SPAN
>), en <SPAN
CLASS="application"
>Cocoon 2</SPAN
> se puede configurar
	para determinado fichero <SPAN
CLASS="acronym"
>XML</SPAN
> que
	transformación debe aplicársele, fuera del mismo fichero.
	Note que ésto es una gran ventaja con respecto a la
	flexibilidad del sistema, ya que en la versión 1 de
	<SPAN
CLASS="application"
>Cocoon</SPAN
> la
	reutilización de código se disminuye considerablemente y la
	capa que separa el contenido de la lógica y la presentación se
	vuelve casi imperceptible.
      </P
></DIV
></DIV
><DIV
CLASS="chapter"
><HR><H1
><A
NAME="EstructuraYArquietectura">Capítulo 3. Estructura y arquitectura de <SPAN
CLASS="application"
>Cocoon</SPAN
></H1
><P
>En este apartado me dedicaré a hablar un poco de la
      estructura interna y arquitectura en la que se basa
      <SPAN
CLASS="application"
>Cocoon</SPAN
>.</P
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="ConceptosClavesArquitectura">3.1. Conceptos claves</H2
><P
>Antes de entrar en detalles es recomendable mostrar tres conceptos claves de la
	estructura de <SPAN
CLASS="application"
>Cocoon</SPAN
>. Éstos son:</P
><P
></P
><DIV
CLASS="variablelist"
><DL
><DT
><I
CLASS="foreignphrase"
>Pipeline</I
>(o tubería)</DT
><DD
><P
>La idea es dividir el procesamiento de un documento
	    <SPAN
CLASS="acronym"
>XML</SPAN
> en varios pasos más elementales.
	    Un <I
CLASS="foreignphrase"
>pipeline</I
> consiste en una
	    entrada seguida de un conjunto de procesos de tratado de
	    la entrada y una salida.  Realmente es un concepto muy
	    sencillo pero a la vez muy potente y hace que la
	    programación sea más fácil y más escalable.</P
></DD
><DT
>Componentes del <I
CLASS="foreignphrase"
>Pipeline</I
></DT
><DD
><P
>Son los que se encargan de llevar a cabo una tarea
	    en particular en el
	    <I
CLASS="foreignphrase"
>pipeline</I
> como generar un
	    documento <SPAN
CLASS="acronym"
>XML</SPAN
>, aplicar una
	    transformación o producir una salida, entre otros.  Estos
	    componentes se pueden personalizar y pueden ser creados
	    por el propio desarrollador.</P
><P
>Existen cuatro grupos generales de componentes.  Éstos
	      son:</P
><P
></P
><DIV
CLASS="variablelist"
><DL
><DT
>Entradas del
		<I
CLASS="foreignphrase"
>Pipeline</I
></DT
><DD
><P
>Son los generadores y los lectores (Ver <A
HREF="#EstructuraCocoon"
>Sección 3.1.1</A
>) .</P
></DD
><DT
>Procesadores</DT
><DD
><P
>Son los que llevan a cabo las transformaciones
		    y las acciones (Ver <A
HREF="#EstructuraCocoon"
>Sección 3.1.1</A
>).</P
></DD
><DT
>Salidas del <I
CLASS="foreignphrase"
>Pipeline</I
></DT
><DD
><P
>Son los serializadores (Ver <A
HREF="#EstructuraCocoon"
>Sección 3.1.1</A
>).</P
></DD
><DT
>Procesamiento Condicional</DT
><DD
><P
>Es la parte encargada de hacer las selecciones
		  y el proceso de <I
CLASS="foreignphrase"
>match</I
>
		  (<A
HREF="#selectoresYMatchers"
>Sección 7.1.1</A
>)</P
></DD
></DL
></DIV
></DD
><DT
>Atender una solicitud</DT
><DD
><P
>Esto incluye una serie de pasos, como identificar de
	      forma selectiva el
	      <I
CLASS="foreignphrase"
>pipeline</I
> correcto que
	      debe atender la solicitud pedida, cerciorarse de que el
	      <I
CLASS="foreignphrase"
>pipeline</I
> se lleve a cabo
	      y producir el resultado al cliente que hizo la
	      solicitud.</P
></DD
></DL
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="EstructuraCocoon">3.1.1. Estructura</H3
><P
>Estructuralmente hablando <SPAN
CLASS="application"
>Cocoon</SPAN
> 
	  está compuesto de:</P
><P
></P
><DIV
CLASS="variablelist"
><DL
><DT
>Productores</DT
><DD
><P
>Son los ficheros fuentes de donde proviene el
		<SPAN
CLASS="acronym"
>XML</SPAN
>.  Estos pueden ser estáticos o
		dinámicos (es decir creados mediante
		<SPAN
CLASS="acronym"
>XSP</SPAN
>).  La operación de un productor
		se basa en transformar los datos del fichero en
		eventos <SPAN
CLASS="acronym"
>SAX</SPAN
>.</P
></DD
><DT
>Procesadores</DT
><DD
><P
>Atrapan el <SPAN
CLASS="acronym"
>XML</SPAN
> de los
		productores para aplicarle diversos procesos, como por
		ejemplo hacer conectividad a una base de datos,
		aplicar transformaciones <SPAN
CLASS="acronym"
>XSL</SPAN
> a los
		documentos <SPAN
CLASS="acronym"
>XML</SPAN
>, convertir los
		<SPAN
CLASS="acronym"
>XSP</SPAN
> en clases
		<SPAN
CLASS="application"
>Java</SPAN
>, etc.  Son el proceso
		principal del <I
CLASS="foreignphrase"
>Pipeline</I
>.
		El más común es el transformador
		<SPAN
CLASS="acronym"
>XSLT</SPAN
></P
><P
>Cuando de contenido dinámico se habla, entran las
		acciones, es decir, procesos que sólo se pueden llevar a
		cabo y de los que sólo se puede saber el resultado en
		tiempo de producción, tales como interacción con bases de
		datos, validaciones, envío de correo electrónico, etc.</P
></DD
><DT
>Reactor</DT
><DD
><P
>Es la central estructural.  Extrae del
		<SPAN
CLASS="acronym"
>XML</SPAN
> del productor, las
		instrucciones para determinar qué procesadores
		actuarán en el documento.</P
></DD
><DT
>Formateadores</DT
><DD
><P
>Son el punto final en un
		<I
CLASS="foreignphrase"
>Pipeline</I
>.  Recogen la
		representación interna del <SPAN
CLASS="acronym"
>XML</SPAN
>
		resultante (que está dada en eventos
		<SPAN
CLASS="acronym"
>SAX</SPAN
>) y la preparan para enviar como
		respuesta al cliente en el formato adecuado.</P
><P
>El formateador o serializador más común es el
		serializador <SPAN
CLASS="acronym"
>XML</SPAN
> que simplemente
		obtiene los eventos <SPAN
CLASS="acronym"
>SAX</SPAN
> y los lleva
		a un documento <SPAN
CLASS="acronym"
>XML</SPAN
>.</P
></DD
></DL
></DIV
><P
>La anterior información se puede apreciar con el siguiente gráfico.</P
><DIV
CLASS="figure"
><A
NAME="AEN283"><P
><B
>Figura 3-1. <SPAN
CLASS="application"
>Cocoon</SPAN
> desde
		  un punto de vista estructural</B
></P
><P
><IMG
SRC="../images/estructura.png"
ALIGN="center"></P
></DIV
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="Arquitectura">3.1.2. Arquitectura</H3
><DIV
CLASS="figure"
><A
NAME="AEN289"><P
><B
>Figura 3-2. Arquitectura de <SPAN
CLASS="application"
>Cocoon</SPAN
></B
></P
><P
><IMG
SRC="../images/architecture.png"
ALIGN="center"></P
></DIV
><P
></P
><DIV
CLASS="variablelist"
><DL
><DT
><I
CLASS="foreignphrase"
>Core Cocoon</I
></DT
><DD
><P
>Es el corazón de
		<SPAN
CLASS="application"
>Cocoon</SPAN
>.  Encontramos un
		entorno para el control de sesiones, ficheros para
		configuración de <SPAN
CLASS="application"
>Cocoon</SPAN
>,
		para hacer manejo de contextos, aplicar mecanismos de
		caché, <I
CLASS="foreignphrase"
>Pipeline</I
>,
		generación, compilación, carga y ejecución de
		programas.</P
></DD
><DT
><I
CLASS="foreignphrase"
>Cocoon Components</I
></DT
><DD
><P
>En esta capa encontramos los generadores de
		<SPAN
CLASS="acronym"
>XML</SPAN
>, transformadores de
		<SPAN
CLASS="acronym"
>XML</SPAN
>, <I
CLASS="foreignphrase"
>matchers</I
> de ficheros y
		serializadores para formatear los ficheros.</P
></DD
><DT
><I
CLASS="foreignphrase"
>Built-in Logicsheets</I
></DT
><DD
><P
>Son hojas lógicas que necesita
		<SPAN
CLASS="application"
>Cocoon</SPAN
> para ficheros como
		<TT
CLASS="filename"
>sitemap</TT
>,
		<SPAN
CLASS="acronym"
>xsp</SPAN
>, <SPAN
CLASS="acronym"
>esql</SPAN
>,
		<I
CLASS="foreignphrase"
>request</I
>,
		<I
CLASS="foreignphrase"
>response</I
>.</P
></DD
><DT
><I
CLASS="foreignphrase"
>Site specific configuration,
		components, logicsheets and content</I
></DT
><DD
><P
>Es el nivel más externo en el cual un
		desarrollador puede hacer configuración, creación de
		componentes, creación de hojas lógicas y contenido
		definido por el usuario de
		<SPAN
CLASS="application"
>Cocoon</SPAN
> para su
		aplicación</P
></DD
></DL
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="chapter"
><HR><H1
><A
NAME="CocoonYLasXsps">Capítulo 4. <SPAN
CLASS="application"
>Cocoon</SPAN
> y las XSPs</H1
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
NAME="Introduccion">4.1. Introducción</H2
><P
>Las <SPAN
CLASS="acronym"
>XSPs</SPAN
> manejan la misma idea de las
	<SPAN
CLASS="acronym"
>JSPs</SPAN
>, es decir, páginas de servidor, con lo
	cual se tiene dinamismo con posibilidad de conectividad a
	bases de datos y con las ventajas del
	<SPAN
CLASS="acronym"
>XML</SPAN
>.</P
><P
>Una <SPAN
CLASS="acronym"
>XSP</SPAN
> es simplemente un documento
	<SPAN
CLASS="acronym"
>XML</SPAN
> en donde se puede incluir contenido
	tanto estático como dinámico para generar
	<SPAN
CLASS="acronym"
>XML</SPAN
> de forma dinámica.  Cabe anotar que el
	uso de <I
CLASS="foreignphrase"
>taglibs</I
> se puede
	implementar sin problemas (es más, de manera más intuitiva que
	en <SPAN
CLASS="acronym"
>JSP</SPAN
>, ya que los
	<I
CLASS="foreignphrase"
>taglibs</I
> son etiquetas
	<SPAN
CLASS="acronym"
>XML</SPAN
>) en las <SPAN
CLASS="acronym"
>XSP</SPAN
>, una
	evidencia adicional de las ventajas de esta nueva
	tecnología.</P
><P
>La siguiente gráfica muestra el flujo de operación en una
	solicitud <SPAN
CLASS="acronym"
>XSP</SPAN
>.</P
><DIV
CLASS="figure"
><A
NAME="AEN347"><P
><B
>Figura 4-1. Flujo en <SPAN
CLASS="acronym"
>XSP</SPAN
></B
></P
><P
><IMG
SRC="../images/flujoXSP.png"></P
></DIV
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="tiposDePaginasXSP">4.2. Tipos de páginas <SPAN
CLASS="acronym"
>XSP</SPAN
></H2
><P
>De acuerdo a la forma como se programan, las
	<SPAN
CLASS="acronym"
>XSPs</SPAN
> se pueden dividir en tres grupos:

	<P
></P
><OL
TYPE="1"
><LI
><P
>Con la lógica embebida en la presentación</P
></LI
><LI
><P
>Con hojas de estilos</P
></LI
><LI
><P
>Con bibliotecas etiquetas</P
></LI
></OL
>

      </P
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="XSPConLaLogicaEmbebidaEnLaPresentacion">4.2.1. <SPAN
CLASS="acronym"
>XSP</SPAN
> con la lógica embebida en la presentación</H3
><P
>En este tipo de páginas se escribe el código en la
	  propia página <SPAN
CLASS="acronym"
>XML</SPAN
>.  Ésta es la práctica
	  de programación menos recomendada y no debería utilizarla
	  nunca, ya que aunque puede funcionar, el mantenimiento se
	  torna muy complicado y la reutilización se minimiza
	  brutalmente.</P
><P
>Para hacer el tratamiento de este tipo de
	  <SPAN
CLASS="acronym"
>XSP</SPAN
>, el procesador <SPAN
CLASS="acronym"
>XSP</SPAN
>
	  analiza el <SPAN
CLASS="acronym"
>XML</SPAN
> y convierte la página en
	  un <SPAN
CLASS="application"
>Servlet</SPAN
> compilado.  Esto lo
	  hace llevando el <SPAN
CLASS="acronym"
>XML</SPAN
> a
	  <SPAN
CLASS="application"
>Java</SPAN
> mediante un árbol <SPAN
CLASS="acronym"
>DOM</SPAN
>. Una
	  vez llevado a código <SPAN
CLASS="application"
>Java</SPAN
>, se
	  procesa y al resultado final se le aplica una transformación
	  <SPAN
CLASS="acronym"
>XSLT</SPAN
> para llevar el resultado final a una
	  página <SPAN
CLASS="acronym"
>HTML</SPAN
>.
        </P
><P
>&#13;	  Como podemos ver esta forma de programación, degrada el
	  código <SPAN
CLASS="acronym"
>XML</SPAN
> ya que lo combina con el
	  <SPAN
CLASS="application"
>Java</SPAN
>, por lo tanto la separación
	  entre contenido y presentación de la cual hemos hablando no
	  se hace presente. Este tipo de forma de programar no
	  debería ser utilizada en ningún caso a menos que sea
	  estrictamente necesario (aunque a decir verdad nunca debería
	  ser estrictamente necesaria).
        </P
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="XSPConHojasDeEstilos">4.2.2. <SPAN
CLASS="acronym"
>XSP</SPAN
> con hojas de estilos</H3
><P
>Esta forma de programar las <SPAN
CLASS="acronym"
>XSP</SPAN
> es
	  mucho más recomendable que la anterior.  En ésta, la página
	  <SPAN
CLASS="acronym"
>XSP</SPAN
> original sería vista como un
	  documento <SPAN
CLASS="acronym"
>XML</SPAN
> que se vale de hojas de
	  estilos para aplicar la lógica de la programación, es decir
	  el código <SPAN
CLASS="application"
>Java</SPAN
>.  Cuando el
	  documento <SPAN
CLASS="acronym"
>XML</SPAN
> original es procesado, se
	  le aplica la transformación y como resultado se tiene una
	  página <SPAN
CLASS="acronym"
>XSP</SPAN
> con el código embebido.
        </P
><P
>Note que en este caso el mantenimiento de la página
	  mejora bastante con respecto al modelo que se expuso
	  anteriormente, sin embargo la reutilización es muy pobre ya
	  que el código fuente <SPAN
CLASS="application"
>Java</SPAN
> que se
	  necesite para otra página <SPAN
CLASS="acronym"
>XSP</SPAN
> se debe
	  incluir en otra <SPAN
CLASS="acronym"
>XSL</SPAN
> distinta.
        </P
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="XSPConLibreriasDeEtiquetas">4.2.3. <SPAN
CLASS="acronym"
>XSP</SPAN
> con bibliotecas de
	etiquetas</H3
><P
>La idea de esta forma de implementar
	  <SPAN
CLASS="acronym"
>XSP</SPAN
> es tener en bibliotecas
	  especializadas, etiquetas que se encarguen de ejecutar
	  cierto proceso, cierta función o procedimiento escrito en un
	  lenguaje de programación (como por ejemplo
	  <SPAN
CLASS="application"
>Java</SPAN
>) para que dichas bibliotecas
	  puedan ser incluidas mediante espacios de nombres en los
	  ficheros <SPAN
CLASS="acronym"
>XML</SPAN
> que las necesitan y así
	  mismo se puedan utilizar las funciones que proveen dichas
	  bibliotecas.  </P
><P
>Estas bibliotecas deberían agruparse por roles o por tipos
	  de funciones o servicios que proveen.</P
><P
>Como vemos en este caso el problema que aun teníamos,
	  reutilización de código se vuelve imperceptible y no existe,
	  ya que las bibliotecas y los servicios que proveen son
	  independientes del fichero <SPAN
CLASS="acronym"
>XML</SPAN
> que las
	  utiliza.
        </P
></DIV
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="XSPConAccesoABasesDeDatos">4.3. Conectividad a bases de datos</H2
><P
>Con las <SPAN
CLASS="acronym"
>XSP</SPAN
> y
	<SPAN
CLASS="application"
>Cocoon</SPAN
> se puede tener acceso a una
	bases de datos de cualquier tipo, con lo cual usted puede
	tener la persistencia de su aplicación en un sistema manejador
	de bases de datos y aprovechar las ventajas tanto del
	manejador como de las <SPAN
CLASS="acronym"
>XSP</SPAN
>.</P
><P
>Para poder utilizar una <SPAN
CLASS="acronym"
>XSP</SPAN
> para
	conectarse a una base de datos, usted tiene que cargar el
	<I
CLASS="foreignphrase"
>driver</I
> de su base de datos,
	definir las variables típicas de conexión a base de datos,
	tales como <SPAN
CLASS="acronym"
>url</SPAN
>, nombre de usuario,
	contraseña, etc.</P
><P
>Con <SPAN
CLASS="acronym"
>XSP</SPAN
> en
	<SPAN
CLASS="application"
>Cocoon</SPAN
> usted puede tener
	<I
CLASS="foreignphrase"
>prepared statements</I
>, manejo de
	múltiples <I
CLASS="foreignphrase"
>resultsets</I
> y
	<I
CLASS="foreignphrase"
>pool</I
> de conexiones.</P
><DIV
CLASS="note"
><P
></P
><TABLE
CLASS="note"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/note.gif"
HSPACE="5"
ALT="Nota"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Para más información de XSP y acceso a Bases de Datos vaya a 
	  la <A
HREF="#accesoABasesDeDatos"
>Sección 8.2.2</A
>.</P
></TD
></TR
></TABLE
></DIV
></DIV
></DIV
><DIV
CLASS="chapter"
><HR><H1
><A
NAME="ParalelismoConCocoon">Capítulo 5. Paralelismo con <SPAN
CLASS="application"
>Cocoon</SPAN
></H1
><DIV
CLASS="figure"
><A
NAME="AEN428"><P
><B
>Figura 5-1. WorkFlow en <SPAN
CLASS="application"
>Cocoon</SPAN
></B
></P
><P
><IMG
SRC="../images/workflow.png"></P
></DIV
><P
>Como ya nos hemos podido dar cuenta el paralelismo con
      <SPAN
CLASS="application"
>Cocoon</SPAN
> se incrementa de forma enorme.
      Esto mejora tanto la calidad de los productos (ya que las
      personas se especializan en un área en particular) como los
      tiempos de desarrollo de trabajo y de respuesta de los mismos.
      Aquí se explica como se puede hacer
      <I
CLASS="foreignphrase"
>Workflow</I
> con
      <SPAN
CLASS="application"
>Cocoon</SPAN
>. En éste se deben tener en
      cuenta estos 5 perfiles.</P
><P
></P
><DIV
CLASS="variablelist"
><DL
><DT
>Gestores de Contenido</DT
><DD
><P
>Estudian el tipo de contenido al cual se quieren o
	    deben referir. Una vez que identifican los contenidos,
	    notifican a los programadores para la construcción de
	    <I
CLASS="foreignphrase"
>taglibs</I
>.  La especificación
	    de contenidos la reciben también los desarrolladores
	    <SPAN
CLASS="acronym"
>XSP</SPAN
> y los diseñadores.</P
></DD
><DT
>Programadores</DT
><DD
><P
> Proporcionan <I
CLASS="foreignphrase"
>taglibs</I
>
	    que al ejecutarse generan el contenido acordado con los
	    gestores.</P
></DD
><DT
>Desarrolladores <SPAN
CLASS="acronym"
>XML</SPAN
></DT
><DD
><P
>Estructuran los contenidos en los
	    <SPAN
CLASS="acronym"
>XML</SPAN
>s que crean según lo acordado con
	    los gestores.  Introducen contenido estático en las
	    páginas y las etiquetas
	    <I
CLASS="foreignphrase"
>taglibs</I
> donde corresponda
	    para el contenido dinámico.</P
></DD
><DT
>Diseñadores</DT
><DD
><P
>Se encargan de construir el esquema de la interfaz.
	    Generan entonces la forma de presentación de los datos de
	    cada vista, de cada formato y cada uno de los elementos
	    estéticos.</P
></DD
><DT
>Desarrolladores <SPAN
CLASS="acronym"
>XSL</SPAN
></DT
><DD
><P
>Se dedican a elaborar documentos
	    <SPAN
CLASS="acronym"
>XSL</SPAN
> para obtener las vistas hechas por
	    los diseñadores a partir de los <SPAN
CLASS="acronym"
>XMLs</SPAN
>
	    hechos por los desarrolladores
	    <SPAN
CLASS="acronym"
>XML</SPAN
>.</P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="chapter"
><HR><H1
><A
NAME="InstalacionCocoon">Capítulo 6. Instalación de <SPAN
CLASS="application"
>Cocoon 2</SPAN
></H1
><P
>En este apartado nos adentramos en un campo un poco más denso, 
      explicando cómo hacer la instalación de <SPAN
CLASS="application"
>Cocoon</SPAN
>.
    </P
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="RequisitosParaLaInstalacion">6.1. Requisitos para la instalación</H2
><P
>Ya que <SPAN
CLASS="application"
>Cocoon</SPAN
>
	es una aplicación Web hecha en <SPAN
CLASS="application"
>Java</SPAN
>, debe ejecutarse sobre un
	motor de <SPAN
CLASS="application"
>Servlets</SPAN
>.
	Como estamos hablando de <SPAN
CLASS="application"
>Java</SPAN
>, <SPAN
CLASS="application"
>Cocoon</SPAN
> puede ser ejecutado sobre
	cualquier motor de <SPAN
CLASS="application"
>Servlets</SPAN
>.  Para este caso en
	particular se ha utilizado <SPAN
CLASS="application"
>Tomcat
	4.0.3</SPAN
></P
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="InstalacionDeTomcat">6.1.1. Instalación de <SPAN
CLASS="application"
>Tomcat</SPAN
></H3
><P
>La instalación de <SPAN
CLASS="application"
>Tomcat</SPAN
> es realmente muy
	    sencilla.</P
><P
>Lo primero que debe hacer es descargar el instalador.
	  Ésto lo puede hacer desde este <A
HREF="http://jakarta.apache.org/builds/jakarta-tomcat-4.0/release/"
TARGET="_top"
>enlace</A
>
	  en el cuál encontrará la última versión de este producto de
	  licencia libre.  Para el momento en el que este documento
	  estaba siendo elaborado la versión más reciente de
	  <SPAN
CLASS="application"
>Jakarta Tomcat</SPAN
>
	  era la 4.0.3 y ya existía una alfa para la versión
	  4.1.0</P
><P
>Una vez descargado el instalador, ejecútelo.  Los pasos
	  a seguir son bastante intuitivos y no presentan problema
	  alguno.</P
><P
>En el directorio donde instaló <SPAN
CLASS="application"
>Tomcat</SPAN
>, es decir, donde está
	  la raíz de la aplicación, lo llamaremos <TT
CLASS="varname"
>CATALINA_HOME</TT
>
	  (CATALINA<SPAN
CLASS="acronym"
></SPAN
> es el nombre del contenedor de <SPAN
CLASS="application"
>Servlets</SPAN
> de <SPAN
CLASS="application"
>Tomcat</SPAN
>, el cuál tiene una
	  implementación totalmente distinta desde la versión
	  4).</P
><P
>Para subir y bajar <SPAN
CLASS="application"
>Tomcat</SPAN
> vaya al directorio
	  <TT
CLASS="filename"
>CATALINA_HOME/bin</TT
>.  Ahí encontrará dos
	  <I
CLASS="foreignphrase"
>scripts</I
> para llevar a cabo
	  esta operación (<I
CLASS="foreignphrase"
>startup</I
> y
	  <I
CLASS="foreignphrase"
>shutdown</I
>
	  respectivamente).</P
><P
><SPAN
CLASS="application"
>Tomcat</SPAN
> se ejecuta
	  por omisión en el puerto 8080, así que una vez que haya
	  arrancado <SPAN
CLASS="application"
>Tomcat</SPAN
>
	  puede probar la instalación abriendo en el navegador la
	  dirección <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>http://localhost:8080</I
></SPAN
>.  Si la
	  instalación no tuvo problemas se le mostrará una página de
	  bienvenida semejante a ésta:</P
><DIV
CLASS="figure"
><A
NAME="AEN507"><P
><B
>Figura 6-1. Ventana de bienvenida de <SPAN
CLASS="application"
>Tomcat</SPAN
></B
></P
><P
><IMG
SRC="../images/tomcatEnBrowser.png"></P
></DIV
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="AmbienteJava">6.1.2. Ambiente Java</H3
><P
>Para poder ejecutar tanto <SPAN
CLASS="application"
>Tomcat</SPAN
> como <SPAN
CLASS="application"
>Cocoon</SPAN
> usted necesita tener
	    instalado el kit de desarrollo de <SPAN
CLASS="application"
>Java</SPAN
> el cual se encuentra
	  actualmente en la versión 1.4.0 y puede ser descargado de
	  forma gratuita desde este <A
HREF="http://java.sun.com/j2se/"
TARGET="_top"
>enlace</A
>.</P
></DIV
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="Instalacion">6.2. Instalando <SPAN
CLASS="application"
>Cocoon</SPAN
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
NAME="InstalacionRapidaDeCocoon">6.2.1. Instalación Rápida De <SPAN
CLASS="application"
>Cocoon</SPAN
></H3
><P
>De <SPAN
CLASS="application"
>Cocoon</SPAN
> se
	  pueden obtener dos distribuciones. La que trataremos en esta
	  parte es la distribución en binario que puede ser descargada
	  de este <A
HREF="http://xml.apache.org/cocoon/dist/"
TARGET="_top"
>enlace</A
>.
	  Con esta distribución lo único que usted debe hacer es
	  descargarla y descomprimirla en cualquier directorio.  En el
	  directorio que usted eligió deberá haber quedado el fichero
	  <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>cocoon.war</I
></SPAN
>.  Este fichero es el de la
	  aplicación <SPAN
CLASS="application"
>Cocoon</SPAN
>.</P
><P
>Para que <SPAN
CLASS="application"
>Tomcat</SPAN
> y <SPAN
CLASS="application"
>Cocoon</SPAN
> se puedan comunicar,
	  usted debe copiar el <TT
CLASS="filename"
>cocoon.war</TT
> en el directorio
	  <TT
CLASS="filename"
>CATALINA_HOME/webapps</TT
> e iniciar <SPAN
CLASS="application"
>Tomcat</SPAN
>.</P
><P
>Cuando usted inicia <SPAN
CLASS="application"
>Tomcat</SPAN
> puede darse cuenta que
	  el fichero es descomprimido automáticamente en el directorio
	  <TT
CLASS="filename"
>CATALINA_HOME/webapps/cocoon/</TT
>, el cual llamaremos de ahora
	  en adelante COCOON_HOME<TT
CLASS="varname"
></TT
>.  Para probar si
	  cocoon<SPAN
CLASS="application"
></SPAN
> está
	  funcionando puede abrir la dirección
	  <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>http://localhost:8080/cocoon/</I
></SPAN
> en el
	  <I
CLASS="foreignphrase"
>browser</I
>, en la cual debe
	  mostrársele una página de bienvenida de este estilo.</P
><DIV
CLASS="figure"
><A
NAME="AEN542"><P
><B
>Figura 6-2. Ventana de bienvenida de <SPAN
CLASS="application"
>Cocoon</SPAN
></B
></P
><P
><IMG
SRC="../images/cocoonEnBrowser.png"></P
></DIV
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="InstalacionAPartirDeLosFuentes">6.2.2. Instalación a partir de los fuentes</H3
><P
>En ocasiones es recomendable tener una copia local del
	  código de <SPAN
CLASS="application"
>Cocoon</SPAN
>
	  y compilar  la aplicación de forma local.  Para ésto, lo que
	  usted debe hacer es descargar el código fuente de
	  <SPAN
CLASS="application"
>Cocoon</SPAN
>.  Esto lo
	  puede realizar a través del servidor de
	  <SPAN
CLASS="acronym"
>CVS</SPAN
> (<SPAN
CLASS="acronym"
>Current Versioning
	  System</SPAN
>) de <SPAN
CLASS="acronym"
>Apache</SPAN
>.</P
><P
>Primero det todo, usted debe tener instalado
	  <SPAN
CLASS="acronym"
>CVS</SPAN
>.  Si usted no lo ha instalado aún en
	  su máquina, puede consultar el <A
HREF="http://www.cvshome.org/"
TARGET="_top"
>sitio web de
	  <SPAN
CLASS="acronym"
>CVS</SPAN
></A
> para más
	  información.</P
><P
>En el momento que tenga instalado el
	  <SPAN
CLASS="acronym"
>CVS</SPAN
>, ingrese al servidor de
	  <SPAN
CLASS="acronym"
>CVS</SPAN
> de <SPAN
CLASS="acronym"
>Apache</SPAN
> de la
	  siguiente forma:</P
><DIV
CLASS="informalexample"
><A
NAME="AEN562"><P
></P
><PRE
CLASS="screen"
>&#13;<TT
CLASS="prompt"
>$</TT
> <TT
CLASS="userinput"
><B
>cvs -d:pserver:anoncvs@cvs.apache.org:/home/cvspublic login</B
></TT
>
      </PRE
><P
></P
></DIV
><P
>Cuando se le pregunte por una contraseña escriba
    <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>anoncvs</I
></SPAN
>.  Luego escriba lo siguiente:</P
><DIV
CLASS="informalexample"
><A
NAME="AEN568"><P
></P
><PRE
CLASS="screen"
>&#13;<TT
CLASS="prompt"
>$</TT
> <TT
CLASS="userinput"
><B
>cvs -d:pserver:anoncvs@cvs.apache.org:/home/cvspublic -z3 checkout -r cocoon_20_branch xml-cocoon2</B
></TT
>
	  </PRE
><P
></P
></DIV
><P
>Una vez hecho esto se inicia la descarga de todo el código
	  necesario para la compilación de 
	  <SPAN
CLASS="application"
>Cocoon</SPAN
>.</P
><P
>Cuando tenga los fuentes de <SPAN
CLASS="application"
>Cocoon</SPAN
> descargados, debe
	    compilarlos para crear el fichero
	    <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>cocoon.war</I
></SPAN
>.  Para empezar a ejecutar
	    el proceso de compilación utilice la siguiente instrucción:
	    </P
><DIV
CLASS="informalexample"
><A
NAME="AEN577"><P
></P
><PRE
CLASS="screen"
>&#13;<TT
CLASS="prompt"
>$</TT
> <TT
CLASS="userinput"
><B
>./build.sh -Dinclude.webapp.libs=yes webapp</B
></TT
>
      </PRE
><P
></P
></DIV
><P
>Ésto creará un directorio con el código compilado, las
	  bibliotecas y el fichero <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>cocoon.war</I
></SPAN
>.  Una
	  vez termine el proceso copie el
	  <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>cocoon.war</I
></SPAN
> en el directorio <TT
CLASS="filename"
>CATALINA_HOME/webapps</TT
> y
	  reinicie <SPAN
CLASS="application"
>Tomcat</SPAN
>.
	  De esta forma <SPAN
CLASS="application"
>Cocoon</SPAN
> estará ejecutándose en
	  <SPAN
CLASS="application"
>http://localhost:8080/cocoon/</SPAN
>.</P
><DIV
CLASS="tip"
><A
NAME="tipInstalacionCocoon"><P
></P
><TABLE
CLASS="tip"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/tip.gif"
HSPACE="5"
ALT="Sugerencia"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Si usted está interesado en hacer pruebas con
	    <SPAN
CLASS="application"
>Cocoon</SPAN
> es útil
	    crear una aplicación aparte para este fin.  Ésto lo puede
	    hacer creando un directorio nuevo bajo <TT
CLASS="filename"
>CATALINA_HOME/webapps</TT
>.
	    Supongamos que a dicho directorio se le pone como nombre
	    <TT
CLASS="filename"
>pruebasCocoon</TT
>. Lo
	    que usted debe hacer es copiar el fichero
	    <TT
CLASS="filename"
>COCOON_HOME/cocoon.xconf</TT
> y la carpeta
	    <TT
CLASS="filename"
>COCOON_HOME/WEB-INF</TT
>
	    en <TT
CLASS="filename"
>CATALINA_HOME/webapps/pruebasCocoon/</TT
>.
	    Ésto ya es suficiente para empezar a hacer sus pruebas y
	    sus desarrollos ya que en <TT
CLASS="filename"
>WEB-INF</TT
> están todas las
	    clases necesarias para hacer que <SPAN
CLASS="application"
>Cocoon</SPAN
> pueda funcionar
	    correctamente.  Cree también su propio
	    <TT
CLASS="filename"
>sitemap</TT
> en <TT
CLASS="filename"
>CATALINA_HOME/webapps/pruebasCocoon</TT
>(con
	    lo cual no corre el riesgo de alterar los ejemplos y la
	    documentación que ya existan) y cargue su aplicación en
	    http://localhost:8080/pruebasCocoon/</P
></TD
></TR
></TABLE
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="chapter"
><HR><H1
><A
NAME="CocoonYElSitemap">Capítulo 7. Configuración y personalización en <SPAN
CLASS="application"
>Cocoon</SPAN
></H1
><P
><SPAN
CLASS="application"
>Cocoon</SPAN
> cuenta con
      varios ficheros para hacer la configuración y personalización del
      mismo.  Entre éstos, el más importante a nivel de usuario es el
      <TT
CLASS="filename"
>sitemap.xml</TT
>.  En este fichero se lleva a
      cabo el proceso de selección y
      <I
CLASS="foreignphrase"
>match</I
>.</P
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="ElSitemap">7.1. El <I
CLASS="foreignphrase"
>sitemap</I
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
NAME="selectoresYMatchers">7.1.1. Selección y match en <SPAN
CLASS="application"
>Cocoon</SPAN
></H3
><P
>Casi todo <I
CLASS="foreignphrase"
>Pipeline</I
> tiene
	  secciones condicionales.  Una sección condicional sirve para
	  decirle a <SPAN
CLASS="application"
>Cocoon</SPAN
>
	  qué tipo de solicitudes puede atender y cómo debe
	  atenderlas.</P
><P
>Los <I
CLASS="foreignphrase"
>matcher</I
> y los
	  selectores desempeñan la misma función en <SPAN
CLASS="application"
>Cocoon</SPAN
>, condicionar un
	  requerimiento como lo haría una instrucción
	  <B
CLASS="command"
>if</B
> y analizar si la condición se cumple o
	  no para poder llevar a cabo una tarea en particular.  La
	  diferencia entre un selector y un
	  <I
CLASS="foreignphrase"
>matcher</I
> radica que mientras
	  el primero enumera todos los posibles valores, el segundo
	  trabaja con expresiones regulares para evaluar la
	  condición</P
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="FuncionalidadDelSitemap">7.1.2. Funcionalidad del  <I
CLASS="foreignphrase"
>sitemap</I
></H3
><P
>En el <TT
CLASS="filename"
>sitemap</TT
> es en donde se lleva
	  a cabo la parte Web de <SPAN
CLASS="application"
>Cocoon</SPAN
>.  Éstee tiene dos
	  funciones básicas:</P
><P
></P
><UL
><LI
><P
>Declarar los componentes que serán utilizados por
	      cualquier <I
CLASS="foreignphrase"
>pipeline</I
>.
	    </P
></LI
><LI
><P
>Declarar los <I
CLASS="foreignphrase"
>pipelines</I
>
	      necesarios para el funcionamiento de las aplicaciones.</P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="EstructuraBasicaDelSitemap">7.1.3. Estructura básica del  <TT
CLASS="filename"
>sitemap</TT
></H3
><P
>El  <TT
CLASS="filename"
>sitemap</TT
> puede 
	  encontrase en el directorio de la 
	  aplicación Web <SPAN
CLASS="application"
>Cocoon</SPAN
>,
	  es decir es <TT
CLASS="filename"
>COCOON_HOME/sitemap.xml</TT
></P
><P
>El <TT
CLASS="filename"
>sitemap</TT
> tiene tres
	  partes básicas.  La primera es la declaración del espacio de
	  nombres, la segunda la declaración de los componentes y la tercera
	  es la declaración de los <I
CLASS="foreignphrase"
>pipelines</I
>.
	  Un fichero <TT
CLASS="filename"
>sitemap.xml</TT
> es entonces de este estilo:</P
><DIV
CLASS="example"
><A
NAME="AEN645"><P
><B
>Ejemplo 7-1. Ejemplo de un sitemap básico</B
></P
><PRE
CLASS="programlisting"
>&#13;   
&#60;map:sitemap
  xmlns:map="http://apache.org/cocoon/sitemap/1.0"&#62;

  &#60;map:components&#62;
    &#60;map:generators/&#62;
    &#60;map:readers/&#62;
    &#60;map:transformers/&#62;
    &#60;map:actions/&#62;
    &#60;map:serializers/&#62;
    &#60;map:matchers/&#62;
    &#60;map:selectors/&#62;
  &#60;/map:components&#62;

  &#60;map:pipelines&#62;
  &#60;/map:pipelines&#62;

&#60;/map:sitemap&#62;
   
   </PRE
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="chapter"
><HR><H1
><A
NAME="desarrolloEnCocoon">Capítulo 8. Desarrollo en <SPAN
CLASS="application"
>Cocoon</SPAN
></H1
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
NAME="contenidoEstatico">8.1. Contenido estático</H2
><P
>Para poder implantar sus aplicaciones de contenido
	estático en <SPAN
CLASS="application"
>Cocoon</SPAN
> usted debe
	seguir varios pasos:</P
><P
>Vamos a suponer que usted tiene un fichero para
	presentar información acerca de su empresa y es la página
	inicial de la misma.  En este caso ese fichero, por ser el
	inicial lo llamaremos <TT
CLASS="filename"
>index</TT
>.</P
><P
>Esto quiere decir que deberá tener un fichero llamado
	<TT
CLASS="filename"
>index.xml</TT
> (con su respectiva
	<SPAN
CLASS="acronym"
>DTD</SPAN
>, supongamos su nombre como <TT
CLASS="filename"
>index.dtd</TT
>)
	en el cual tendrá la información necesaria para mostrar la
	página principal de la empresa y además deberá tener un
	fichero index.xsl con el cual se aplicará formato
	<SPAN
CLASS="acronym"
>HTML</SPAN
> al documento
	<SPAN
CLASS="acronym"
>XML</SPAN
>.</P
><DIV
CLASS="tip"
><P
></P
><TABLE
CLASS="tip"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/tip.gif"
HSPACE="5"
ALT="Sugerencia"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Es de anotar que no tiene porque crear un fichero <SPAN
CLASS="acronym"
>XSL</SPAN
> por cada 
	  fichero <SPAN
CLASS="acronym"
>XML</SPAN
> que tenga en su aplicación, sólo que para efectos 
	  de un ejemplo de muestra basta con hacerlo de esta
	  forma.</P
></TD
></TR
></TABLE
></DIV
><P
>El fichero <TT
CLASS="filename"
>sitemap.xmap</TT
> de
	<SPAN
CLASS="application"
>Cocoon</SPAN
> nos servirá para decirle a
	<SPAN
CLASS="application"
>Cocoon</SPAN
> dónde encontrar los
	fuentes, como procesarlos y cómo presentarlos.  Este fichero
	lo puede encontrar en <TT
CLASS="filename"
>COCOON_HOME/</TT
>.</P
><P
>Lo que tiene que hacer es editar este fichero para añadirle 
	un <I
CLASS="foreignphrase"
>pipeline</I
> con el cual se pueda atender 
	una solicitud que muestre el fichero que desea presentar.</P
><P
>Para nuestro ejemplo vamos a suponer que el fichero
          <TT
CLASS="filename"
>index.xml</TT
> se encuentra en la ruta
          <TT
CLASS="filename"
>$MiAplicacion/XML/</TT
>,
          que el fichero <TT
CLASS="filename"
>index.dtd</TT
> se encuentra
          en la ruta <TT
CLASS="filename"
>$MiAplicacion/DTD</TT
> y el fichero
          <TT
CLASS="filename"
>index.xsl</TT
> que transforma el
          <SPAN
CLASS="acronym"
>XML</SPAN
> en un <SPAN
CLASS="acronym"
>HTML</SPAN
> se
	encuentra en la ruta <TT
CLASS="filename"
>$MiAplicacion/XSL/HTML/</TT
></P
><DIV
CLASS="caution"
><P
></P
><TABLE
CLASS="caution"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/caution.gif"
HSPACE="5"
ALT="Atención"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Tenga en cuenta la ruta en la que guarda su <SPAN
CLASS="acronym"
>DTD</SPAN
> para 
	  que el fichero <SPAN
CLASS="acronym"
>XML</SPAN
> la pueda reconocer.</P
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="tip"
><P
></P
><TABLE
CLASS="tip"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/tip.gif"
HSPACE="5"
ALT="Sugerencia"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Es recomendable manejar rutas relativas en la declaración de 
	  la <SPAN
CLASS="acronym"
>DTD</SPAN
> para mejorar la portabilidad de la aplicación.</P
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="tip"
><P
></P
><TABLE
CLASS="tip"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/tip.gif"
HSPACE="5"
ALT="Sugerencia"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Cuando este construyendo aplicaciones en
	  <SPAN
CLASS="application"
>Cocoon</SPAN
> es bastante útil definir
	  directorios para guardar sus ficheros
	  <SPAN
CLASS="acronym"
>XML</SPAN
>, <SPAN
CLASS="acronym"
>XSL</SPAN
>, sus
	  <SPAN
CLASS="acronym"
>DTD</SPAN
>, sus fuentes, sus clases, etc.
	</P
></TD
></TR
></TABLE
></DIV
><P
>Bien, el <I
CLASS="foreignphrase"
>pipeline</I
> que usted debe añadir es 
	de este estilo:</P
><DIV
CLASS="example"
><A
NAME="AEN698"><P
><B
>Ejemplo 8-1. Código para funcionamiento de un solicitud de un 
	  fichero <SPAN
CLASS="acronym"
>XML</SPAN
> presentado como un <SPAN
CLASS="acronym"
>HTML</SPAN
></B
></P
><PRE
CLASS="programlisting"
>&#13;    
   &#60;map:match pattern="MiAplicacion/index.html"&#62;
    &#60;map:generate type="file" src="$MiAplicacion/XML/index.xml"/&#62;
    &#60;map:transform src="$MiAplicacion/XSL/HTML/index.xsl"/&#62;
   &#60;/map:match&#62;
    
</PRE
></DIV
><P
>Analicemos un poco más detalladamente esto.  La línea
	<TT
CLASS="userinput"
><B
>match pattern="MiAplicacion/index.html"</B
></TT
>
	le indica a <SPAN
CLASS="application"
>Cocoon</SPAN
> que cuando
	llegue una solicitud del tipo
	<TT
CLASS="userinput"
><B
>http://localhost:8080/cocoon/MiAplicacion/index.html</B
></TT
>
	la atienda obteniendo los datos del fichero
	<SPAN
CLASS="acronym"
>XML</SPAN
>
	<TT
CLASS="filename"
>$MiAplicacion/XML/index.xml</TT
> (esto se le
	indica mediante la línea <TT
CLASS="userinput"
><B
>generate type="file"
	src="$MiAplicacion/XML/index.xml"</B
></TT
>) y aplicándole la
	transformación dada por el fichero <SPAN
CLASS="acronym"
>XSL</SPAN
>
	ubicado en
	<TT
CLASS="filename"
>$MiAplicacion/XSL/HTML/index.xsl</TT
> (lo cual
	se le dice mediante la línea <TT
CLASS="userinput"
><B
>transform
	src="$MiAplicacion/XSL/HTML/index.xsl"</B
></TT
>).</P
><DIV
CLASS="note"
><P
></P
><TABLE
CLASS="note"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/note.gif"
HSPACE="5"
ALT="Nota"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Para un ejemplo un poco más detallado consulte el <A
HREF="#formatoDeReunionSemanal"
>Apéndice A</A
>.
          </P
></TD
></TR
></TABLE
></DIV
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="contenidoDinamico">8.2. Contenido Dinámico</H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
NAME="dandoLogicaConProgramacionEnJava">8.2.1. Dando lógica con programación en <SPAN
CLASS="application"
>Java</SPAN
></H3
><DIV
CLASS="caution"
><P
></P
><TABLE
CLASS="caution"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/caution.gif"
HSPACE="5"
ALT="Atención"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>En Construcción</P
></TD
></TR
></TABLE
></DIV
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="accesoABasesDeDatos">8.2.2. Acceso a bases de datos</H3
><P
>Para acceder una base de datos usted debe tener en cuenta tres pasos:</P
><DIV
CLASS="procedure"
><OL
TYPE="1"
><LI
><DIV
CLASS="highlights"
><A
NAME="AEN728"
></A
><P
>Configurar el <I
CLASS="foreignphrase"
>Data
	      Source</I
> para acceder la base
	      datos.</P
></DIV
><P
>Ésto lo debe hacer en al fichero
	      <TT
CLASS="filename"
>cocoon.xconf</TT
> añadiendo las
	      siguientes líneas en la etiqueta
	      <TT
CLASS="userinput"
><B
>datasources</B
></TT
></P
><DIV
CLASS="example"
><A
NAME="AEN734"><P
><B
>Ejemplo 8-2. Código para definir un <I
CLASS="foreignphrase"
>Data Source</I
> para acceso a 
                     una base de datos</B
></P
><PRE
CLASS="programlisting"
>&#13;    
    &#60;jdbc name="nombreBD"&#62;
      &#60;pool-controller min="0" max="10"/&#62;
      &#60;dburl&#62;urlParaConexionABaseDeDatos&#60;/dburl&#62;
      &#60;user&#62;NombreUsuario&#60;/user&#62;
      &#60;password&#62;contraseñaUsuario&#60;/password&#62;
    &#60;/jdbc&#62;
    
            </PRE
><P
>Donde <TT
CLASS="replaceable"
><I
>nombreBD</I
></TT
> es el
		nombre que se le dará al <I
CLASS="foreignphrase"
>Data
		Source</I
>,
		<TT
CLASS="replaceable"
><I
>NombreUsuario</I
></TT
> es el nombre
		de un usuario registrado en la Base de Datos con el
		cual se llevará a cabo la conexión y
		<TT
CLASS="replaceable"
><I
>contraseñaUsuario</I
></TT
> es la
		contraseña del usuario
		<TT
CLASS="replaceable"
><I
>NombreUsuario</I
></TT
> con la cual
		se validará dicho usuario</P
></DIV
></LI
><LI
><DIV
CLASS="highlights"
><A
NAME="AEN745"
></A
><P
>Configurar el fichero <TT
CLASS="filename"
>web.xml</TT
></P
></DIV
><P
>Para que cargue el
	      <I
CLASS="foreignphrase"
>driver</I
> e incluir el
	      <I
CLASS="foreignphrase"
>driver</I
> de tal forma que
	      <SPAN
CLASS="application"
>Cocoon</SPAN
> tenga un lugar desde
	      donde cargarlo.</P
><P
>Para configurar el <TT
CLASS="filename"
>web.xml</TT
>
	      con ayuda de la etiqueta <TT
CLASS="sgmltag"
>init-param</TT
>
	      y la etiqueta hija de ésta,
	      <TT
CLASS="sgmltag"
>param-name</TT
> con valor
	      <TT
CLASS="userinput"
><B
>load-class</B
></TT
> enunciando dentro de
	      esta última el nombre del
	      <I
CLASS="foreignphrase"
>driver</I
> y separando el
	      nombre de los distintos
	      <I
CLASS="foreignphrase"
>drivers</I
> por coma o
	      espacio.  Por ejemplo, para incluir un
	      <I
CLASS="foreignphrase"
>driver</I
> para
	      <SPAN
CLASS="application"
>Oracle</SPAN
> y otro para
	      <I
CLASS="foreignphrase"
>IBM WebSphere</I
> las líneas
	      de código que deberían verse en el fichero <TT
CLASS="filename"
>web.xml</TT
>
	      serían:</P
><DIV
CLASS="example"
><A
NAME="AEN763"><P
><B
>Ejemplo 8-3. Código para cargar clases para acceso a bases de datos.</B
></P
><PRE
CLASS="programlisting"
>&#13;    
    &#60;init-param&#62;
      &#60;param-name&#62;load-class&#60;/param-name&#62;
      &#60;param-value&#62;

        &#60;!-- Para Oracle: --&#62;
        oracle.jdbc.driver.OracleDriver 

        &#60;!-- Para IBM WebSphere: --&#62;
        com.ibm.servlet.classloader.Handler 

	&#60;!-- For parent ComponentManager sample:
        org.apache.cocoon.samples.parentcm.Configurator
        --&#62;
      &#60;/param-value&#62;
    &#60;/init-param&#62;
    
</PRE
></DIV
><DIV
CLASS="note"
><P
></P
><TABLE
CLASS="note"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/note.gif"
HSPACE="5"
ALT="Nota"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Si usted está utilizando la Base de Datos que viene con
	<SPAN
CLASS="application"
>Cocoon</SPAN
>
	(<SPAN
CLASS="application"
>hsql</SPAN
>)este paso no
	es necesario</P
></TD
></TR
></TABLE
></DIV
></LI
><LI
><P
>Si va a utilizar <SPAN
CLASS="application"
>hsql</SPAN
> debe añadir las
      instrucciones de base de datos que necesite su aplicación, tales
      como sentencias de autenticación, de creación de tablas, de
       inserciones de datos, etc.  Esto lo debe hacer en el fichero <TT
CLASS="filename"
>cocoondb.script</TT
> ubicado en la ruta
      COCOON_HOME/WEB-INF/db/</P
><P
>Para nuestro caso se añadieron las siguientes
      líneas:</P
><DIV
CLASS="example"
><A
NAME="AEN775"><P
><B
>Ejemplo 8-4. Ejemplo de Código de Base de Datos necesario a incluir con la 
	  Base de Datos <SPAN
CLASS="application"
>hsql</SPAN
></B
></P
><PRE
CLASS="programlisting"
>&#13;CREATE USER usuario PASSWORD "contrasena" ADMIN
CONNECT USER usuario PASSWORD "contrasena"
CREATE TABLE PRUEBAS(ID INTEGER,NAME VARCHAR,UNIQUE(ID))
INSERT INTO PRUEBAS VALUES(1,'Prueba 1')
INSERT INTO PRUEBAS VALUES(1,'Prueba 2')
      </PRE
></DIV
><P
>con lo cual se está dando la posibilidad al usuario
       <TT
CLASS="replaceable"
><I
>usuario</I
></TT
> con contraseña
       <TT
CLASS="replaceable"
><I
>contrasena</I
></TT
> hacer operaciones sobre
       la tabla Pruebas, la cuál tiene 2 registros.</P
></LI
></OL
></DIV
><DIV
CLASS="sect3"
><HR><H4
CLASS="sect3"
><A
NAME="EtiquetasSQLyESQL">8.2.2.1. Etiquetas <SPAN
CLASS="acronym"
>SQL</SPAN
> y <SPAN
CLASS="acronym"
>ESQL</SPAN
></H4
><P
>Para la construcción de páginas <SPAN
CLASS="acronym"
>XSP</SPAN
>, contamos 
	       con dos tipos de etiquetas, <SPAN
CLASS="acronym"
>SQL</SPAN
> y <SPAN
CLASS="acronym"
>ESQL</SPAN
>.
		</P
><P
>La diferencia radica en que <SPAN
CLASS="acronym"
>ESQL</SPAN
> siendo más nuevo, presta
	       mayores funcionalidades como combinar distintos tipos de hojas de estilos, soporte 
	       para <I
CLASS="foreignphrase"
>prepared statements</I
> y manejo de varios 
	       <I
CLASS="foreignphrase"
>resultsets</I
> en una sola sentencia, entre otras cosas.  
	       De ahí su nombre, <I
CLASS="foreignphrase"
>Extended</I
> <SPAN
CLASS="acronym"
>SQL</SPAN
>.
		</P
><P
>A continuación presentaré dos ejemplos con estas tecnologías para analizar y 
	       tener en cuenta cómo funciona cada una.
		</P
><DIV
CLASS="sect4"
><HR><H5
CLASS="sect4"
><A
NAME="ejemploConUsoDeEtiquetaSQL">8.2.2.1.1. Ejemplo con uso de etiqueta <SPAN
CLASS="acronym"
>SQL</SPAN
></H5
><DIV
CLASS="procedure"
><OL
TYPE="1"
><LI
><P
>Añada un <I
CLASS="foreignphrase"
>pipeline</I
> en el
	<TT
CLASS="filename"
>sitemap</TT
> que sea de la
	forma: </P
><DIV
CLASS="example"
><A
NAME="AEN805"><P
><B
>Ejemplo 8-5. <I
CLASS="foreignphrase"
>Pipeline</I
> necesario para 
	  una <SPAN
CLASS="acronym"
>XSP</SPAN
> con etiquetas <SPAN
CLASS="acronym"
>SQL</SPAN
> 
	  y acceso a una Base de Datos</B
></P
><PRE
CLASS="programlisting"
>&#13;    
   &#60;map:match pattern="MiXSP/MiEjemploXspSql"&#62;
    &#60;map:generate src="$MiAplicacion/MiEjemploXspSql"/&#62;
    &#60;map:transform type="sql"&#62;
      &#60;map:parameter name="use-connection" value="MiConexion"/&#62;
    &#60;/map:transform&#62;
    &#60;map:transform src="stylesheets/simple-sql2html.xsl"/&#62;
    &#60;map:serialize/&#62;
   &#60;/map:match&#62;
    
       </PRE
></DIV
><DIV
CLASS="note"
><P
></P
><TABLE
CLASS="note"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/note.gif"
HSPACE="5"
ALT="Nota"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Para este caso, estamos indicando que el transformador
	 es de tipo <SPAN
CLASS="acronym"
>sql</SPAN
> y que se debe usar una conexión llamada
	 MiConexion.  Es decir, estamos indicando desde el <TT
CLASS="filename"
>sitemap</TT
> el nombre de la conexión</P
></TD
></TR
></TABLE
></DIV
></LI
></OL
></DIV
><P
>Teniendo en cuenta todo lo anteriormente expuesto, se
      pueden escribir páginas con etiquetas <SPAN
CLASS="acronym"
>sql</SPAN
>.</P
><DIV
CLASS="example"
><A
NAME="AEN817"><P
><B
>Ejemplo 8-6. Código de una <SPAN
CLASS="acronym"
>XSP</SPAN
> con conexión a Base
       de datos con etiqueta <SPAN
CLASS="acronym"
>SQL</SPAN
></B
></P
><PRE
CLASS="programlisting"
>&#13;    
	&#60;?xml version="1.0"?&#62;

	&#60;page xmlns:sql="http://apache.org/cocoon/SQL/2.0"&#62;

	 &#60;title&#62;Una Prueba con SQL&#60;/title&#62;
	 &#60;content&#62;
	  &#60;para&#62;Una página con SQL&#60;/para&#62;

	  &#60;execute-query xmlns="http://apache.org/cocoon/SQL/2.0"&#62; 
	   &#60;query&#62;
		select id, name from PRUEBAS
	   &#60;/query&#62;
	   &#60;execute-query&#62;
	    &#60;query&#62;
		select id, name from PRUEBAS
	    &#60;/query&#62;
	   &#60;/execute-query&#62;
	  &#60;/execute-query&#62;

	 &#60;/content&#62;
	&#60;/page&#62;
    
          </PRE
></DIV
></DIV
><DIV
CLASS="sect4"
><HR><H5
CLASS="sect4"
><A
NAME="AEN822">8.2.2.1.2. Ejemplo con uso de etiqueta <SPAN
CLASS="acronym"
>ESQL</SPAN
></H5
><DIV
CLASS="procedure"
><OL
TYPE="1"
><LI
><P
>Añada un <I
CLASS="foreignphrase"
>pipeline</I
> en el
	<TT
CLASS="filename"
>sitemap</TT
> que sea de la
	forma: </P
><DIV
CLASS="example"
><A
NAME="AEN830"><P
><B
>Ejemplo 8-7. <I
CLASS="foreignphrase"
>Pipeline</I
> necesario para 
	  una <SPAN
CLASS="acronym"
>XSP</SPAN
> con etiquetas <SPAN
CLASS="acronym"
>ESQL</SPAN
> 
	  y acceso a una Base de Datos</B
></P
><PRE
CLASS="programlisting"
>&#13;    
   &#60;map:match pattern="MiXSP/MiEjemploXspEsql"&#62;
    &#60;map:generate type="serverpages" src="$MiAplicacion/MiEjemploXspEsql.xsp"/&#62;
    &#60;map:transform src="stylesheets/dynamic-page2html.xsl"&#62;
    &#60;/map:transform&#62;
    &#60;map:serialize/&#62;
   &#60;/map:match&#62;

    
       </PRE
></DIV
><DIV
CLASS="note"
><P
></P
><TABLE
CLASS="note"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/note.gif"
HSPACE="5"
ALT="Nota"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Para este caso, estamos indicando que el generador 
	 es de tipo <I
CLASS="foreignphrase"
>serverpages</I
>.</P
></TD
></TR
></TABLE
></DIV
></LI
></OL
></DIV
><P
>Teniendo en cuenta todo lo anteriormente expuesto, se
      pueden escribir páginas con etiquetas <SPAN
CLASS="acronym"
>sql</SPAN
>.</P
><DIV
CLASS="example"
><A
NAME="AEN841"><P
><B
>Ejemplo 8-8. Código de una <SPAN
CLASS="acronym"
>XSP</SPAN
> con conexión a Base
       de datos con etiqueta <SPAN
CLASS="acronym"
>ESQL</SPAN
></B
></P
><PRE
CLASS="programlisting"
>&#13;    
	&#60;?xml version="1.0" encoding="ISO-8859-1"?&#62;

	&#60;xsp:page
		  language="java"
		  xmlns:xsp="http://apache.org/xsp"
		  xmlns:esql="http://apache.org/cocoon/SQL/v2"
	&#62;

	  &#60;page&#62;

	   &#60;title&#62;Una prueba con ESQL&#60;/title&#62;

	   &#60;content&#62;

	   &#60;esql:connection&#62;
	     &#60;esql:pool&#62;MiConexion&#60;/esql:pool&#62;
	     &#60;esql:execute-query&#62;
	       &#60;esql:query&#62;select * from PRUEBAS&#60;/esql:query&#62;
	       &#60;esql:results&#62;
		 &#60;esql:row-results&#62;
		   &#60;para&#62;&#60;esql:get-string column="name"/&#62;&#60;/para&#62;
		 &#60;/esql:row-results&#62;
	       &#60;/esql:results&#62;
	     &#60;/esql:execute-query&#62;
	   &#60;/esql:connection&#62;

	   &#60;/content&#62;
	  &#60;/page&#62;
	&#60;/xsp:page&#62;
    
          </PRE
></DIV
><DIV
CLASS="note"
><P
></P
><TABLE
CLASS="note"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/note.gif"
HSPACE="5"
ALT="Nota"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Note que en este caso, es en la página
      <SPAN
CLASS="acronym"
>XSP</SPAN
> en donde se define el nombre de la conexión.</P
></TD
></TR
></TABLE
></DIV
><P
>Como usted ya se habrá podido dar cuenta, la diferencia en implementación 
      entre ambas tecnologías es mínima.  Dependiendo de las necesidades de su aplicación puede 
      escojer entre ambas, teniendo en cuenta las potencialidades de <SPAN
CLASS="acronym"
>ESQL</SPAN
> y 
      el desconocimiento que existe aún por su poco tiempo de vida en el mundo del 
      <I
CLASS="foreignphrase"
>software</I
>.</P
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="deploymentEnCocoon">8.3. <I
CLASS="foreignphrase"
>Deployment</I
> en
	<SPAN
CLASS="application"
>Cocoon</SPAN
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
NAME="comoMinimo">8.3.1. Condiciones mínimas</H3
><P
>Es muy común tener varias aplicaciones bajo
            <SPAN
CLASS="application"
>Cocoon</SPAN
>, en cuyo caso es
            recomendable tener ficheros de configuración  aparte
            para el momento en el que se debe hacer
            <I
CLASS="foreignphrase"
>deployment</I
> a cada
            aplicación.  Esto mejora la portabilidad y la
            escalabilidad de los productos.</P
><P
>Para poder lograr esto <SPAN
CLASS="application"
>Cocoon</SPAN
>
            provee una herramienta poderosa, el concepto de
            <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>Sub<I
CLASS="foreignphrase"
>Sitemap</I
></I
></SPAN
>.</P
><P
>Un <I
CLASS="foreignphrase"
>subsitemap</I
> no es más
	  que un fichero <TT
CLASS="filename"
>sitemap</TT
> para
	  una parte en particular de una aplicación de
	  <SPAN
CLASS="application"
>Cocoon</SPAN
>.</P
><P
>Para poder utilizar esta técnica sólo se deben tener en cuenta dos cosas:</P
><P
></P
><UL
><LI
><P
>&#13;              Incluir en el <TT
CLASS="filename"
>sitemap</TT
> general de 
              <SPAN
CLASS="application"
>Cocoon</SPAN
> 
              el <TT
CLASS="filename"
>subsitemap</TT
> (y
              especificar a qué y en dónde se aplica 
              ese <TT
CLASS="filename"
>subsitemap</TT
>).
            </P
></LI
><LI
><P
>&#13;	      Incluir el <TT
CLASS="filename"
>subsitemap</TT
> en
	      el lugar correcto.
	    </P
></LI
></UL
><P
>Para esta parte voy a trabajar con el ejemplo de la sección referente a contenido 
	  estático desarrollada al inicio de este capítulo (ver ).
	</P
><P
>Para esta aplicación vamos a construir entonces un
            <TT
CLASS="filename"
>subsitemap</TT
> en el directorio
	  <TT
CLASS="filename"
>$MiAplicacion/</TT
>, es decir, el fichero quedará en la ruta
	  <TT
CLASS="filename"
>$MiAplicacion/sitemap.xmap</TT
>.
	</P
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="inclusionDeSubSitemapEnElSitemapDeCocoon">8.3.2. Inclusión de un <I
CLASS="foreignphrase"
>subsitemap</I
> en 
               el <I
CLASS="foreignphrase"
>sitemap</I
> de
               <SPAN
CLASS="application"
>Cocoon</SPAN
></H3
><P
>En el fichero <TT
CLASS="filename"
>sitemap.xmap</TT
> de
            <SPAN
CLASS="application"
>Cocoon</SPAN
> se deben añadir las 
            siguientes líneas:</P
><DIV
CLASS="example"
><A
NAME="AEN894"><P
><B
>Ejemplo 8-9. Código para incluir un <I
CLASS="foreignphrase"
>subsitemap</I
></B
></P
><PRE
CLASS="programlisting"
>&#13;    
   &#60;map:match pattern="MiAplicacion/*"&#62; 
    &#60;map:mount uri-prefix="MiAplicacion" check-reload="yes" src="$MiAplicacion/sitemap.xmap" 
	reload-method="synchron"/&#62; 
   &#60;/map:match&#62; 
    
          </PRE
></DIV
><P
>Bien, miremos un poco este código para comprenderlo mejor:</P
><P
></P
><UL
><LI
><P
>En la línea <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>match
                pattern="MiAplicacion/*"</I
></SPAN
> se le está
	      indicando a <SPAN
CLASS="application"
>Cocoon</SPAN
> que
	      cualquier recurso que intente ser accedido por el
	      <SPAN
CLASS="acronym"
>URL</SPAN
>
	      http://localhost:8080/cocoon/MiAplicacion/ debe ser
	      atendido con el fichero ubicado en
	      <TT
CLASS="filename"
>$MiAplicacion/sitemap.xmap</TT
> (esto se le está indicando
	      con el atributo <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>src</I
></SPAN
> de la
	      etiqueta <TT
CLASS="sgmltag"
>mount</TT
>, es decir, en la
	      línea <TT
CLASS="userinput"
><B
>mount uri-prefix="MiAplicacion"
                check-reload="yes"
                src="$MiAplicacion/sitemap.xmap"</B
></TT
> )
	    </P
></LI
><LI
><P
>Con el atributo <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>uri-prefix</I
></SPAN
> le
	      estamos diciendo que cuando siga el flujo del
	      requerimiento del usuario al
	      <I
CLASS="foreignphrase"
>subsitemap</I
> no le pase la
	      cadena MiAplicacion.  Esto es lógico, ya que para el
	      <TT
CLASS="filename"
>subsitemap</TT
> de
	      <SPAN
CLASS="application"
>MiAplicacion</SPAN
>, todos los requerimientos que va a atender
	      son de la aplicación <SPAN
CLASS="application"
>MiAplicacion</SPAN
>, por lo cual incluirlo
	      en cada uno de los
	      <I
CLASS="foreignphrase"
>pipelines</I
> del
	      <TT
CLASS="filename"
>subsitemap</TT
> sería
	      redundante.</P
></LI
><LI
><P
>Con el atributo <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>check-reload</I
></SPAN
>
	      damos la opción de que <SPAN
CLASS="application"
>Cocoon</SPAN
>
	      verifique cuando el
	      <I
CLASS="foreignphrase"
>subsitemap</I
> de
	      <SPAN
CLASS="application"
>MiAplicacion</SPAN
> sea modificado
	      para que lo vuelva a cargar.  Si el valor del atributo
	      es <I
CLASS="foreignphrase"
>yes</I
>, chequea cada vez
	      que sea modificado, si el valor es
	      <I
CLASS="foreignphrase"
>no</I
> sólo carga el
	      <I
CLASS="foreignphrase"
>subsitemap</I
> cada vez que
	      sea cargado <SPAN
CLASS="application"
>Cocoon</SPAN
>.</P
></LI
><LI
><P
>Por último, con el atributo
	      <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>reload-method</I
></SPAN
> le indicamos el modo
	      como debe recargar el <TT
CLASS="filename"
>subsitemap</TT
>.
	      Si el valor es <TT
CLASS="userinput"
><B
>synchron</B
></TT
>, recarga
	      el <I
CLASS="foreignphrase"
>subsitemap</I
> cuando se
	      le haga una solicitud y no muestra el resultado del
	      requerimiento hasta que es recargado por completo, caso
	      contrario a cuando el valor es
	      <TT
CLASS="userinput"
><B
>asynchron</B
></TT
> ya que en este caso,
	      aunque también recarga en el momento que se haga el
	      requerimiento, deja mostrar el resultado del
	      requerimiento mientras va recargando el fichero.  Es de
	      tener en cuenta aquí, que como el
	      <TT
CLASS="filename"
>subsitemap</TT
> no ha sido
	      recargado en el momento que se muestra el resultado de
	      la solicitud del usuario (cuando muestra el resultado
	      empieza a ejecutar el proceso que lo recarga), el
	      resultado mostrado no estará actualizado con respecto al
	      estado actual de la aplicación, sólo hasta que sea
	      pedido en la siguiente ocasión.</P
></LI
></UL
><DIV
CLASS="tip"
><P
></P
><TABLE
CLASS="tip"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/tip.gif"
HSPACE="5"
ALT="Sugerencia"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>En ambientes de desarrollo es bastante útil tener la
	    opción de que cada vez que se haga un cambio, éste se
	    pueda reflejar de forma inmediata.  Sin embargo en
	    ambientes de producción es mejor tener configurado que los
	    cambios se reflejen una vez el servicio se baje y se
	    vuelva a restaurar; ésto es para no perjudicar a
	    los usuarios de la aplicación quienes podrían tener la
	    impresión de una aplicación lenta.</P
><P
>Mejor aún si crea una copia de la aplicación, para
	    tener una en producción y otra en desarrollo para hacer
	    las pruebas.  Para conocer como crear una aplicación en
	    Cocoon consulte la sugerencia que está al final de la
	    sección <A
HREF="#InstalacionAPartirDeLosFuentes"
>Sección 6.2.2</A
></P
></TD
></TR
></TABLE
></DIV
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="codigoDelSubSitemap">8.3.3. Código del <TT
CLASS="filename"
>subsitemap</TT
></H3
><P
>El <TT
CLASS="filename"
>subsitemap</TT
>, el cual
	debe estar ubicado como ya se dijo en la ruta 
	  <TT
CLASS="filename"
>$MiAplicacion/</TT
> debe seguir el siguiente estilo:
        </P
><DIV
CLASS="example"
><A
NAME="AEN946"><P
><B
>Ejemplo 8-10. Código básico de un <I
CLASS="foreignphrase"
>subsitemap</I
></B
></P
><PRE
CLASS="programlisting"
>&#13;    
&#60;?xml version="1.0"?&#62;
&#60;map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0"&#62;
	&#60;!-- =========================== Components ================================ --&#62;
	&#60;map:components&#62;
		&#60;map:generators default="file"/&#62;
		&#60;map:transformers default="xslt"/&#62;
		&#60;map:readers default="resource"/&#62;
		&#60;map:serializers default="html"/&#62;
		&#60;map:selectors default="browser"/&#62;
		&#60;map:matchers default="wildcard"/&#62;

	&#60;/map:components&#62;
	&#60;!-- =========================== Pipelines ================================= --&#62;
	&#60;map:pipelines&#62;
		&#60;map:pipeline&#62;

                        &#60;map:match pattern="index.html"&#62;
                               &#60;map:generate type="file" src="$MiAplicacion/XML/index.xml"/&#62;
                               &#60;map:transform type="xslt" src="$MiAplicacion/XSL/HTML/index.xsl"/&#62;
                        &#60;/map:match&#62;

			&#60;map:handle-errors&#62;
				&#60;map:transform src="../stylesheets/system/error2html.xsl"/&#62;
				&#60;map:serialize status-code="500"/&#62;
			&#60;/map:handle-errors&#62;
		&#60;/map:pipeline&#62;
	&#60;/map:pipelines&#62;
&#60;/map:sitemap&#62;
    
          </PRE
></DIV
><P
>Miremos un poco este <TT
CLASS="filename"
>subsitemap</TT
>:</P
><P
></P
><UL
><LI
><P
>En las líneas:</P
><PRE
CLASS="programlisting"
>&#13;    
	&#60;!-- =========================== Components ================================ --&#62;
	&#60;map:components&#62;
		&#60;map:generators default="file"/&#62;
		&#60;map:transformers default="xslt"/&#62;
		&#60;map:readers default="resource"/&#62;
		&#60;map:serializers default="html"/&#62;
		&#60;map:selectors default="browser"/&#62;
		&#60;map:matchers default="wildcard"/&#62;

	&#60;/map:components&#62;
    
              </PRE
><P
>se están declarando los componentes del
	      <TT
CLASS="filename"
>subsitemap</TT
> y se está
	      diciendo con el atributo <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>default</I
></SPAN
>
	      que para la aplicación en cuestión los componentes 
	      predeterminados son los que se declararon con el valor de dicho
	      atributo en el <TT
CLASS="filename"
>sitemap</TT
>
	      general de <SPAN
CLASS="application"
>Cocoon</SPAN
>.</P
></LI
><LI
><P
>Por otro lado, en las líneas:</P
><PRE
CLASS="programlisting"
>&#13;    
	&#60;map:pipelines&#62;
		&#60;map:pipeline&#62;
                        &#60;map:match pattern="index.html"&#62;
                               &#60;map:generate type="file" src="$MiAplicacion/XML/index.xml"/&#62;
                               &#60;map:transform src="$MiAplicacion/XSL/HTML/index.xsl"/&#62;
                        &#60;/map:match&#62;

			&#60;map:handle-errors&#62;
				&#60;map:transform src="../stylesheets/system/error2html.xsl"/&#62;
				&#60;map:serialize status-code="500"/&#62;
			&#60;/map:handle-errors&#62;
		&#60;/map:pipeline&#62;
	&#60;/map:pipelines&#62;
    
</PRE
><P
>se están declarando los
                  <I
CLASS="foreignphrase"
>pipelines</I
>.  Esto se
	      hace de igual forma que como se hace en el
	      <I
CLASS="foreignphrase"
>sitemap</I
> general de
	      <SPAN
CLASS="application"
>Cocoon</SPAN
>.</P
><DIV
CLASS="note"
><P
></P
><TABLE
CLASS="note"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/note.gif"
HSPACE="5"
ALT="Nota"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Fíjese que en la línea
		<PRE
CLASS="programlisting"
><SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>&#13;		&#60;map:match pattern="index.html"&#62; </I
></SPAN
></PRE
>
		se está diciendo que si se hace una solicitud de la
		página <TT
CLASS="filename"
>index.html</TT
>, tome los datos
		del documento <TT
CLASS="filename"
>index.xml</TT
> y le
		aplique la transformación dada en
		<TT
CLASS="filename"
>index.xsl</TT
>.  Lo importante aquí es
		observar que esta página será mostrada cuando se
		cargue la dirección
		http://localhost:8080/cocoon/MiAplicacion/index.html
		ya que el <I
CLASS="foreignphrase"
>subsitemap</I
>
		esta dentro de <TT
CLASS="filename"
>$MiAplicacion</TT
> y en el
		<TT
CLASS="filename"
>sitemap</TT
> general se dijo
		que la cadena <TT
CLASS="userinput"
><B
>$MiAplicacion</B
></TT
> sería
		truncada.
	      </P
></TD
></TR
></TABLE
></DIV
></LI
></UL
></DIV
></DIV
></DIV
><DIV
CLASS="appendix"
><HR><H1
><A
NAME="formatoDeReunionSemanal">Apéndice A. Formato de reunión semanal</H1
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
NAME="AEN981">A.1. Introducción</H2
><P
>En el presente documento se introducirán algunos de los 
          términos comunes en la terminología <SPAN
CLASS="acronym"
>XML</SPAN
> y 
          para ello se utilizará como ejemplo, unos formatos de reuniones 
          semanales de Ingeniería de Software.
    </P
><P
>El formato de reunión semanal nació como una necesidad de 
          registrar información necesaria 
          para llevar un registro y un historial de reuniones de forma
          estructurada y con unos parámetros 
          y lineamientos identificados ya de antemano.
          </P
><P
>Este formato se implementó como un documento <SPAN
CLASS="acronym"
>XML</SPAN
> para poder
          tenerlo de forma estructurada, 
          aprovechar las ventajas propias del <SPAN
CLASS="acronym"
>XML</SPAN
> y
          conocer un poco esta tecnología.</P
><P
>Para las personas que no estén familiarizadas con la 
          tecnología <SPAN
CLASS="acronym"
>XML</SPAN
>, en este documento se  
          da una breve descripción de lo que es una <SPAN
CLASS="acronym"
>DTD</SPAN
> (<A
HREF="#DTD"
>Sección A.3.2.1</A
>), de lo que es un documento <SPAN
CLASS="acronym"
>XML</SPAN
> 
	  (<A
HREF="#XML"
>Sección A.3</A
>) y 
          de lo que es una <SPAN
CLASS="acronym"
>XSL</SPAN
> (<A
HREF="#XSL"
>Sección A.4</A
>) 
          junto con un ejemplo de cada una de estas 
          definiciones aplicadas al formato que tenemos como tema principal.</P
><DIV
CLASS="important"
><P
></P
><TABLE
CLASS="important"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/important.gif"
HSPACE="5"
ALT="Importante"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Este documento sólo pretende ser un pequeño "abrebocas" de
            lo que son estas tecnologías punta. 
            Es muy básico y la explicación está pensada para personas
            con muy pocos conocimientos.</P
></TD
></TR
></TABLE
></DIV
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="AEN999">A.2. Descripción formato de reunión semanal</H2
><P
>&#13;    En el formato de reunión semanal se pueden identificar tres componentes:  
    <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>información general de la reunión</I
></SPAN
>,
    <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>agenda de la reunión</I
></SPAN
> e 
    <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>informes por rol</I
></SPAN
>.
    </P
><P
>Cabe anotar que mientras la información general es de
          carácter obligatorio, la agenda y los informes por rol
          pueden o no aparecer en el documento, pero si aparecen será
          sólo una vez.</P
><P
>A continuación se describen estos
          tres elementos</P
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="AEN1007">A.2.1. Elementos del formato de reunión semanal</H3
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
NAME="AEN1009">A.2.1.1. Información General</H4
><P
>&#13;      La información general en el formato es de carácter obligatorio.  
      En éste se registra el
      sitio o lugar en donde se hizo la reunión, la fecha, la hora en la
      cual empezó la reunión en cuestión, la hora en que finalizó la
      misma, el secretario de la reunión quien es el que se encarga de
      registrar la información en el momento de la reunión y los
      asistentes de la reunión.</P
><P
>A excepción del
      asistente, los demás items descritos son obligatorios y van de
      forma única.  Los asistentes aunque es un dato obligatorio,
      tienen la particularidad de que pueden ser uno o varios.</P
></DIV
><DIV
CLASS="sect3"
><HR><H4
CLASS="sect3"
><A
NAME="AEN1013">A.2.1.2. Agenda</H4
><P
>Como ya se dijo la agenda en el
      formato es de carácter opcional, pero sólo puede aparecer una
      vez.  En ésta se registran los aspectos tratados contando por
      cada uno su respectiva descripción y sus propuestas.  En cada
      reunión se deben tratar uno o más aspectos y por cada uno se
      pueden o no hacer varias propuestas.  Una propuesta puede ser
      aprobada y puede tener una decisión.</P
></DIV
><DIV
CLASS="sect3"
><HR><H4
CLASS="sect3"
><A
NAME="AEN1016">A.2.1.3. Informes Por Rol</H4
><P
>Esta parte es de carácter
      opcional y en el caso de que aparezca sólo puede hacerlo una
      vez.  Aquí se almacenan las anotaciones que puede hacer el líder
      del proyecto o el personal de calidad, el de planificación, soporte
      o desarrollo.  También se registra el rol de esa persona.</P
></DIV
></DIV
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="XML">A.3. <SPAN
CLASS="acronym"
>XML</SPAN
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
NAME="AEN1022">A.3.1. ¿Qué es?</H3
><P
>No es más que un conjunto de reglas para definir etiquetas
   semánticas para organizar un documento.</P
><P
>La tecnología <SPAN
CLASS="acronym"
>XML</SPAN
> es realmente sencilla y tiene alrededor
   otras tecnologías que la complementan y la hacen más grande y con
   posibilidades mayores.  Entre estas se encuentran <SPAN
CLASS="acronym"
>XSL</SPAN
> y <SPAN
CLASS="acronym"
>XSP</SPAN
>.</P
></DIV
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="AEN1029">A.3.2. Ejemplo <SPAN
CLASS="acronym"
>XML</SPAN
> con el formato de reunión semanal de
   Ingeniería de Software</H3
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
NAME="DTD">A.3.2.1. <SPAN
CLASS="acronym"
>DTD</SPAN
> del formato de reunión semanal</H4
><DIV
CLASS="sect4"
><H5
CLASS="sect4"
><A
NAME="AEN1035">A.3.2.1.1. ¿Que es una <SPAN
CLASS="acronym"
>DTD</SPAN
>?</H5
><P
><SPAN
CLASS="acronym"
>DTD</SPAN
> es la sigla de <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>Document
     Type Definition (Definición de Tipo de Documento)</I
></SPAN
>.</P
><P
>Es un fichero lógico que contiene la definición formal de un
     tipo de documento en particular</P
><P
>En este se describen los nombres de los elementos, donde pueden
     aparecer y la interrelación entre ellos.  Con éste se puede
     validar el documento <SPAN
CLASS="acronym"
>XML</SPAN
>.</P
></DIV
><DIV
CLASS="sect4"
><HR><H5
CLASS="sect4"
><A
NAME="AEN1044">A.3.2.1.2. <SPAN
CLASS="acronym"
>DTD</SPAN
> del formato de reunión semanal</H5
><P
>El fuente de esta <SPAN
CLASS="acronym"
>DTD</SPAN
> la puede descargar
      desde este <A
HREF="../fuentes/reunionSemanal.dtd.txt"
TARGET="_top"
>enlace</A
>.</P
><DIV
CLASS="example"
><A
NAME="AEN1050"><P
><B
>Ejemplo A-1. Ejemplo de una <SPAN
CLASS="acronym"
>DTD</SPAN
> para el formato de reunión semanal</B
></P
><PRE
CLASS="programlisting"
> 
&#60;!ELEMENT reunionSemanal (informacionGeneral, agenda?, informesPorRol?)&#62;

&#60;!ELEMENT informacionGeneral (sitio, fecha, horaInicio, horaFin, secretario, asistente+)&#62;
&#60;!ELEMENT sitio (#PCDATA)&#62;
&#60;!ELEMENT fecha (#PCDATA)&#62;
&#60;!ELEMENT horaInicio (#PCDATA)&#62;
&#60;!ELEMENT horaFin (#PCDATA)&#62;
&#60;!ELEMENT secretario (#PCDATA)&#62;
&#60;!ELEMENT asistente (#PCDATA)&#62;

&#60;!ELEMENT agenda (aspectos)&#62;
&#60;!ELEMENT aspectos (aspecto+)&#62;
&#60;!ELEMENT aspecto (descripcion, propuestas?)&#62;
&#60;!ELEMENT descripcion (#PCDATA)&#62;
&#60;!ELEMENT propuestas (propuesta+)&#62;
&#60;!ELEMENT propuesta (textoPropuesta, decision?)&#62;
&#60;!ATTLIST propuesta aprobado (Si | No) "No"&#62;
&#60;!ELEMENT textoPropuesta (#PCDATA)&#62;
&#60;!ELEMENT decision (#PCDATA)&#62;

&#60;!ELEMENT informesPorRol (informePorRol+)&#62;
&#60;!ELEMENT informePorRol (#PCDATA)&#62;
&#60;!ATTLIST informePorRol rol (lider | calidad | planeacion | soporte | desarrollo) #REQUIRED&#62;
     
     </PRE
></DIV
></DIV
></DIV
><DIV
CLASS="sect3"
><HR><H4
CLASS="sect3"
><A
NAME="AEN1054">A.3.2.2. <SPAN
CLASS="acronym"
>XML</SPAN
> del formato de reunión semanal</H4
><P
>Aquí podemos apreciar un ejemplo de un posible documento
	<SPAN
CLASS="acronym"
>XML</SPAN
> del formato de 
              reunión semanal.</P
><P
>Puede obtener el fuente de este ejemplo haciendo click <A
HREF="../fuentes/reunionSemanal.xml.txt"
TARGET="_top"
>aquí</A
>.</P
><DIV
CLASS="example"
><A
NAME="AEN1061"><P
><B
>Ejemplo A-2. Ejemplo de un documento <SPAN
CLASS="acronym"
>XML</SPAN
> para el formato de reunión semanal</B
></P
><PRE
CLASS="programlisting"
>&#13;&#60;?xml version="1.0" standalone="no"?&#62;
&#60;!DOCTYPE reunionSemanal SYSTEM "reunionSemanal.dtd"&#62;
&#60;reunionSemanal&#62; 
  &#60;informacionGeneral&#62; 
	 &#60;sitio&#62; Oficina W302 &#60;/sitio&#62; 
	 &#60;fecha&#62; 27 de Febrero de 2002 &#60;/fecha&#62; 
	 &#60;horaInicio&#62; 4:00 pm &#60;/horaInicio&#62; 
	 &#60;horaFin&#62; 5:32 pm &#60;/horaFin&#62; 
	 &#60;secretario&#62; Juan Torres &#60;/secretario&#62; 
	 &#60;asistente&#62; Saúl Zarrate Cardenas &#60;/asistente&#62; 
	 &#60;asistente&#62; Juan Pablo Quiroga &#60;/asistente&#62; 
	 &#60;asistente&#62; Jaime Irving Dávila &#60;/asistente&#62; 
  &#60;/informacionGeneral&#62; 
  &#60;agenda&#62; &#60;aspectos&#62; 
	 &#60;aspecto&#62; 
		&#60;descripcion&#62; Practicar DTD, XML &#60;/descripcion&#62; 
		&#60;propuestas&#62; 
		  &#60;propuesta aprobado="No"&#62; 

			 &#60;textoPropuesta&#62; Desarrollar un ejemplo con el Formato de Lanzamiento
				de Ingenieria de Software &#60;/textoPropuesta&#62; 
			 &#60;decision&#62; Como ya se presentó el Formato de
     de Lanzamiento de Ingenieria de Software, 
					no hay que documentarlo &#60;/decision&#62; 
		  &#60;/propuesta&#62; 
		  &#60;propuesta aprobado="Si"&#62; 
			 &#60;textoPropuesta&#62; Desarrollar un ejemplo con el Formato de Reunión
				Semanal de Ingenieria de Software &#60;/textoPropuesta&#62; 
		  &#60;/propuesta&#62; 
		&#60;/propuestas&#62; 
	 &#60;/aspecto&#62; 
	 &#60;aspecto&#62; 
		&#60;descripcion&#62; Practicar XSL &#60;/descripcion&#62; 
		&#60;propuestas&#62; 
		  &#60;propuesta aprobado="Si"&#62; 
			 &#60;textoPropuesta&#62; Desarrollar un ejemplo con el XML del Formato de
				Reunión Semanal de Ingenieria de
     Software para presentación en html
			&#60;/textoPropuesta&#62; 
		  &#60;/propuesta&#62; 
		&#60;/propuestas&#62; 
	 &#60;/aspecto&#62; 
	 &#60;aspecto&#62; 
		&#60;descripcion&#62; Practicar DocBook &#60;/descripcion&#62; 
		&#60;propuestas&#62; 
		  &#60;propuesta aprobado="Si"&#62; 
			 &#60;textoPropuesta&#62; Documentar el desarrollo del XML y el XSL del
				Formato de Reunión de Ingenieria de
     Software &#60;/textoPropuesta&#62;
		  &#60;/propuesta&#62; 
		&#60;/propuestas&#62; 
	 &#60;/aspecto&#62; &#60;/aspectos&#62; 
  &#60;/agenda&#62; 
  &#60;informesPorRol&#62; 

	 &#60;informePorRol rol="planeacion"&#62; 
		Se cumplió con las expectativas de las metas planeadas
	 &#60;/informePorRol&#62; 
	 &#60;informePorRol rol="soporte"&#62; 
		Se dieron vinculos de Internet para poder tener ayudas en el desarrollo
		de los temas
	 &#60;/informePorRol&#62; 
	 &#60;informePorRol rol="desarrollo"&#62; 
		El trabajo acordado es interesante y cumple con lo buscado
	 &#60;/informePorRol&#62; 

  &#60;/informesPorRol&#62; 

&#60;/reunionSemanal&#62; 
    
    </PRE
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="XSL">A.4. <SPAN
CLASS="acronym"
>XSL</SPAN
></H2
><P
><SPAN
CLASS="acronym"
>XSL</SPAN
> es el acrónimo de <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>eXtensible
  Style Language (Lenguaje de Estilo eXtensible)</I
></SPAN
>.</P
><DIV
CLASS="sect2"
><HR><H3
CLASS="sect2"
><A
NAME="AEN1071">A.4.1. Algunos aspectos de <SPAN
CLASS="acronym"
>XSL</SPAN
></H3
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
NAME="AEN1074">A.4.1.1. ¿Qué es <SPAN
CLASS="acronym"
>XSL</SPAN
>?</H4
><P
>Es una Tecnología <SPAN
CLASS="acronym"
>XML</SPAN
> de hojas de estilos
   que sirve para mostrar documentos <SPAN
CLASS="acronym"
>XML</SPAN
>, 
   es decir, darles formato de presentación.</P
></DIV
><DIV
CLASS="sect3"
><HR><H4
CLASS="sect3"
><A
NAME="AEN1080">A.4.1.2. ¿Para qué sirve?</H4
><P
>La tecnología <SPAN
CLASS="acronym"
>XSL</SPAN
> sirve para transformar
   documentos <SPAN
CLASS="acronym"
>XML</SPAN
> en otros <SPAN
CLASS="acronym"
>XML</SPAN
>.
   Éste,
    permite la manipulación de la información <SPAN
CLASS="acronym"
>XML</SPAN
>. 
    <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
><SPAN
CLASS="acronym"
>XSLT</SPAN
> <SPAN
CLASS="acronym"
>XSL</SPAN
>
   <I
CLASS="foreignphrase"
>Transformation</I
></I
></SPAN
>.</P
><P
>También sirve para definir cómo acceder cierto punto de la estructura de un
    documento.  <SPAN
CLASS="acronym"
>XPath</SPAN
>.</P
><P
>Por otro lado, tiene la capacidad de definir el formato que
   deben tomar los objetos dentro de un 
    documento <SPAN
CLASS="acronym"
>XML</SPAN
>.
   <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
><SPAN
CLASS="acronym"
>XSLF</SPAN
><SPAN
CLASS="acronym"
>XSL</SPAN
>
   Format</I
></SPAN
>.</P
></DIV
><DIV
CLASS="sect3"
><HR><H4
CLASS="sect3"
><A
NAME="AEN1098">A.4.1.3. ¿De qué se trata?</H4
><P
>En un documento <SPAN
CLASS="acronym"
>XSL</SPAN
> se describe un
   conjunto de reglas para aplicarse en documentos 
    <SPAN
CLASS="acronym"
>XML</SPAN
>, reglas encaminadas a la presentación del
    documento <SPAN
CLASS="acronym"
>XML</SPAN
>.</P
></DIV
><DIV
CLASS="sect3"
><HR><H4
CLASS="sect3"
><A
NAME="AEN1104">A.4.1.4. Ejemplo de <SPAN
CLASS="acronym"
>XSL</SPAN
> con el formato de reunión semanal de
   Ingeniería de Software para salida en
   <SPAN
CLASS="acronym"
>HTML</SPAN
></H4
><P
>Para obtener el fuente <SPAN
CLASS="acronym"
>XSL</SPAN
> puede hacer click en este <A
HREF="../fuentes/reunionSemanal.xsl.txt"
TARGET="_top"
>enlace</A
>.</P
><DIV
CLASS="example"
><A
NAME="AEN1111"><P
><B
>Ejemplo A-3. Ejemplo de una <SPAN
CLASS="acronym"
>XSL</SPAN
> para el formato de reunión semanal</B
></P
><PRE
CLASS="programlisting"
>&#13;
&#60;?xml version="1.0"?&#62;
&#60;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&#62;

	&#60;xsl:template match="/reunionSemanal"&#62;
		&#60;HTML&#62;
			&#60;HEAD&#62;
				&#60;TITLE&#62;
					Acta &#60;xsl:apply-templates
					select="informacionGeneral/fecha"/&#62;
				&#60;/TITLE&#62;
			&#60;/HEAD&#62;
			&#60;BODY text="#000000" vLink="#840084"
			aLink="#0000ff" link="#0000ff"
			bgColor="#ffffff"&#62;
				&#60;B&#62;
					&#60;font size="6"&#62;
						Acta
						&#60;xsl:apply-templates
						select="informacionGeneral/fecha"/&#62;
					&#60;/font&#62;
					&#60;BR&#62;&#60;/BR&#62;
					&#60;BR&#62;&#60;/BR&#62;
					&#60;font size="4"&#62;
						&#60;xsl:apply-templates
						select="informacionGeneral/secretario"/&#62;
					&#60;/font&#62;
					&#60;BR&#62;&#60;/BR&#62;
					&#60;BR&#62;&#60;/BR&#62;
					&#60;HR&#62;&#60;/HR&#62;
					&#60;BR&#62;&#60;/BR&#62;
					&#60;BR&#62;&#60;/BR&#62;
					Tabla de Contenido
				&#60;/B&#62;
				&#60;BR&#62;&#60;/BR&#62;
				&#60;UL&#62;
					&#60;A href="#items"&#62;Items a discutir&#60;/A&#62;
					&#60;BR&#62;&#60;/BR&#62;
					&#60;A href="#decisionesTomadas"&#62;Decisiones tomadas&#60;/A&#62;
					&#60;BR&#62;&#60;/BR&#62;
					&#60;A href="#reportesDeRol"&#62;Reportes de rol&#60;/A&#62;
				&#60;/UL&#62;
				&#60;HR&#62;&#60;/HR&#62;
				&#60;BR&#62;&#60;/BR&#62;
				&#60;B&#62;
					&#60;FONT SIZE="6"&#62;
						&#60;A name="#items"&#62;Items a discutir&#60;/A&#62;
					&#60;/FONT&#62;
				&#60;/B&#62;

				&#60;BR&#62;&#60;/BR&#62;
				&#60;xsl:apply-templates select="agenda/aspectos"/&#62;

				&#60;HR&#62;&#60;/HR&#62;
				&#60;B&#62;
					&#60;FONT SIZE="6"&#62;
						&#60;BR&#62;&#60;/BR&#62;
						&#60;A
						name="#decisionesTomadas"&#62;Decisiones
						Tomadas&#60;/A&#62;
					&#60;/FONT&#62;
				&#60;/B&#62;

				&#60;BR&#62;&#60;/BR&#62;

				&#60;xsl:apply-templates
				select="agenda/aspectos/aspecto/propuestas/propuesta"/&#62;


				&#60;HR&#62;&#60;/HR&#62;
				&#60;B&#62;
					&#60;FONT SIZE="6"&#62;
						&#60;BR&#62;&#60;/BR&#62;
						&#60;A name="#reportesDeRol"&#62;Reportes de rol&#60;/A&#62;
					&#60;/FONT&#62;
				&#60;/B&#62;

				&#60;xsl:apply-templates select="informesPorRol"/&#62;

			&#60;/BODY&#62;
		&#60;/HTML&#62;
	&#60;/xsl:template&#62;

	&#60;xsl:template match="fecha"&#62;
		&#60;xsl:value-of select='.'/&#62;
	&#60;/xsl:template&#62;

	&#60;xsl:template match="secretario"&#62;
		&#60;xsl:value-of select='.'/&#62; 
	&#60;/xsl:template&#62;

	&#60;xsl:template match="aspectos"&#62;
		&#60;xsl:apply-templates select="aspecto"/&#62;
	&#60;/xsl:template&#62;

	&#60;xsl:template match="aspecto"&#62;
		&#60;UL&#62;
			&#60;LI&#62;
				&#60;xsl:value-of select="descripcion"/&#62;
			&#60;/LI&#62;
		&#60;/UL&#62;
	&#60;/xsl:template&#62;

	&#60;xsl:template match="propuesta"&#62;
		&#60;xsl:choose&#62;
			&#60;xsl:when test='decision!=""'&#62;
				&#60;UL&#62;
					&#60;LI&#62;
						&#60;xsl:value-of select="decision"/&#62;
					&#60;/LI&#62;
				&#60;/UL&#62;
			&#60;/xsl:when&#62;
		&#60;/xsl:choose&#62;
	&#60;/xsl:template&#62;

	&#60;xsl:template match="informesPorRol"&#62;
		&#60;xsl:apply-templates select="informePorRol"/&#62;
		&#60;BR&#62;
		&#60;/BR&#62;
	&#60;/xsl:template&#62;

	&#60;xsl:template match="informePorRol"&#62;
		&#60;UL&#62;
			&#60;LI&#62;
				Reporte de 
					&#60;xsl:value-of select="@rol"/&#62;:  
					&#60;xsl:value-of select='.'/&#62;
			&#60;/LI&#62;
		&#60;/UL&#62;
	&#60;/xsl:template&#62;

&#60;/xsl:stylesheet&#62;

   
   </PRE
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="sect1"
><HR><H2
CLASS="sect1"
><A
NAME="AEN1115">A.5. Usando el formato de reunión semanal en <SPAN
CLASS="application"
>Cocoon</SPAN
></H2
><P
>Para usar el formato de reunión semanal en <SPAN
CLASS="application"
>Cocoon</SPAN
>, usted
  básicamente tiene que seguir los siguiente pasos:</P
><DIV
CLASS="procedure"
><OL
TYPE="1"
><LI
><P
>Guardar el fichero <SPAN
CLASS="acronym"
>XML</SPAN
> y su
    <SPAN
CLASS="acronym"
>DTD</SPAN
> en el directorio que usted 
    escoja.  Para nuestro ejemplo lo haremos en la ruta $ReunionSemanalHome/XML.</P
></LI
><LI
><P
>Guardar el fichero <SPAN
CLASS="acronym"
>XSL</SPAN
> para la transformación del documento
    <SPAN
CLASS="acronym"
>XML</SPAN
> en uno <SPAN
CLASS="acronym"
>HTML</SPAN
> en cualquier
    carpeta.  Para nuestro ejemplo lo 
    haremos en la ruta $ReunionSemanalHome/XSL/HTML.</P
></LI
><LI
><P
>En el fichero <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>sitemap.xml</I
></SPAN
> de 
     <SPAN
CLASS="application"
>Cocoon</SPAN
> añada un
     <I
CLASS="foreignphrase"
>Pipeline</I
> de este estilo:</P
><DIV
CLASS="example"
><A
NAME="AEN1135"><P
><B
>Ejemplo A-4. Código para añadir un <I
CLASS="foreignphrase"
>pipeline</I
> que 
	  cargue el formato de reunión semanal</B
></P
><PRE
CLASS="programlisting"
>&#13;    
   &#60;map:match pattern="MiAplicacion/FormatoDeReunionSemanal.html"&#62;
     &#60;map:generate src="$ReunionSemanalHome/XML"/&#62;
     &#60;map:serialize type="xml"/&#62;
   &#60;/map:match&#62;
    
    </PRE
></DIV
></LI
><LI
><P
>Por último inicie su servidor de <SPAN
CLASS="application"
>Servlets</SPAN
> y cargue el documento.
     Para el caso de <SPAN
CLASS="application"
>Apache
      Tomcat</SPAN
> puede cargar el documento en
      http://localhost:8080/cocoon/MiAplicacion/FormatoDeReunionSemanal.html.</P
><P
>Debería cargarle algo como:</P
><DIV
CLASS="figure"
><A
NAME="AEN1144"><P
><B
>Figura A-1. Formato de reunión semanal en  <SPAN
CLASS="application"
>Cocoon</SPAN
></B
></P
><P
><IMG
SRC="../images/reunionEnCocoon.png"
ALIGN="center"></P
></DIV
></LI
></OL
></DIV
><DIV
CLASS="caution"
><P
></P
><TABLE
CLASS="caution"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/caution.gif"
HSPACE="5"
ALT="Atención"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Tenga en cuenta la ruta en la que guarda su <SPAN
CLASS="acronym"
>DTD</SPAN
> para 
            que el fichero <SPAN
CLASS="acronym"
>XML</SPAN
> la pueda reconocer.</P
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="tip"
><P
></P
><TABLE
CLASS="tip"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/tip.gif"
HSPACE="5"
ALT="Sugerencia"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Es recomendable manejar rutas relativas en la declaración de 
            la <SPAN
CLASS="acronym"
>DTD</SPAN
> para mejorar portabilidad de la aplicación.</P
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="tip"
><P
></P
><TABLE
CLASS="tip"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="/docbook-dsssl/tip.gif"
HSPACE="5"
ALT="Sugerencia"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>Cuando esté construyendo aplicaciones en <SPAN
CLASS="application"
>Cocoon</SPAN
> 
            es bastante útil definir directorios para guardar sus ficheros <SPAN
CLASS="acronym"
>XML</SPAN
>, 
            <SPAN
CLASS="acronym"
>XSL</SPAN
>, sus <SPAN
CLASS="acronym"
>DTD</SPAN
>, sus fuentes, sus clases, etc.
      </P
></TD
></TR
></TABLE
></DIV
></DIV
></DIV
></DIV
></BODY
></HTML
>